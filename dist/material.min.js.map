{"version":3,"sources":["material.js","mdlComponentHandler.js","tabs.js","layout.js","button.js","checkbox.js","icon-toggle.js","menu.js","progress.js","radio.js","slider.js","snackbar.js","spinner.js","switch.js","textfield.js","tooltip.js","data-table.js","datepicker.js","ripple.js"],"names":["MaterialTab","tab","ctx","element_","classList","contains","CssClasses_","MDL_JS_RIPPLE_EFFECT","rippleContainer","document","createElement","add","MDL_RIPPLE_CONTAINER","ripple","MDL_RIPPLE","appendChild","addEventListener","e","preventDefault","href","split","panel","querySelector","resetTabState_","resetPanelState_","ACTIVE_CLASS","MaterialLayoutTab","tabs","panels","layout","selectTab","content_","IS_ACTIVE","tabBar_","JS_RIPPLE_EFFECT","RIPPLE_CONTAINER","RIPPLE","getAttribute","charAt","show","componentHandler","upgradeDom","optJsClass","optCssClass","upgradeElement","element","upgradeElements","elements","upgradeAllRegistered","registerUpgradedCallback","jsClass","callback","register","config","downgradeElements","nodes","findRegisteredClass_","name","optReplace","i","registeredComponents_","length","className","getUpgradedListOfElement_","dataUpgraded","isElementUpgraded_","upgradedList","indexOf","upgradeDomInternal","cssClass","registeredClass","querySelectorAll","n","upgradeElementInternal","Element","Error","classesToUpgrade","push","forEach","component","setAttribute","join","instance","classConstructor","componentConfigProperty_","createdComponents_","j","m","callbacks","widget","ev","window","CustomEvent","Event","bubbles","cancelable","createEvent","initEvent","dispatchEvent","upgradeElementsInternal","Array","isArray","item","prototype","slice","call","HTMLElement","children","registerInternal","widgetMissing","newConfig","constructor","classAsString","hasOwnProperty","found","registerUpgradedCallbackInternal","regClass","upgradeAllRegisteredInternal","deconstructComponentInternal","componentIndex","splice","upgrades","componentPlace","downgradeNodesInternal","downgradeNode","node","filter","NodeList","Node","ComponentConfigPublic","ComponentConfig","Component","documentElement","MaterialButton","this","init","Constant_","RIPPLE_EFFECT","blurHandler_","event","blur","disable","disabled","enable","rippleElement_","boundRippleBlurHandler","bind","boundButtonBlurHandler","MaterialCheckbox","TINY_TIMEOUT","INPUT","BOX_OUTLINE","FOCUS_HELPER","TICK_OUTLINE","RIPPLE_IGNORE_EVENTS","RIPPLE_CENTER","IS_FOCUSED","IS_DISABLED","IS_CHECKED","IS_UPGRADED","onChange_","updateClasses_","onFocus_","onBlur_","remove","onMouseUp_","blur_","checkDisabled","checkToggleState","setTimeout","inputElement_","checked","check","uncheck","boxOutline","tickContainer","tickOutline","rippleContainerElement_","boundRippleMouseUp","boundInputOnChange","boundInputOnFocus","boundInputOnBlur","boundElementMouseUp","MaterialIconToggle","boundElementOnMouseUp","MaterialMenu","TRANSITION_DURATION_SECONDS","TRANSITION_DURATION_FRACTION","CLOSE_TIMEOUT","Keycodes_","ENTER","ESCAPE","SPACE","UP_ARROW","DOWN_ARROW","CONTAINER","OUTLINE","ITEM","ITEM_RIPPLE_CONTAINER","IS_VISIBLE","IS_ANIMATING","BOTTOM_LEFT","BOTTOM_RIGHT","TOP_LEFT","TOP_RIGHT","UNALIGNED","container","parentElement","insertBefore","removeChild","container_","outline","outline_","forElId","forEl","getElementById","forElement_","handleForClick_","handleForKeyboardEvent_","items","boundItemKeydown_","handleItemKeyboardEvent_","boundItemClick_","handleItemClick_","tabIndex","evt","rect","getBoundingClientRect","forRect","style","right","top","offsetTop","offsetHeight","left","offsetLeft","bottom","toggle","keyCode","focus","currentIndex","target","MouseEvent","click","hide","hasAttribute","stopPropagation","closing_","applyClip_","height","width","clip","removeAnimationEndListener_","addAnimationEndListener_","transitionDuration","itemDelay","transitionDelay","requestAnimationFrame","parentNode","removeEventListener","removeProperty","MaterialProgress","INDETERMINATE_CLASS","setProgress","p","progressbar_","setBuffer","bufferbar_","auxbar_","el","MaterialRadio","JS_RADIO","RADIO_BTN","RADIO_OUTER_CIRCLE","RADIO_INNER_CIRCLE","radios","getElementsByClassName","button","btnElement_","onMouseup_","boundChangeHandler_","boundFocusHandler_","boundBlurHandler_","boundMouseUpHandler_","outerCircle","innerCircle","MaterialSlider","isIE_","navigator","msPointerEnabled","IE_CONTAINER","SLIDER_CONTAINER","BACKGROUND_FLEX","BACKGROUND_LOWER","BACKGROUND_UPPER","IS_LOWEST_VALUE","onInput_","updateValueStyles_","onContainerMouseDown_","newEvent","buttons","clientX","clientY","y","fraction","value","min","max","backgroundLower_","flex","webkitFlex","backgroundUpper_","change","containerIE","backgroundFlex","boundInputHandler","boundChangeHandler","boundMouseUpHandler","boundContainerMouseDownHandler","MaterialSnackbar","textElement_","cssClasses_","MESSAGE","actionElement_","ACTION","active","actionHandler_","undefined","message_","actionText_","queuedNotifications_","setActionHidden_","ANIMATION_LENGTH","SNACKBAR","ACTIVE","displaySnackbar_","textContent","cleanup_","timeout_","showSnackbar","data","checkQueue_","shift","removeAttribute","MaterialSpinner","MDL_SPINNER_LAYER_COUNT","MDL_SPINNER_LAYER","MDL_SPINNER_CIRCLE_CLIPPER","MDL_SPINNER_CIRCLE","MDL_SPINNER_GAP_PATCH","MDL_SPINNER_LEFT","MDL_SPINNER_RIGHT","createLayer","index","layer","leftClipper","gapPatch","rightClipper","circleOwners","circle","stop","start","MaterialSwitch","TRACK","THUMB","on","off","track","thumb","focusHelper","boundFocusHandler","boundBlurHandler","MaterialTabs","TAB_CLASS","PANEL_CLASS","UPGRADED_CLASS","MDL_JS_RIPPLE_EFFECT_IGNORE_EVENTS","initTabs_","tabs_","panels_","k","MaterialTextfield","maxRows","NO_MAX_ROWS","MAX_ROWS_ATTRIBUTE","LABEL","IS_DIRTY","IS_INVALID","HAS_PLACEHOLDER","onKeyDown_","currentRowCount","onReset_","checkValidity","checkDirty","checkFocus","input_","validity","valid","label_","parseInt","isNaN","boundUpdateClassesHandler","boundResetHandler","boundKeyDownHandler","invalid","MaterialTooltip","BOTTOM","LEFT","RIGHT","TOP","handleMouseEnter_","props","marginLeft","offsetWidth","marginTop","handleMouseLeave_","boundMouseEnterHandler","boundMouseLeaveHandler","MaterialLayout","MAX_WIDTH","TAB_SCROLL_PIXELS","RESIZE_TIMEOUT","MENU_ICON","CHEVRON_LEFT","CHEVRON_RIGHT","Mode_","STANDARD","SEAMED","WATERFALL","SCROLL","HEADER","DRAWER","CONTENT","DRAWER_BTN","ICON","HEADER_SEAMED","HEADER_WATERFALL","HEADER_SCROLL","FIXED_HEADER","OBFUSCATOR","TAB_BAR","TAB_CONTAINER","TAB","TAB_BAR_BUTTON","TAB_BAR_LEFT_BUTTON","TAB_BAR_RIGHT_BUTTON","PANEL","HAS_DRAWER","HAS_TABS","HAS_SCROLLING_HEADER","CASTING_SHADOW","IS_COMPACT","IS_SMALL_SCREEN","IS_DRAWER_OPEN","ON_LARGE_SCREEN","ON_SMALL_SCREEN","contentScrollHandler_","header_","headerVisible","scrollTop","keyboardEventHandler_","drawer_","toggleDrawer","screenSizeHandler_","screenSizeMediaQuery_","matches","obfuscator_","drawerToggleHandler_","type","headerTransitionEndHandler_","headerClickHandler_","drawerButton","focusedElement","directChildren","childNodes","numChildren","c","child","persisted","overflowY","mode","drawerButtonIcon","innerHTML","firstChild","obfuscator","matchMedia","addListener","tabContainer","leftButton","leftButtonIcon","scrollLeft","rightButton","rightButtonIcon","tabUpdateHandler","scrollWidth","windowResizeHandler","resizeTimeoutId_","clearTimeout","MaterialDataTable","DATA_TABLE","SELECTABLE","SELECT_ELEMENT","IS_SELECTED","selectRow_","checkbox","row","optRows","createCheckbox_","label","labelClasses","firstHeader","bodyRows","footRows","rows","concat","th","headerCheckbox","firstCell","td","nodeName","toUpperCase","rowCheckbox","MaterialDatePicker","locales","format","weekStart","weekDays","weekDaysShort","weekDaysLetter","months","monthsShort","actions","cancel","ok","Event_","IS_ATTACHED","IS_FIXED","INLINE","FIXED","LANDSCAPE","BACKDROP","WIDGET","NAVIGATION","CALENDAR","YEAR","YEAR_SELECTED","YEAR_DISABLED","YEAR_PICKER","YEAR_PICKER_ELEMENT","MONTH","WEEKS","WEEK","WEEK_DAYS","DATE","DATE_TODAY","DATE_SELECTED","DATE_EMPTY","DATE_DISABLED","MONTH_CURRENT","MONTH_PREVIOUS","MONTH_NEXT","HEADER_YEAR","HEADER_DATE","CALENDAR_PREVIOUS","CALENDAR_NEXT","ACTIONS","ACTION_CANCEL","ACTION_OK","isInitialized_","currentDate_","selectedDate_","pickedDate_","minDate_","maxDate_","triggerEvent_","eventName","cancelHandler_","stopImmediatePropagation","close","setFullYear","getFullYear","setMonth","getMonth","setDate","getDate","updateHeader_","updateMonthTitle_","changeCurrentMonth_","okHandler_","Date","formatInputDate_","inputFocusHandler_","open","inputBlurHandler_","headerYearClickHandler_","widgetElement_","selectedYear","yearPickerElement_","focusYear","previousElementSibling","headerDateClickHandler_","pickYearHandler_","currentYear","currentYearInt","pickedDate","getTime","isInRange_","currentMonth_","pickDateHandler_","previousDate","calendarElement_","pickedDateInt","nextPickedDate","updateYearPicker_","previousMonthHandler_","previousMonth","nextMonthHandler_","nextMonth","dateObject","dateFormatted","formatFunction","selectedDate","addLeadingZero","number","substr","formatHeaderDate_","date","getDay","isToday_","currentDate","today","isPickedDate_","isInRange","isYearInRange_","year","currentMonthElement","renderMonth_","currentMonthElement_","dateButtons","dateButton","boundPickDateHandler","render_","renderHeader_","renderCalendar_","body","headerElement_","headerYearElement_","headerDateElement_","boundHeaderYearClickHandler","boundHeaderDateClickHandler","currentMonthTitleElement_","pickedYear","renderNavigation_","renderWeekDays_","renderYearPicker_","renderActions_","navigationElement_","previousIcon","nextIcon","boundPreviousMonthHandler","boundNextMonthHandler","weekDaysElement_","weekDay","monthObject","month","firstDay","lastDay","currentDay","currentDayInt","renderDays","week","yearButton","yearButtons","existingYear","boundPickYearHandler","startYear","endYear","actionsElement_","cancelElement_","okElement_","boundCancelActionHandler","boundOkActionHandler","destroy_","backdrop_","display","getSelectedDate","setSelectedDate","setRange","minDate","maxDate","setHours","setMinutes","setSeconds","setMilliseconds","Object","create","boundInputFocusHandler","boundInputBlurHandler","mdlDowngrade_","MaterialRipple","INITIAL_SCALE","INITIAL_SIZE","INITIAL_OPACITY","FINAL_OPACITY","FINAL_SCALE","RIPPLE_EFFECT_IGNORE_EVENTS","downHandler_","boundHeight","boundWidth","rippleSize_","Math","sqrt","ignoringMouseDown_","frameCount","getFrameCount","setFrameCount","x","bound","currentTarget","round","touches","setRippleXY","setRippleStyles","animFrameHandler","upHandler_","detail","recentering","frameCount_","x_","y_","boundDownHandler","boundUpHandler","fC","getRippleElement","newX","newY","transformString","scale","offset","webkitTransform","msTransform","transform"],"mappings":"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","file":"material.min.js","sourcesContent":[";(function() {\n\"use strict\";\n\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A component handler interface using the revealing module design pattern.\n * More details on this design pattern here:\n * https://github.com/jasonmayes/mdl-component-design-pattern\n *\n * @author Jason Mayes.\n */\n/* exported componentHandler */\n\n// Pre-defining the componentHandler interface, for closure documentation and\n// static verification.\nvar componentHandler = {\n  /**\n   * Searches existing DOM for elements of our component type and upgrades them\n   * if they have not already been upgraded.\n   *\n   * @param {string=} optJsClass the programatic name of the element class we\n   * need to create a new instance of.\n   * @param {string=} optCssClass the name of the CSS class elements of this\n   * type will have.\n   */\n  upgradeDom: function(optJsClass, optCssClass) {}, // eslint-disable-line\n  /**\n   * Upgrades a specific element rather than all in the DOM.\n   *\n   * @param {!Element} element The element we wish to upgrade.\n   * @param {string=} optJsClass Optional name of the class we want to upgrade\n   * the element to.\n   */\n  upgradeElement: function(element, optJsClass) {}, // eslint-disable-line\n  /**\n   * Upgrades a specific list of elements rather than all in the DOM.\n   *\n   * @param {!Element|!Array<!Element>|!NodeList|!HTMLCollection} elements\n   * The elements we wish to upgrade.\n   */\n  upgradeElements: function(elements) {}, // eslint-disable-line\n  /**\n   * Upgrades all registered components found in the current DOM. This is\n   * automatically called on window load.\n   */\n  upgradeAllRegistered: function() {},\n  /**\n   * Allows user to be alerted to any upgrades that are performed for a given\n   * component type\n   *\n   * @param {string} jsClass The class name of the MDL component we wish\n   * to hook into for any upgrades performed.\n   * @param {function(!HTMLElement)} callback The function to call upon an\n   * upgrade. This function should expect 1 parameter - the HTMLElement which\n   * got upgraded.\n   */\n  registerUpgradedCallback: function(jsClass, callback) {}, // eslint-disable-line\n  /**\n   * Registers a class for future use and attempts to upgrade existing DOM.\n   *\n   * @param {componentHandler.ComponentConfigPublic} config the registration configuration\n   */\n  register: function(config) {}, // eslint-disable-line\n  /**\n   * Downgrade either a given node, an array of nodes, or a NodeList.\n   *\n   * @param {!Node|!Array<!Node>|!NodeList} nodes The list of nodes.\n   */\n  downgradeElements: function(nodes) {} // eslint-disable-line\n};\n\ncomponentHandler = (function() {\n  'use strict';\n\n  /** @type {!Array<componentHandler.ComponentConfig>} */\n  var registeredComponents_ = [];\n\n  /** @type {!Array<componentHandler.Component>} */\n  var createdComponents_ = [];\n\n  var componentConfigProperty_ = 'mdlComponentConfigInternal_';\n\n  /**\n   * Searches registered components for a class we are interested in using.\n   * Optionally replaces a match with passed object if specified.\n   *\n   * @param {string} name The name of a class we want to use.\n   * @param {componentHandler.ComponentConfig=} optReplace Optional object to replace match with.\n   * @return {!Object|boolean} Registered components.\n   * @private\n   */\n  function findRegisteredClass_(name, optReplace) {\n    for (var i = 0; i < registeredComponents_.length; i++) {\n      if (registeredComponents_[i].className === name) {\n        if (typeof optReplace !== 'undefined') {\n          registeredComponents_[i] = optReplace;\n        }\n        return registeredComponents_[i];\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Returns an array of the classNames of the upgraded classes on the element.\n   *\n   * @param {!Element} element The element to fetch data from.\n   * @return {!Array<string>} Array of classNames.\n   * @private\n   */\n  function getUpgradedListOfElement_(element) {\n    var dataUpgraded = element.getAttribute('data-upgraded');\n    // Use `['']` as default value to conform the `,name,name...` style.\n    return dataUpgraded === null ? [''] : dataUpgraded.split(',');\n  }\n\n  /**\n   * Returns true if the given element has already been upgraded for the given\n   * class.\n   *\n   * @param {!Element} element The element we want to check.\n   * @param {string} jsClass The class to check for.\n   * @return {boolean} Whether the element is upgraded.\n   * @private\n   */\n  function isElementUpgraded_(element, jsClass) {\n    var upgradedList = getUpgradedListOfElement_(element);\n    return upgradedList.indexOf(jsClass) !== -1;\n  }\n\n  /**\n   * Searches existing DOM for elements of our component type and upgrades them\n   * if they have not already been upgraded.\n   *\n   * @param {string=} optJsClass the programatic name of the element class we\n   * need to create a new instance of.\n   * @param {string=} optCssClass the name of the CSS class elements of this\n   * type will have.\n   */\n  function upgradeDomInternal(optJsClass, optCssClass) {\n    if (typeof optJsClass === 'undefined' &&\n        typeof optCssClass === 'undefined') {\n      for (var i = 0; i < registeredComponents_.length; i++) {\n        upgradeDomInternal(registeredComponents_[i].className,\n            registeredComponents_[i].cssClass);\n      }\n    } else {\n      var jsClass = /** @type {string} */ (optJsClass);\n      if (typeof optCssClass === 'undefined') {\n        var registeredClass = findRegisteredClass_(jsClass);\n        if (registeredClass) {\n          optCssClass = registeredClass.cssClass;\n        }\n      }\n\n      var elements = document.querySelectorAll('.' + optCssClass);\n      for (var n = 0; n < elements.length; n++) {\n        upgradeElementInternal(elements[n], jsClass);\n      }\n    }\n  }\n\n  /**\n   * Upgrades a specific element rather than all in the DOM.\n   *\n   * @param {!Element} element The element we wish to upgrade.\n   * @param {string=} optJsClass Optional name of the class we want to upgrade\n   * the element to.\n   */\n  function upgradeElementInternal(element, optJsClass) {\n    // Verify argument type.\n    if (!(typeof element === 'object' && element instanceof Element)) {\n      throw new Error('Invalid argument provided to upgrade MDL element.');\n    }\n    var upgradedList = getUpgradedListOfElement_(element);\n    var classesToUpgrade = [];\n    // If jsClass is not provided scan the registered components to find the\n    // ones matching the element's CSS classList.\n    if (!optJsClass) {\n      var classList = element.classList;\n      registeredComponents_.forEach(function(component) {\n        // Match CSS & Not to be upgraded & Not upgraded.\n        if (classList.contains(component.cssClass) &&\n            classesToUpgrade.indexOf(component) === -1 &&\n            !isElementUpgraded_(element, component.className)) {\n          classesToUpgrade.push(component);\n        }\n      });\n    } else if (!isElementUpgraded_(element, optJsClass)) {\n      classesToUpgrade.push(findRegisteredClass_(optJsClass));\n    }\n\n    // Upgrade the element for each classes.\n    for (var i = 0, n = classesToUpgrade.length, registeredClass; i < n; i++) {\n      registeredClass = classesToUpgrade[i];\n      if (registeredClass) {\n        // Mark element as upgraded.\n        upgradedList.push(registeredClass.className);\n        element.setAttribute('data-upgraded', upgradedList.join(','));\n        var instance = new registeredClass.classConstructor(element); // eslint-disable-line\n        instance[componentConfigProperty_] = registeredClass;\n        createdComponents_.push(instance);\n        // Call any callbacks the user has registered with this component type.\n        for (var j = 0, m = registeredClass.callbacks.length; j < m; j++) {\n          registeredClass.callbacks[j](element);\n        }\n\n        if (registeredClass.widget) {\n          // Assign per element instance for control over API\n          element[registeredClass.className] = instance;\n        }\n      } else {\n        throw new Error(\n          'Unable to find a registered component for the given class.');\n      }\n\n      var ev;\n      if ('CustomEvent' in window && typeof window.CustomEvent === 'function') {\n        ev = new Event('mdl-componentupgraded', {\n          bubbles: true, cancelable: false\n        });\n      } else {\n        ev = document.createEvent('Events');\n        ev.initEvent('mdl-componentupgraded', true, true);\n      }\n      element.dispatchEvent(ev);\n    }\n  }\n\n  /**\n   * Upgrades a specific list of elements rather than all in the DOM.\n   *\n   * @param {!Element|!Array<!Element>|!NodeList|!HTMLCollection} elements\n   * The elements we wish to upgrade.\n   */\n  function upgradeElementsInternal(elements) {\n    if (!Array.isArray(elements)) {\n      if (typeof elements.item === 'function') {\n        elements = Array.prototype.slice.call(/** @type {Array} */ (elements));\n      } else {\n        elements = [elements];\n      }\n    }\n    for (var i = 0, n = elements.length, element; i < n; i++) {\n      element = elements[i];\n      if (element instanceof HTMLElement) {\n        upgradeElementInternal(element);\n        if (element.children.length > 0) {\n          upgradeElementsInternal(element.children);\n        }\n      }\n    }\n  }\n\n  /**\n   * Registers a class for future use and attempts to upgrade existing DOM.\n   *\n   * @param {componentHandler.ComponentConfigPublic} config The configuration.\n   */\n  function registerInternal(config) {\n    // In order to support both Closure-compiled and uncompiled code accessing\n    // this method, we need to allow for both the dot and array syntax for\n    // property access. You'll therefore see the `foo.bar || foo['bar']`\n    // pattern repeated across this method.\n    var widgetMissing = (typeof config.widget === 'undefined' &&\n        typeof config['widget'] === 'undefined');\n    var widget = true;\n\n    if (!widgetMissing) {\n      widget = config.widget || config['widget'];\n    }\n\n    var newConfig = /** @type {componentHandler.ComponentConfig} */ ({\n      classConstructor: config.constructor || config['constructor'],\n      className: config.classAsString || config['classAsString'],\n      cssClass: config.cssClass || config['cssClass'],\n      widget: widget,\n      callbacks: []\n    });\n\n    registeredComponents_.forEach(function(item) {\n      if (item.cssClass === newConfig.cssClass) {\n        throw new Error('The provided cssClass has already been registered: ' +\n            item.cssClass);\n      }\n      if (item.className === newConfig.className) {\n        throw new Error('The provided className has already been registered');\n      }\n    });\n\n    if (config.constructor.prototype\n        .hasOwnProperty(componentConfigProperty_)) {\n      throw new Error(\n          'MDL component classes must not have ' + componentConfigProperty_ +\n          ' defined as a property.');\n    }\n\n    var found = findRegisteredClass_(config.classAsString, newConfig);\n\n    if (!found) {\n      registeredComponents_.push(newConfig);\n    }\n  }\n\n  /**\n   * Allows user to be alerted to any upgrades that are performed for a given\n   * component type\n   *\n   * @param {string} jsClass The class name of the MDL component we wish\n   * to hook into for any upgrades performed.\n   * @param {function(!HTMLElement)} callback The function to call upon an\n   * upgrade. This function should expect 1 parameter - the HTMLElement which\n   * got upgraded.\n   */\n  function registerUpgradedCallbackInternal(jsClass, callback) {\n    var regClass = findRegisteredClass_(jsClass);\n    if (regClass) {\n      regClass.callbacks.push(callback);\n    }\n  }\n\n  /**\n   * Upgrades all registered components found in the current DOM. This is\n   * automatically called on window load.\n   */\n  function upgradeAllRegisteredInternal() {\n    for (var n = 0; n < registeredComponents_.length; n++) {\n      upgradeDomInternal(registeredComponents_[n].className);\n    }\n  }\n\n  /**\n   * Check the component for the downgrade method.\n   * Execute if found.\n   * Remove component from createdComponents list.\n   *\n   * @param {?componentHandler.Component} component The component to downgrade.\n   */\n  function deconstructComponentInternal(component) {\n    if (component) {\n      var componentIndex = createdComponents_.indexOf(component);\n      createdComponents_.splice(componentIndex, 1);\n\n      var upgrades =\n          component.element_.getAttribute('data-upgraded').split(',');\n      var componentPlace =\n          upgrades.indexOf(component[componentConfigProperty_].classAsString);\n      upgrades.splice(componentPlace, 1);\n      component.element_.setAttribute('data-upgraded', upgrades.join(','));\n\n      var ev;\n      if ('CustomEvent' in window && typeof window.CustomEvent === 'function') {\n        ev = new Event('mdl-componentdowngraded', {\n          bubbles: true, cancelable: false\n        });\n      } else {\n        ev = document.createEvent('Events');\n        ev.initEvent('mdl-componentdowngraded', true, true);\n      }\n    }\n  }\n\n  /**\n   * Downgrade either a given node, an array of nodes, or a NodeList.\n   *\n   * @param {!Node|!Array<!Node>|!NodeList} nodes The list of nodes.\n   */\n  function downgradeNodesInternal(nodes) {\n    /**\n     * Auxiliary function to downgrade a single node.\n     * @param  {!Node} node the node to be downgraded\n     */\n    var downgradeNode = function(node) {\n      createdComponents_.filter(function(item) {\n        return item.element_ === node;\n      }).forEach(deconstructComponentInternal);\n    };\n    if (nodes instanceof Array || nodes instanceof NodeList) {\n      for (var n = 0; n < nodes.length; n++) {\n        downgradeNode(nodes[n]);\n      }\n    } else if (nodes instanceof Node) {\n      downgradeNode(nodes);\n    } else {\n      throw new Error('Invalid argument provided to downgrade MDL nodes.');\n    }\n  }\n\n  // Now return the functions that should be made public with their publicly\n  // facing names...\n  return {\n    upgradeDom: upgradeDomInternal,\n    upgradeElement: upgradeElementInternal,\n    upgradeElements: upgradeElementsInternal,\n    upgradeAllRegistered: upgradeAllRegisteredInternal,\n    registerUpgradedCallback: registerUpgradedCallbackInternal,\n    register: registerInternal,\n    downgradeElements: downgradeNodesInternal\n  };\n})();\n\n/**\n * Describes the type of a registered component type managed by\n * componentHandler. Provided for benefit of the Closure compiler.\n *\n * @typedef {{\n *   constructor: Function,\n *   classAsString: string,\n *   cssClass: string,\n *   widget: (string|boolean|undefined)\n * }}\n */\ncomponentHandler.ComponentConfigPublic; // eslint-disable-line\n\n/**\n * Describes the type of a registered component type managed by\n * componentHandler. Provided for benefit of the Closure compiler.\n *\n * @typedef {{\n *   constructor: !Function,\n *   className: string,\n *   cssClass: string,\n *   widget: (string|boolean),\n *   callbacks: !Array<function(!HTMLElement)>\n * }}\n */\ncomponentHandler.ComponentConfig; // eslint-disable-line\n\n/**\n * Created component (i.e., upgraded element) type as managed by\n * componentHandler. Provided for benefit of the Closure compiler.\n *\n * @typedef {{\n *   element_: !HTMLElement,\n *   className: string,\n *   classAsString: string,\n *   cssClass: string,\n *   widget: string\n * }}\n */\ncomponentHandler.Component; // eslint-disable-line\n\n// Export all symbols, for the benefit of Closure compiler.\n// No effect on uncompiled code.\ncomponentHandler['upgradeDom'] = componentHandler.upgradeDom;\ncomponentHandler['upgradeElement'] = componentHandler.upgradeElement;\ncomponentHandler['upgradeElements'] = componentHandler.upgradeElements;\ncomponentHandler['upgradeAllRegistered'] =\n    componentHandler.upgradeAllRegistered;\ncomponentHandler['registerUpgradedCallback'] =\n    componentHandler.registerUpgradedCallback;\ncomponentHandler['register'] = componentHandler.register;\ncomponentHandler['downgradeElements'] = componentHandler.downgradeElements;\nwindow.componentHandler = componentHandler;\nwindow['componentHandler'] = componentHandler;\n\nwindow.addEventListener('load', function() {\n  'use strict';\n\n  /**\n   * Performs a \"Cutting the mustard\" test. If the browser supports the features\n   * tested, adds a mdl-js class to the <html> element. It then upgrades all MDL\n   * components requiring JavaScript.\n   */\n  if (\n      'classList' in document.documentElement &&\n      'querySelector' in document &&\n      'addEventListener' in window &&\n      'forEach' in Array.prototype) {\n    document.documentElement.classList.add('mdl-js');\n    componentHandler.upgradeAllRegistered();\n  } else {\n    /**\n     * Dummy function to avoid JS errors.\n     */\n    componentHandler.upgradeElement = function() {};\n    /**\n     * Dummy function to avoid JS errors.\n     */\n    componentHandler.register = function() {};\n  }\n});\n\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Button MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialButton = function MaterialButton(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialButton'] = MaterialButton;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialButton.prototype.Constant_ = {};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialButton.prototype.CssClasses_ = {\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_CONTAINER: 'mdl-button__ripple-container',\n    RIPPLE: 'mdl-ripple'\n};\n/**\n   * Handle blur of element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialButton.prototype.blurHandler_ = function (event) {\n    if (event) {\n        this.element_.blur();\n    }\n};\n// Public methods.\n/**\n   * Disable button.\n   *\n   * @public\n   */\nMaterialButton.prototype.disable = function () {\n    this.element_.disabled = true;\n};\nMaterialButton.prototype['disable'] = MaterialButton.prototype.disable;\n/**\n   * Enable button.\n   *\n   * @public\n   */\nMaterialButton.prototype.enable = function () {\n    this.element_.disabled = false;\n};\nMaterialButton.prototype['enable'] = MaterialButton.prototype.enable;\n/**\n   * Initialize element.\n   */\nMaterialButton.prototype.init = function () {\n    if (this.element_) {\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {\n            var rippleContainer = document.createElement('span');\n            rippleContainer.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\n            this.rippleElement_ = document.createElement('span');\n            this.rippleElement_.classList.add(this.CssClasses_.RIPPLE);\n            rippleContainer.appendChild(this.rippleElement_);\n            this.boundRippleBlurHandler = this.blurHandler_.bind(this);\n            this.rippleElement_.addEventListener('mouseup', this.boundRippleBlurHandler);\n            this.element_.appendChild(rippleContainer);\n        }\n        this.boundButtonBlurHandler = this.blurHandler_.bind(this);\n        this.element_.addEventListener('mouseup', this.boundButtonBlurHandler);\n        this.element_.addEventListener('mouseleave', this.boundButtonBlurHandler);\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialButton,\n    classAsString: 'MaterialButton',\n    cssClass: 'mdl-js-button',\n    widget: true\n});\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Checkbox MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialCheckbox = function MaterialCheckbox(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialCheckbox'] = MaterialCheckbox;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialCheckbox.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialCheckbox.prototype.CssClasses_ = {\n    INPUT: 'mdl-checkbox__input',\n    BOX_OUTLINE: 'mdl-checkbox__box-outline',\n    FOCUS_HELPER: 'mdl-checkbox__focus-helper',\n    TICK_OUTLINE: 'mdl-checkbox__tick-outline',\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE_CONTAINER: 'mdl-checkbox__ripple-container',\n    RIPPLE_CENTER: 'mdl-ripple--center',\n    RIPPLE: 'mdl-ripple',\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_CHECKED: 'is-checked',\n    IS_UPGRADED: 'is-upgraded'\n};\n/**\n   * Handle change of state.\n   *\n   * @private\n   */\nMaterialCheckbox.prototype.onChange_ = function () {\n    this.updateClasses_();\n};\n/**\n   * Handle focus of element.\n   *\n   * @private\n   */\nMaterialCheckbox.prototype.onFocus_ = function () {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle lost focus of element.\n   *\n   * @private\n   */\nMaterialCheckbox.prototype.onBlur_ = function () {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle mouseup.\n   *\n   * @private\n   */\nMaterialCheckbox.prototype.onMouseUp_ = function () {\n    this.blur_();\n};\n/**\n   * Handle class updates.\n   *\n   * @private\n   */\nMaterialCheckbox.prototype.updateClasses_ = function () {\n    this.checkDisabled();\n    this.checkToggleState();\n};\n/**\n   * Add blur.\n   *\n   * @private\n   */\nMaterialCheckbox.prototype.blur_ = function () {\n    // TODO: figure out why there's a focus event being fired after our blur,\n    // so that we can avoid this hack.\n    window.setTimeout(function () {\n        this.inputElement_.blur();\n    }.bind(this), this.Constant_.TINY_TIMEOUT);\n};\n// Public methods.\n/**\n   * Check the inputs toggle state and update display.\n   *\n   * @public\n   */\nMaterialCheckbox.prototype.checkToggleState = function () {\n    if (this.inputElement_.checked) {\n        this.element_.classList.add(this.CssClasses_.IS_CHECKED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);\n    }\n};\nMaterialCheckbox.prototype['checkToggleState'] = MaterialCheckbox.prototype.checkToggleState;\n/**\n   * Check the inputs disabled state and update display.\n   *\n   * @public\n   */\nMaterialCheckbox.prototype.checkDisabled = function () {\n    if (this.inputElement_.disabled) {\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n};\nMaterialCheckbox.prototype['checkDisabled'] = MaterialCheckbox.prototype.checkDisabled;\n/**\n   * Disable checkbox.\n   *\n   * @public\n   */\nMaterialCheckbox.prototype.disable = function () {\n    this.inputElement_.disabled = true;\n    this.updateClasses_();\n};\nMaterialCheckbox.prototype['disable'] = MaterialCheckbox.prototype.disable;\n/**\n   * Enable checkbox.\n   *\n   * @public\n   */\nMaterialCheckbox.prototype.enable = function () {\n    this.inputElement_.disabled = false;\n    this.updateClasses_();\n};\nMaterialCheckbox.prototype['enable'] = MaterialCheckbox.prototype.enable;\n/**\n   * Check checkbox.\n   *\n   * @public\n   */\nMaterialCheckbox.prototype.check = function () {\n    this.inputElement_.checked = true;\n    this.updateClasses_();\n};\nMaterialCheckbox.prototype['check'] = MaterialCheckbox.prototype.check;\n/**\n   * Uncheck checkbox.\n   *\n   * @public\n   */\nMaterialCheckbox.prototype.uncheck = function () {\n    this.inputElement_.checked = false;\n    this.updateClasses_();\n};\nMaterialCheckbox.prototype['uncheck'] = MaterialCheckbox.prototype.uncheck;\n/**\n   * Initialize element.\n   */\nMaterialCheckbox.prototype.init = function () {\n    if (this.element_) {\n        this.inputElement_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);\n        var boxOutline = document.createElement('span');\n        boxOutline.classList.add(this.CssClasses_.BOX_OUTLINE);\n        var tickContainer = document.createElement('span');\n        tickContainer.classList.add(this.CssClasses_.FOCUS_HELPER);\n        var tickOutline = document.createElement('span');\n        tickOutline.classList.add(this.CssClasses_.TICK_OUTLINE);\n        boxOutline.appendChild(tickOutline);\n        this.element_.appendChild(tickContainer);\n        this.element_.appendChild(boxOutline);\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\n            this.rippleContainerElement_ = document.createElement('span');\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_EFFECT);\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER);\n            this.boundRippleMouseUp = this.onMouseUp_.bind(this);\n            this.rippleContainerElement_.addEventListener('mouseup', this.boundRippleMouseUp);\n            var ripple = document.createElement('span');\n            ripple.classList.add(this.CssClasses_.RIPPLE);\n            this.rippleContainerElement_.appendChild(ripple);\n            this.element_.appendChild(this.rippleContainerElement_);\n        }\n        this.boundInputOnChange = this.onChange_.bind(this);\n        this.boundInputOnFocus = this.onFocus_.bind(this);\n        this.boundInputOnBlur = this.onBlur_.bind(this);\n        this.boundElementMouseUp = this.onMouseUp_.bind(this);\n        this.inputElement_.addEventListener('change', this.boundInputOnChange);\n        this.inputElement_.addEventListener('focus', this.boundInputOnFocus);\n        this.inputElement_.addEventListener('blur', this.boundInputOnBlur);\n        this.element_.addEventListener('mouseup', this.boundElementMouseUp);\n        this.updateClasses_();\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialCheckbox,\n    classAsString: 'MaterialCheckbox',\n    cssClass: 'mdl-js-checkbox',\n    widget: true\n});\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for icon toggle MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialIconToggle = function MaterialIconToggle(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialIconToggle'] = MaterialIconToggle;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialIconToggle.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialIconToggle.prototype.CssClasses_ = {\n    INPUT: 'mdl-icon-toggle__input',\n    JS_RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE_CONTAINER: 'mdl-icon-toggle__ripple-container',\n    RIPPLE_CENTER: 'mdl-ripple--center',\n    RIPPLE: 'mdl-ripple',\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_CHECKED: 'is-checked'\n};\n/**\n   * Handle change of state.\n   *\n   * @private\n   */\nMaterialIconToggle.prototype.onChange_ = function () {\n    this.updateClasses_();\n};\n/**\n   * Handle focus of element.\n   *\n   * @private\n   */\nMaterialIconToggle.prototype.onFocus_ = function () {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle lost focus of element.\n   *\n   * @private\n   */\nMaterialIconToggle.prototype.onBlur_ = function () {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle mouseup.\n   *\n   * @private\n   */\nMaterialIconToggle.prototype.onMouseUp_ = function () {\n    this.blur_();\n};\n/**\n   * Handle class updates.\n   *\n   * @private\n   */\nMaterialIconToggle.prototype.updateClasses_ = function () {\n    this.checkDisabled();\n    this.checkToggleState();\n};\n/**\n   * Add blur.\n   *\n   * @private\n   */\nMaterialIconToggle.prototype.blur_ = function () {\n    // TODO: figure out why there's a focus event being fired after our blur,\n    // so that we can avoid this hack.\n    window.setTimeout(function () {\n        this.inputElement_.blur();\n    }.bind(this), this.Constant_.TINY_TIMEOUT);\n};\n// Public methods.\n/**\n   * Check the inputs toggle state and update display.\n   *\n   * @public\n   */\nMaterialIconToggle.prototype.checkToggleState = function () {\n    if (this.inputElement_.checked) {\n        this.element_.classList.add(this.CssClasses_.IS_CHECKED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);\n    }\n};\nMaterialIconToggle.prototype['checkToggleState'] = MaterialIconToggle.prototype.checkToggleState;\n/**\n   * Check the inputs disabled state and update display.\n   *\n   * @public\n   */\nMaterialIconToggle.prototype.checkDisabled = function () {\n    if (this.inputElement_.disabled) {\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n};\nMaterialIconToggle.prototype['checkDisabled'] = MaterialIconToggle.prototype.checkDisabled;\n/**\n   * Disable icon toggle.\n   *\n   * @public\n   */\nMaterialIconToggle.prototype.disable = function () {\n    this.inputElement_.disabled = true;\n    this.updateClasses_();\n};\nMaterialIconToggle.prototype['disable'] = MaterialIconToggle.prototype.disable;\n/**\n   * Enable icon toggle.\n   *\n   * @public\n   */\nMaterialIconToggle.prototype.enable = function () {\n    this.inputElement_.disabled = false;\n    this.updateClasses_();\n};\nMaterialIconToggle.prototype['enable'] = MaterialIconToggle.prototype.enable;\n/**\n   * Check icon toggle.\n   *\n   * @public\n   */\nMaterialIconToggle.prototype.check = function () {\n    this.inputElement_.checked = true;\n    this.updateClasses_();\n};\nMaterialIconToggle.prototype['check'] = MaterialIconToggle.prototype.check;\n/**\n   * Uncheck icon toggle.\n   *\n   * @public\n   */\nMaterialIconToggle.prototype.uncheck = function () {\n    this.inputElement_.checked = false;\n    this.updateClasses_();\n};\nMaterialIconToggle.prototype['uncheck'] = MaterialIconToggle.prototype.uncheck;\n/**\n   * Initialize element.\n   */\nMaterialIconToggle.prototype.init = function () {\n    if (this.element_) {\n        this.inputElement_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);\n        if (this.element_.classList.contains(this.CssClasses_.JS_RIPPLE_EFFECT)) {\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\n            this.rippleContainerElement_ = document.createElement('span');\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\n            this.rippleContainerElement_.classList.add(this.CssClasses_.JS_RIPPLE_EFFECT);\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER);\n            this.boundRippleMouseUp = this.onMouseUp_.bind(this);\n            this.rippleContainerElement_.addEventListener('mouseup', this.boundRippleMouseUp);\n            var ripple = document.createElement('span');\n            ripple.classList.add(this.CssClasses_.RIPPLE);\n            this.rippleContainerElement_.appendChild(ripple);\n            this.element_.appendChild(this.rippleContainerElement_);\n        }\n        this.boundInputOnChange = this.onChange_.bind(this);\n        this.boundInputOnFocus = this.onFocus_.bind(this);\n        this.boundInputOnBlur = this.onBlur_.bind(this);\n        this.boundElementOnMouseUp = this.onMouseUp_.bind(this);\n        this.inputElement_.addEventListener('change', this.boundInputOnChange);\n        this.inputElement_.addEventListener('focus', this.boundInputOnFocus);\n        this.inputElement_.addEventListener('blur', this.boundInputOnBlur);\n        this.element_.addEventListener('mouseup', this.boundElementOnMouseUp);\n        this.updateClasses_();\n        this.element_.classList.add('is-upgraded');\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialIconToggle,\n    classAsString: 'MaterialIconToggle',\n    cssClass: 'mdl-js-icon-toggle',\n    widget: true\n});\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for dropdown MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialMenu = function MaterialMenu(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialMenu'] = MaterialMenu;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialMenu.prototype.Constant_ = {\n    // Total duration of the menu animation.\n    TRANSITION_DURATION_SECONDS: 0.3,\n    // The fraction of the total duration we want to use for menu item animations.\n    TRANSITION_DURATION_FRACTION: 0.8,\n    // How long the menu stays open after choosing an option (so the user can see\n    // the ripple).\n    CLOSE_TIMEOUT: 150\n};\n/**\n   * Keycodes, for code readability.\n   *\n   * @enum {number}\n   * @private\n   */\nMaterialMenu.prototype.Keycodes_ = {\n    ENTER: 13,\n    ESCAPE: 27,\n    SPACE: 32,\n    UP_ARROW: 38,\n    DOWN_ARROW: 40\n};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialMenu.prototype.CssClasses_ = {\n    CONTAINER: 'mdl-menu__container',\n    OUTLINE: 'mdl-menu__outline',\n    ITEM: 'mdl-menu__item',\n    ITEM_RIPPLE_CONTAINER: 'mdl-menu__item-ripple-container',\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE: 'mdl-ripple',\n    // Statuses\n    IS_UPGRADED: 'is-upgraded',\n    IS_VISIBLE: 'is-visible',\n    IS_ANIMATING: 'is-animating',\n    // Alignment options\n    BOTTOM_LEFT: 'mdl-menu--bottom-left',\n    // This is the default.\n    BOTTOM_RIGHT: 'mdl-menu--bottom-right',\n    TOP_LEFT: 'mdl-menu--top-left',\n    TOP_RIGHT: 'mdl-menu--top-right',\n    UNALIGNED: 'mdl-menu--unaligned'\n};\n/**\n   * Initialize element.\n   */\nMaterialMenu.prototype.init = function () {\n    if (this.element_) {\n        // Create container for the menu.\n        var container = document.createElement('div');\n        container.classList.add(this.CssClasses_.CONTAINER);\n        this.element_.parentElement.insertBefore(container, this.element_);\n        this.element_.parentElement.removeChild(this.element_);\n        container.appendChild(this.element_);\n        this.container_ = container;\n        // Create outline for the menu (shadow and background).\n        var outline = document.createElement('div');\n        outline.classList.add(this.CssClasses_.OUTLINE);\n        this.outline_ = outline;\n        container.insertBefore(outline, this.element_);\n        // Find the \"for\" element and bind events to it.\n        var forElId = this.element_.getAttribute('for') || this.element_.getAttribute('data-mdl-for');\n        var forEl = null;\n        if (forElId) {\n            forEl = document.getElementById(forElId);\n            if (forEl) {\n                this.forElement_ = forEl;\n                forEl.addEventListener('click', this.handleForClick_.bind(this));\n                forEl.addEventListener('keydown', this.handleForKeyboardEvent_.bind(this));\n            }\n        }\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM);\n        this.boundItemKeydown_ = this.handleItemKeyboardEvent_.bind(this);\n        this.boundItemClick_ = this.handleItemClick_.bind(this);\n        for (var i = 0; i < items.length; i++) {\n            // Add a listener to each menu item.\n            items[i].addEventListener('click', this.boundItemClick_);\n            // Add a tab index to each menu item.\n            items[i].tabIndex = '-1';\n            // Add a keyboard listener to each menu item.\n            items[i].addEventListener('keydown', this.boundItemKeydown_);\n        }\n        // Add ripple classes to each item, if the user has enabled ripples.\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\n            for (var j = 0; j < items.length; j++) {\n                var item = items[j];\n                var rippleContainer = document.createElement('span');\n                rippleContainer.classList.add(this.CssClasses_.ITEM_RIPPLE_CONTAINER);\n                var ripple = document.createElement('span');\n                ripple.classList.add(this.CssClasses_.RIPPLE);\n                rippleContainer.appendChild(ripple);\n                item.appendChild(rippleContainer);\n                item.classList.add(this.CssClasses_.RIPPLE_EFFECT);\n            }\n        }\n        // Copy alignment classes to the container, so the outline can use them.\n        if (this.element_.classList.contains(this.CssClasses_.BOTTOM_LEFT)) {\n            this.outline_.classList.add(this.CssClasses_.BOTTOM_LEFT);\n        }\n        if (this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)) {\n            this.outline_.classList.add(this.CssClasses_.BOTTOM_RIGHT);\n        }\n        if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT)) {\n            this.outline_.classList.add(this.CssClasses_.TOP_LEFT);\n        }\n        if (this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {\n            this.outline_.classList.add(this.CssClasses_.TOP_RIGHT);\n        }\n        if (this.element_.classList.contains(this.CssClasses_.UNALIGNED)) {\n            this.outline_.classList.add(this.CssClasses_.UNALIGNED);\n        }\n        container.classList.add(this.CssClasses_.IS_UPGRADED);\n    }\n};\n/**\n   * Handles a click on the \"for\" element, by positioning the menu and then\n   * toggling it.\n   *\n   * @param {Event} evt The event that fired.\n   * @private\n   */\nMaterialMenu.prototype.handleForClick_ = function (evt) {\n    if (this.element_ && this.forElement_) {\n        var rect = this.forElement_.getBoundingClientRect();\n        var forRect = this.forElement_.parentElement.getBoundingClientRect();\n        if (this.element_.classList.contains(this.CssClasses_.UNALIGNED)) {\n        } else if (this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)) {\n            // Position below the \"for\" element, aligned to its right.\n            this.container_.style.right = forRect.right - rect.right + 'px';\n            this.container_.style.top = this.forElement_.offsetTop + this.forElement_.offsetHeight + 'px';\n        } else if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT)) {\n            // Position above the \"for\" element, aligned to its left.\n            this.container_.style.left = this.forElement_.offsetLeft + 'px';\n            this.container_.style.bottom = forRect.bottom - rect.top + 'px';\n        } else if (this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {\n            // Position above the \"for\" element, aligned to its right.\n            this.container_.style.right = forRect.right - rect.right + 'px';\n            this.container_.style.bottom = forRect.bottom - rect.top + 'px';\n        } else {\n            // Default: position below the \"for\" element, aligned to its left.\n            this.container_.style.left = this.forElement_.offsetLeft + 'px';\n            this.container_.style.top = this.forElement_.offsetTop + this.forElement_.offsetHeight + 'px';\n        }\n    }\n    this.toggle(evt);\n};\n/**\n   * Handles a keyboard event on the \"for\" element.\n   *\n   * @param {Event} evt The event that fired.\n   * @private\n   */\nMaterialMenu.prototype.handleForKeyboardEvent_ = function (evt) {\n    if (this.element_ && this.container_ && this.forElement_) {\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM + ':not([disabled])');\n        if (items && items.length > 0 && this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)) {\n            if (evt.keyCode === this.Keycodes_.UP_ARROW) {\n                evt.preventDefault();\n                items[items.length - 1].focus();\n            } else if (evt.keyCode === this.Keycodes_.DOWN_ARROW) {\n                evt.preventDefault();\n                items[0].focus();\n            }\n        }\n    }\n};\n/**\n   * Handles a keyboard event on an item.\n   *\n   * @param {Event} evt The event that fired.\n   * @private\n   */\nMaterialMenu.prototype.handleItemKeyboardEvent_ = function (evt) {\n    if (this.element_ && this.container_) {\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM + ':not([disabled])');\n        if (items && items.length > 0 && this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)) {\n            var currentIndex = Array.prototype.slice.call(items).indexOf(evt.target);\n            if (evt.keyCode === this.Keycodes_.UP_ARROW) {\n                evt.preventDefault();\n                if (currentIndex > 0) {\n                    items[currentIndex - 1].focus();\n                } else {\n                    items[items.length - 1].focus();\n                }\n            } else if (evt.keyCode === this.Keycodes_.DOWN_ARROW) {\n                evt.preventDefault();\n                if (items.length > currentIndex + 1) {\n                    items[currentIndex + 1].focus();\n                } else {\n                    items[0].focus();\n                }\n            } else if (evt.keyCode === this.Keycodes_.SPACE || evt.keyCode === this.Keycodes_.ENTER) {\n                evt.preventDefault();\n                // Send mousedown and mouseup to trigger ripple.\n                var e = new MouseEvent('mousedown');\n                evt.target.dispatchEvent(e);\n                e = new MouseEvent('mouseup');\n                evt.target.dispatchEvent(e);\n                // Send click.\n                evt.target.click();\n            } else if (evt.keyCode === this.Keycodes_.ESCAPE) {\n                evt.preventDefault();\n                this.hide();\n            }\n        }\n    }\n};\n/**\n   * Handles a click event on an item.\n   *\n   * @param {Event} evt The event that fired.\n   * @private\n   */\nMaterialMenu.prototype.handleItemClick_ = function (evt) {\n    if (evt.target.hasAttribute('disabled')) {\n        evt.stopPropagation();\n    } else {\n        // Wait some time before closing menu, so the user can see the ripple.\n        this.closing_ = true;\n        window.setTimeout(function () {\n            this.hide();\n            this.closing_ = false;\n        }.bind(this), this.Constant_.CLOSE_TIMEOUT);\n    }\n};\n/**\n   * Calculates the initial clip (for opening the menu) or final clip (for closing\n   * it), and applies it. This allows us to animate from or to the correct point,\n   * that is, the point it's aligned to in the \"for\" element.\n   *\n   * @param {number} height Height of the clip rectangle\n   * @param {number} width Width of the clip rectangle\n   * @private\n   */\nMaterialMenu.prototype.applyClip_ = function (height, width) {\n    if (this.element_.classList.contains(this.CssClasses_.UNALIGNED)) {\n        // Do not clip.\n        this.element_.style.clip = '';\n    } else if (this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)) {\n        // Clip to the top right corner of the menu.\n        this.element_.style.clip = 'rect(0 ' + width + 'px 0 ' + width + 'px)';\n    } else if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT)) {\n        // Clip to the bottom left corner of the menu.\n        this.element_.style.clip = 'rect(' + height + 'px 0 ' + height + 'px 0)';\n    } else if (this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {\n        // Clip to the bottom right corner of the menu.\n        this.element_.style.clip = 'rect(' + height + 'px ' + width + 'px ' + height + 'px ' + width + 'px)';\n    } else {\n        // Default: do not clip (same as clipping to the top left corner).\n        this.element_.style.clip = '';\n    }\n};\n/**\n   * Cleanup function to remove animation listeners.\n   *\n   * @param {Event} evt The event being handled.\n   * @private\n   */\nMaterialMenu.prototype.removeAnimationEndListener_ = function (evt) {\n    evt.target.classList.remove(MaterialMenu.prototype.CssClasses_.IS_ANIMATING);\n};\n/**\n   * Adds an event listener to clean up after the animation ends.\n   *\n   * @private\n   */\nMaterialMenu.prototype.addAnimationEndListener_ = function () {\n    this.element_.addEventListener('transitionend', this.removeAnimationEndListener_);\n    this.element_.addEventListener('webkitTransitionEnd', this.removeAnimationEndListener_);\n};\n/**\n   * Displays the menu.\n   *\n   * @param {Event} evt The event being handled.\n   * @public\n   */\nMaterialMenu.prototype.show = function (evt) {\n    if (this.element_ && this.container_ && this.outline_) {\n        // Measure the inner element.\n        var height = this.element_.getBoundingClientRect().height;\n        var width = this.element_.getBoundingClientRect().width;\n        // Apply the inner element's size to the container and outline.\n        this.container_.style.width = width + 'px';\n        this.container_.style.height = height + 'px';\n        this.outline_.style.width = width + 'px';\n        this.outline_.style.height = height + 'px';\n        var transitionDuration = this.Constant_.TRANSITION_DURATION_SECONDS * this.Constant_.TRANSITION_DURATION_FRACTION;\n        // Calculate transition delays for individual menu items, so that they fade\n        // in one at a time.\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM);\n        for (var i = 0; i < items.length; i++) {\n            var itemDelay = null;\n            if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT) || this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {\n                itemDelay = (height - items[i].offsetTop - items[i].offsetHeight) / height * transitionDuration + 's';\n            } else {\n                itemDelay = items[i].offsetTop / height * transitionDuration + 's';\n            }\n            items[i].style.transitionDelay = itemDelay;\n        }\n        // Apply the initial clip to the text before we start animating.\n        this.applyClip_(height, width);\n        // Wait for the next frame, turn on animation, and apply the final clip.\n        // Also make it visible. This triggers the transitions.\n        requestAnimationFrame(function () {\n            this.element_.classList.add(this.CssClasses_.IS_ANIMATING);\n            this.element_.style.clip = 'rect(0 ' + width + 'px ' + height + 'px 0)';\n            this.container_.classList.add(this.CssClasses_.IS_VISIBLE);\n        }.bind(this));\n        // Clean up after the animation is complete.\n        this.addAnimationEndListener_();\n        // Add a click listener to the document, to close the menu.\n        var callback = function (e) {\n            // Check to see if the document is processing the same event that\n            // displayed the menu in the first place. If so, do nothing.\n            // Also check to see if the menu is in the process of closing itself, and\n            // do nothing in that case.\n            // Also check if the clicked element is a menu item\n            // if so, do nothing.\n            if (e !== evt && !this.closing_ && e.target.parentNode !== this.element_) {\n                document.removeEventListener('click', callback);\n                this.hide();\n            }\n        }.bind(this);\n        document.addEventListener('click', callback);\n    }\n};\nMaterialMenu.prototype['show'] = MaterialMenu.prototype.show;\n/**\n   * Hides the menu.\n   *\n   * @public\n   */\nMaterialMenu.prototype.hide = function () {\n    if (this.element_ && this.container_ && this.outline_) {\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM);\n        // Remove all transition delays; menu items fade out concurrently.\n        for (var i = 0; i < items.length; i++) {\n            items[i].style.removeProperty('transition-delay');\n        }\n        // Measure the inner element.\n        var rect = this.element_.getBoundingClientRect();\n        var height = rect.height;\n        var width = rect.width;\n        // Turn on animation, and apply the final clip. Also make invisible.\n        // This triggers the transitions.\n        this.element_.classList.add(this.CssClasses_.IS_ANIMATING);\n        this.applyClip_(height, width);\n        this.container_.classList.remove(this.CssClasses_.IS_VISIBLE);\n        // Clean up after the animation is complete.\n        this.addAnimationEndListener_();\n    }\n};\nMaterialMenu.prototype['hide'] = MaterialMenu.prototype.hide;\n/**\n   * Displays or hides the menu, depending on current state.\n   *\n   * @param {Event} evt The event being handled.\n   * @public\n   */\nMaterialMenu.prototype.toggle = function (evt) {\n    if (this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)) {\n        this.hide();\n    } else {\n        this.show(evt);\n    }\n};\nMaterialMenu.prototype['toggle'] = MaterialMenu.prototype.toggle;\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialMenu,\n    classAsString: 'MaterialMenu',\n    cssClass: 'mdl-js-menu',\n    widget: true\n});\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Progress MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialProgress = function MaterialProgress(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialProgress'] = MaterialProgress;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialProgress.prototype.Constant_ = {};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialProgress.prototype.CssClasses_ = { INDETERMINATE_CLASS: 'mdl-progress__indeterminate' };\n/**\n   * Set the current progress of the progressbar.\n   *\n   * @param {number} p Percentage of the progress (0-100)\n   * @public\n   */\nMaterialProgress.prototype.setProgress = function (p) {\n    if (this.element_.classList.contains(this.CssClasses_.INDETERMINATE_CLASS)) {\n        return;\n    }\n    this.progressbar_.style.width = p + '%';\n};\nMaterialProgress.prototype['setProgress'] = MaterialProgress.prototype.setProgress;\n/**\n   * Set the current progress of the buffer.\n   *\n   * @param {number} p Percentage of the buffer (0-100)\n   * @public\n   */\nMaterialProgress.prototype.setBuffer = function (p) {\n    this.bufferbar_.style.width = p + '%';\n    this.auxbar_.style.width = 100 - p + '%';\n};\nMaterialProgress.prototype['setBuffer'] = MaterialProgress.prototype.setBuffer;\n/**\n   * Initialize element.\n   */\nMaterialProgress.prototype.init = function () {\n    if (this.element_) {\n        var el = document.createElement('div');\n        el.className = 'progressbar bar bar1';\n        this.element_.appendChild(el);\n        this.progressbar_ = el;\n        el = document.createElement('div');\n        el.className = 'bufferbar bar bar2';\n        this.element_.appendChild(el);\n        this.bufferbar_ = el;\n        el = document.createElement('div');\n        el.className = 'auxbar bar bar3';\n        this.element_.appendChild(el);\n        this.auxbar_ = el;\n        this.progressbar_.style.width = '0%';\n        this.bufferbar_.style.width = '100%';\n        this.auxbar_.style.width = '0%';\n        this.element_.classList.add('is-upgraded');\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialProgress,\n    classAsString: 'MaterialProgress',\n    cssClass: 'mdl-js-progress',\n    widget: true\n});\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Radio MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialRadio = function MaterialRadio(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialRadio'] = MaterialRadio;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialRadio.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialRadio.prototype.CssClasses_ = {\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_CHECKED: 'is-checked',\n    IS_UPGRADED: 'is-upgraded',\n    JS_RADIO: 'mdl-js-radio',\n    RADIO_BTN: 'mdl-radio__button',\n    RADIO_OUTER_CIRCLE: 'mdl-radio__outer-circle',\n    RADIO_INNER_CIRCLE: 'mdl-radio__inner-circle',\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE_CONTAINER: 'mdl-radio__ripple-container',\n    RIPPLE_CENTER: 'mdl-ripple--center',\n    RIPPLE: 'mdl-ripple'\n};\n/**\n   * Handle change of state.\n   *\n   * @private\n   */\nMaterialRadio.prototype.onChange_ = function () {\n    // Since other radio buttons don't get change events, we need to look for\n    // them to update their classes.\n    var radios = document.getElementsByClassName(this.CssClasses_.JS_RADIO);\n    for (var i = 0; i < radios.length; i++) {\n        var button = radios[i].querySelector('.' + this.CssClasses_.RADIO_BTN);\n        // Different name == different group, so no point updating those.\n        if (button.getAttribute('name') === this.btnElement_.getAttribute('name')) {\n            radios[i]['MaterialRadio'].updateClasses_();\n        }\n    }\n};\n/**\n   * Handle focus.\n   *\n   * @private\n   */\nMaterialRadio.prototype.onFocus_ = function () {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle lost focus.\n   *\n   * @private\n   */\nMaterialRadio.prototype.onBlur_ = function () {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle mouseup.\n   *\n   * @private\n   */\nMaterialRadio.prototype.onMouseup_ = function () {\n    this.blur_();\n};\n/**\n   * Update classes.\n   *\n   * @private\n   */\nMaterialRadio.prototype.updateClasses_ = function () {\n    this.checkDisabled();\n    this.checkToggleState();\n};\n/**\n   * Add blur.\n   *\n   * @private\n   */\nMaterialRadio.prototype.blur_ = function () {\n    // TODO: figure out why there's a focus event being fired after our blur,\n    // so that we can avoid this hack.\n    window.setTimeout(function () {\n        this.btnElement_.blur();\n    }.bind(this), this.Constant_.TINY_TIMEOUT);\n};\n// Public methods.\n/**\n   * Check the components disabled state.\n   *\n   * @public\n   */\nMaterialRadio.prototype.checkDisabled = function () {\n    if (this.btnElement_.disabled) {\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n};\nMaterialRadio.prototype['checkDisabled'] = MaterialRadio.prototype.checkDisabled;\n/**\n   * Check the components toggled state.\n   *\n   * @public\n   */\nMaterialRadio.prototype.checkToggleState = function () {\n    if (this.btnElement_.checked) {\n        this.element_.classList.add(this.CssClasses_.IS_CHECKED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);\n    }\n};\nMaterialRadio.prototype['checkToggleState'] = MaterialRadio.prototype.checkToggleState;\n/**\n   * Disable radio.\n   *\n   * @public\n   */\nMaterialRadio.prototype.disable = function () {\n    this.btnElement_.disabled = true;\n    this.updateClasses_();\n};\nMaterialRadio.prototype['disable'] = MaterialRadio.prototype.disable;\n/**\n   * Enable radio.\n   *\n   * @public\n   */\nMaterialRadio.prototype.enable = function () {\n    this.btnElement_.disabled = false;\n    this.updateClasses_();\n};\nMaterialRadio.prototype['enable'] = MaterialRadio.prototype.enable;\n/**\n   * Check radio.\n   *\n   * @public\n   */\nMaterialRadio.prototype.check = function () {\n    this.btnElement_.checked = true;\n    this.updateClasses_();\n};\nMaterialRadio.prototype['check'] = MaterialRadio.prototype.check;\n/**\n   * Uncheck radio.\n   *\n   * @public\n   */\nMaterialRadio.prototype.uncheck = function () {\n    this.btnElement_.checked = false;\n    this.updateClasses_();\n};\nMaterialRadio.prototype['uncheck'] = MaterialRadio.prototype.uncheck;\n/**\n   * Initialize element.\n   */\nMaterialRadio.prototype.init = function () {\n    if (this.element_) {\n        this.btnElement_ = this.element_.querySelector('.' + this.CssClasses_.RADIO_BTN);\n        this.boundChangeHandler_ = this.onChange_.bind(this);\n        this.boundFocusHandler_ = this.onChange_.bind(this);\n        this.boundBlurHandler_ = this.onBlur_.bind(this);\n        this.boundMouseUpHandler_ = this.onMouseup_.bind(this);\n        var outerCircle = document.createElement('span');\n        outerCircle.classList.add(this.CssClasses_.RADIO_OUTER_CIRCLE);\n        var innerCircle = document.createElement('span');\n        innerCircle.classList.add(this.CssClasses_.RADIO_INNER_CIRCLE);\n        this.element_.appendChild(outerCircle);\n        this.element_.appendChild(innerCircle);\n        var rippleContainer;\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\n            rippleContainer = document.createElement('span');\n            rippleContainer.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\n            rippleContainer.classList.add(this.CssClasses_.RIPPLE_EFFECT);\n            rippleContainer.classList.add(this.CssClasses_.RIPPLE_CENTER);\n            rippleContainer.addEventListener('mouseup', this.boundMouseUpHandler_);\n            var ripple = document.createElement('span');\n            ripple.classList.add(this.CssClasses_.RIPPLE);\n            rippleContainer.appendChild(ripple);\n            this.element_.appendChild(rippleContainer);\n        }\n        this.btnElement_.addEventListener('change', this.boundChangeHandler_);\n        this.btnElement_.addEventListener('focus', this.boundFocusHandler_);\n        this.btnElement_.addEventListener('blur', this.boundBlurHandler_);\n        this.element_.addEventListener('mouseup', this.boundMouseUpHandler_);\n        this.updateClasses_();\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialRadio,\n    classAsString: 'MaterialRadio',\n    cssClass: 'mdl-js-radio',\n    widget: true\n});\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Slider MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialSlider = function MaterialSlider(element) {\n    this.element_ = element;\n    // Browser feature detection.\n    this.isIE_ = window.navigator.msPointerEnabled;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialSlider'] = MaterialSlider;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialSlider.prototype.Constant_ = {};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialSlider.prototype.CssClasses_ = {\n    IE_CONTAINER: 'mdl-slider__ie-container',\n    SLIDER_CONTAINER: 'mdl-slider__container',\n    BACKGROUND_FLEX: 'mdl-slider__background-flex',\n    BACKGROUND_LOWER: 'mdl-slider__background-lower',\n    BACKGROUND_UPPER: 'mdl-slider__background-upper',\n    IS_LOWEST_VALUE: 'is-lowest-value',\n    IS_UPGRADED: 'is-upgraded'\n};\n/**\n   * Handle input on element.\n   *\n   * @private\n   */\nMaterialSlider.prototype.onInput_ = function () {\n    this.updateValueStyles_();\n};\n/**\n   * Handle change on element.\n   *\n   * @private\n   */\nMaterialSlider.prototype.onChange_ = function () {\n    this.updateValueStyles_();\n};\n/**\n   * Handle mouseup on element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialSlider.prototype.onMouseUp_ = function (event) {\n    event.target.blur();\n};\n/**\n   * Handle mousedown on container element.\n   * This handler is purpose is to not require the use to click\n   * exactly on the 2px slider element, as FireFox seems to be very\n   * strict about this.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   * @suppress {missingProperties}\n   */\nMaterialSlider.prototype.onContainerMouseDown_ = function (event) {\n    // If this click is not on the parent element (but rather some child)\n    // ignore. It may still bubble up.\n    if (event.target !== this.element_.parentElement) {\n        return;\n    }\n    // Discard the original event and create a new event that\n    // is on the slider element.\n    event.preventDefault();\n    var newEvent = new MouseEvent('mousedown', {\n        target: event.target,\n        buttons: event.buttons,\n        clientX: event.clientX,\n        clientY: this.element_.getBoundingClientRect().y\n    });\n    this.element_.dispatchEvent(newEvent);\n};\n/**\n   * Handle updating of values.\n   *\n   * @private\n   */\nMaterialSlider.prototype.updateValueStyles_ = function () {\n    // Calculate and apply percentages to div structure behind slider.\n    var fraction = (this.element_.value - this.element_.min) / (this.element_.max - this.element_.min);\n    if (fraction === 0) {\n        this.element_.classList.add(this.CssClasses_.IS_LOWEST_VALUE);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_LOWEST_VALUE);\n    }\n    if (!this.isIE_) {\n        this.backgroundLower_.style.flex = fraction;\n        this.backgroundLower_.style.webkitFlex = fraction;\n        this.backgroundUpper_.style.flex = 1 - fraction;\n        this.backgroundUpper_.style.webkitFlex = 1 - fraction;\n    }\n};\n// Public methods.\n/**\n   * Disable slider.\n   *\n   * @public\n   */\nMaterialSlider.prototype.disable = function () {\n    this.element_.disabled = true;\n};\nMaterialSlider.prototype['disable'] = MaterialSlider.prototype.disable;\n/**\n   * Enable slider.\n   *\n   * @public\n   */\nMaterialSlider.prototype.enable = function () {\n    this.element_.disabled = false;\n};\nMaterialSlider.prototype['enable'] = MaterialSlider.prototype.enable;\n/**\n   * Update slider value.\n   *\n   * @param {number} value The value to which to set the control (optional).\n   * @public\n   */\nMaterialSlider.prototype.change = function (value) {\n    if (typeof value !== 'undefined') {\n        this.element_.value = value;\n    }\n    this.updateValueStyles_();\n};\nMaterialSlider.prototype['change'] = MaterialSlider.prototype.change;\n/**\n   * Initialize element.\n   */\nMaterialSlider.prototype.init = function () {\n    if (this.element_) {\n        if (this.isIE_) {\n            // Since we need to specify a very large height in IE due to\n            // implementation limitations, we add a parent here that trims it down to\n            // a reasonable size.\n            var containerIE = document.createElement('div');\n            containerIE.classList.add(this.CssClasses_.IE_CONTAINER);\n            this.element_.parentElement.insertBefore(containerIE, this.element_);\n            this.element_.parentElement.removeChild(this.element_);\n            containerIE.appendChild(this.element_);\n        } else {\n            // For non-IE browsers, we need a div structure that sits behind the\n            // slider and allows us to style the left and right sides of it with\n            // different colors.\n            var container = document.createElement('div');\n            container.classList.add(this.CssClasses_.SLIDER_CONTAINER);\n            this.element_.parentElement.insertBefore(container, this.element_);\n            this.element_.parentElement.removeChild(this.element_);\n            container.appendChild(this.element_);\n            var backgroundFlex = document.createElement('div');\n            backgroundFlex.classList.add(this.CssClasses_.BACKGROUND_FLEX);\n            container.appendChild(backgroundFlex);\n            this.backgroundLower_ = document.createElement('div');\n            this.backgroundLower_.classList.add(this.CssClasses_.BACKGROUND_LOWER);\n            backgroundFlex.appendChild(this.backgroundLower_);\n            this.backgroundUpper_ = document.createElement('div');\n            this.backgroundUpper_.classList.add(this.CssClasses_.BACKGROUND_UPPER);\n            backgroundFlex.appendChild(this.backgroundUpper_);\n        }\n        this.boundInputHandler = this.onInput_.bind(this);\n        this.boundChangeHandler = this.onChange_.bind(this);\n        this.boundMouseUpHandler = this.onMouseUp_.bind(this);\n        this.boundContainerMouseDownHandler = this.onContainerMouseDown_.bind(this);\n        this.element_.addEventListener('input', this.boundInputHandler);\n        this.element_.addEventListener('change', this.boundChangeHandler);\n        this.element_.addEventListener('mouseup', this.boundMouseUpHandler);\n        this.element_.parentElement.addEventListener('mousedown', this.boundContainerMouseDownHandler);\n        this.updateValueStyles_();\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialSlider,\n    classAsString: 'MaterialSlider',\n    cssClass: 'mdl-js-slider',\n    widget: true\n});\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Snackbar MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialSnackbar = function MaterialSnackbar(element) {\n    this.element_ = element;\n    this.textElement_ = this.element_.querySelector('.' + this.cssClasses_.MESSAGE);\n    this.actionElement_ = this.element_.querySelector('.' + this.cssClasses_.ACTION);\n    if (!this.textElement_) {\n        throw new Error('There must be a message element for a snackbar.');\n    }\n    if (!this.actionElement_) {\n        throw new Error('There must be an action element for a snackbar.');\n    }\n    this.active = false;\n    this.actionHandler_ = undefined;\n    this.message_ = undefined;\n    this.actionText_ = undefined;\n    this.queuedNotifications_ = [];\n    this.setActionHidden_(true);\n};\nwindow['MaterialSnackbar'] = MaterialSnackbar;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialSnackbar.prototype.Constant_ = {\n    // The duration of the snackbar show/hide animation, in ms.\n    ANIMATION_LENGTH: 250\n};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialSnackbar.prototype.cssClasses_ = {\n    SNACKBAR: 'mdl-snackbar',\n    MESSAGE: 'mdl-snackbar__text',\n    ACTION: 'mdl-snackbar__action',\n    ACTIVE: 'mdl-snackbar--active'\n};\n/**\n   * Display the snackbar.\n   *\n   * @private\n   */\nMaterialSnackbar.prototype.displaySnackbar_ = function () {\n    this.element_.setAttribute('aria-hidden', 'true');\n    if (this.actionHandler_) {\n        this.actionElement_.textContent = this.actionText_;\n        this.actionElement_.addEventListener('click', this.actionHandler_);\n        this.setActionHidden_(false);\n    }\n    this.textElement_.textContent = this.message_;\n    this.element_.classList.add(this.cssClasses_.ACTIVE);\n    this.element_.setAttribute('aria-hidden', 'false');\n    setTimeout(this.cleanup_.bind(this), this.timeout_);\n};\n/**\n   * Show the snackbar.\n   *\n   * @param {Object} data The data for the notification.\n   * @public\n   */\nMaterialSnackbar.prototype.showSnackbar = function (data) {\n    if (data === undefined) {\n        throw new Error('Please provide a data object with at least a message to display.');\n    }\n    if (data['message'] === undefined) {\n        throw new Error('Please provide a message to be displayed.');\n    }\n    if (data['actionHandler'] && !data['actionText']) {\n        throw new Error('Please provide action text with the handler.');\n    }\n    if (this.active) {\n        this.queuedNotifications_.push(data);\n    } else {\n        this.active = true;\n        this.message_ = data['message'];\n        if (data['timeout']) {\n            this.timeout_ = data['timeout'];\n        } else {\n            this.timeout_ = 2750;\n        }\n        if (data['actionHandler']) {\n            this.actionHandler_ = data['actionHandler'];\n        }\n        if (data['actionText']) {\n            this.actionText_ = data['actionText'];\n        }\n        this.displaySnackbar_();\n    }\n};\nMaterialSnackbar.prototype['showSnackbar'] = MaterialSnackbar.prototype.showSnackbar;\n/**\n   * Check if the queue has items within it.\n   * If it does, display the next entry.\n   *\n   * @private\n   */\nMaterialSnackbar.prototype.checkQueue_ = function () {\n    if (this.queuedNotifications_.length > 0) {\n        this.showSnackbar(this.queuedNotifications_.shift());\n    }\n};\n/**\n   * Cleanup the snackbar event listeners and accessiblity attributes.\n   *\n   * @private\n   */\nMaterialSnackbar.prototype.cleanup_ = function () {\n    this.element_.classList.remove(this.cssClasses_.ACTIVE);\n    setTimeout(function () {\n        this.element_.setAttribute('aria-hidden', 'true');\n        this.textElement_.textContent = '';\n        if (!this.actionElement_.getAttribute('aria-hidden')) {\n            this.setActionHidden_(true);\n            this.actionElement_.textContent = '';\n            this.actionElement_.removeEventListener('click', this.actionHandler_);\n        }\n        this.actionHandler_ = undefined;\n        this.message_ = undefined;\n        this.actionText_ = undefined;\n        this.active = false;\n        this.checkQueue_();\n    }.bind(this), this.Constant_.ANIMATION_LENGTH);\n};\n/**\n   * Set the action handler hidden state.\n   *\n   * @param {boolean} value Whether or not to set to 'hidden'.\n   * @private\n   */\nMaterialSnackbar.prototype.setActionHidden_ = function (value) {\n    if (value) {\n        this.actionElement_.setAttribute('aria-hidden', 'true');\n    } else {\n        this.actionElement_.removeAttribute('aria-hidden');\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialSnackbar,\n    classAsString: 'MaterialSnackbar',\n    cssClass: 'mdl-js-snackbar',\n    widget: true\n});\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Spinner MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   * @constructor\n   */\nvar MaterialSpinner = function MaterialSpinner(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialSpinner'] = MaterialSpinner;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialSpinner.prototype.Constant_ = { MDL_SPINNER_LAYER_COUNT: 4 };\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialSpinner.prototype.CssClasses_ = {\n    MDL_SPINNER_LAYER: 'mdl-spinner__layer',\n    MDL_SPINNER_CIRCLE_CLIPPER: 'mdl-spinner__circle-clipper',\n    MDL_SPINNER_CIRCLE: 'mdl-spinner__circle',\n    MDL_SPINNER_GAP_PATCH: 'mdl-spinner__gap-patch',\n    MDL_SPINNER_LEFT: 'mdl-spinner__left',\n    MDL_SPINNER_RIGHT: 'mdl-spinner__right'\n};\n/**\n   * Auxiliary method to create a spinner layer.\n   *\n   * @param {number} index Index of the layer to be created.\n   * @public\n   */\nMaterialSpinner.prototype.createLayer = function (index) {\n    var layer = document.createElement('div');\n    layer.classList.add(this.CssClasses_.MDL_SPINNER_LAYER);\n    layer.classList.add(this.CssClasses_.MDL_SPINNER_LAYER + '-' + index);\n    var leftClipper = document.createElement('div');\n    leftClipper.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER);\n    leftClipper.classList.add(this.CssClasses_.MDL_SPINNER_LEFT);\n    var gapPatch = document.createElement('div');\n    gapPatch.classList.add(this.CssClasses_.MDL_SPINNER_GAP_PATCH);\n    var rightClipper = document.createElement('div');\n    rightClipper.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER);\n    rightClipper.classList.add(this.CssClasses_.MDL_SPINNER_RIGHT);\n    var circleOwners = [\n        leftClipper,\n        gapPatch,\n        rightClipper\n    ];\n    for (var i = 0; i < circleOwners.length; i++) {\n        var circle = document.createElement('div');\n        circle.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE);\n        circleOwners[i].appendChild(circle);\n    }\n    layer.appendChild(leftClipper);\n    layer.appendChild(gapPatch);\n    layer.appendChild(rightClipper);\n    this.element_.appendChild(layer);\n};\nMaterialSpinner.prototype['createLayer'] = MaterialSpinner.prototype.createLayer;\n/**\n   * Stops the spinner animation.\n   * Public method for users who need to stop the spinner for any reason.\n   *\n   * @public\n   */\nMaterialSpinner.prototype.stop = function () {\n    this.element_.classList.remove('is-active');\n};\nMaterialSpinner.prototype['stop'] = MaterialSpinner.prototype.stop;\n/**\n   * Starts the spinner animation.\n   * Public method for users who need to manually start the spinner for any reason\n   * (instead of just adding the 'is-active' class to their markup).\n   *\n   * @public\n   */\nMaterialSpinner.prototype.start = function () {\n    this.element_.classList.add('is-active');\n};\nMaterialSpinner.prototype['start'] = MaterialSpinner.prototype.start;\n/**\n   * Initialize element.\n   */\nMaterialSpinner.prototype.init = function () {\n    if (this.element_) {\n        for (var i = 1; i <= this.Constant_.MDL_SPINNER_LAYER_COUNT; i++) {\n            this.createLayer(i);\n        }\n        this.element_.classList.add('is-upgraded');\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialSpinner,\n    classAsString: 'MaterialSpinner',\n    cssClass: 'mdl-js-spinner',\n    widget: true\n});\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Checkbox MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialSwitch = function MaterialSwitch(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialSwitch'] = MaterialSwitch;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialSwitch.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialSwitch.prototype.CssClasses_ = {\n    INPUT: 'mdl-switch__input',\n    TRACK: 'mdl-switch__track',\n    THUMB: 'mdl-switch__thumb',\n    FOCUS_HELPER: 'mdl-switch__focus-helper',\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE_CONTAINER: 'mdl-switch__ripple-container',\n    RIPPLE_CENTER: 'mdl-ripple--center',\n    RIPPLE: 'mdl-ripple',\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_CHECKED: 'is-checked'\n};\n/**\n   * Handle change of state.\n   *\n   * @private\n   */\nMaterialSwitch.prototype.onChange_ = function () {\n    this.updateClasses_();\n};\n/**\n   * Handle focus of element.\n   *\n   * @private\n   */\nMaterialSwitch.prototype.onFocus_ = function () {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle lost focus of element.\n   *\n   * @private\n   */\nMaterialSwitch.prototype.onBlur_ = function () {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle mouseup.\n   *\n   * @private\n   */\nMaterialSwitch.prototype.onMouseUp_ = function () {\n    this.blur_();\n};\n/**\n   * Handle class updates.\n   *\n   * @private\n   */\nMaterialSwitch.prototype.updateClasses_ = function () {\n    this.checkDisabled();\n    this.checkToggleState();\n};\n/**\n   * Add blur.\n   *\n   * @private\n   */\nMaterialSwitch.prototype.blur_ = function () {\n    // TODO: figure out why there's a focus event being fired after our blur,\n    // so that we can avoid this hack.\n    window.setTimeout(function () {\n        this.inputElement_.blur();\n    }.bind(this), this.Constant_.TINY_TIMEOUT);\n};\n// Public methods.\n/**\n   * Check the components disabled state.\n   *\n   * @public\n   */\nMaterialSwitch.prototype.checkDisabled = function () {\n    if (this.inputElement_.disabled) {\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n};\nMaterialSwitch.prototype['checkDisabled'] = MaterialSwitch.prototype.checkDisabled;\n/**\n   * Check the components toggled state.\n   *\n   * @public\n   */\nMaterialSwitch.prototype.checkToggleState = function () {\n    if (this.inputElement_.checked) {\n        this.element_.classList.add(this.CssClasses_.IS_CHECKED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);\n    }\n};\nMaterialSwitch.prototype['checkToggleState'] = MaterialSwitch.prototype.checkToggleState;\n/**\n   * Disable switch.\n   *\n   * @public\n   */\nMaterialSwitch.prototype.disable = function () {\n    this.inputElement_.disabled = true;\n    this.updateClasses_();\n};\nMaterialSwitch.prototype['disable'] = MaterialSwitch.prototype.disable;\n/**\n   * Enable switch.\n   *\n   * @public\n   */\nMaterialSwitch.prototype.enable = function () {\n    this.inputElement_.disabled = false;\n    this.updateClasses_();\n};\nMaterialSwitch.prototype['enable'] = MaterialSwitch.prototype.enable;\n/**\n   * Activate switch.\n   *\n   * @public\n   */\nMaterialSwitch.prototype.on = function () {\n    this.inputElement_.checked = true;\n    this.updateClasses_();\n};\nMaterialSwitch.prototype['on'] = MaterialSwitch.prototype.on;\n/**\n   * Deactivate switch.\n   *\n   * @public\n   */\nMaterialSwitch.prototype.off = function () {\n    this.inputElement_.checked = false;\n    this.updateClasses_();\n};\nMaterialSwitch.prototype['off'] = MaterialSwitch.prototype.off;\n/**\n   * Initialize element.\n   */\nMaterialSwitch.prototype.init = function () {\n    if (this.element_) {\n        this.inputElement_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);\n        var track = document.createElement('div');\n        track.classList.add(this.CssClasses_.TRACK);\n        var thumb = document.createElement('div');\n        thumb.classList.add(this.CssClasses_.THUMB);\n        var focusHelper = document.createElement('span');\n        focusHelper.classList.add(this.CssClasses_.FOCUS_HELPER);\n        thumb.appendChild(focusHelper);\n        this.element_.appendChild(track);\n        this.element_.appendChild(thumb);\n        this.boundMouseUpHandler = this.onMouseUp_.bind(this);\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\n            this.rippleContainerElement_ = document.createElement('span');\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_EFFECT);\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER);\n            this.rippleContainerElement_.addEventListener('mouseup', this.boundMouseUpHandler);\n            var ripple = document.createElement('span');\n            ripple.classList.add(this.CssClasses_.RIPPLE);\n            this.rippleContainerElement_.appendChild(ripple);\n            this.element_.appendChild(this.rippleContainerElement_);\n        }\n        this.boundChangeHandler = this.onChange_.bind(this);\n        this.boundFocusHandler = this.onFocus_.bind(this);\n        this.boundBlurHandler = this.onBlur_.bind(this);\n        this.inputElement_.addEventListener('change', this.boundChangeHandler);\n        this.inputElement_.addEventListener('focus', this.boundFocusHandler);\n        this.inputElement_.addEventListener('blur', this.boundBlurHandler);\n        this.element_.addEventListener('mouseup', this.boundMouseUpHandler);\n        this.updateClasses_();\n        this.element_.classList.add('is-upgraded');\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialSwitch,\n    classAsString: 'MaterialSwitch',\n    cssClass: 'mdl-js-switch',\n    widget: true\n});\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Tabs MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {Element} element The element that will be upgraded.\n   */\nvar MaterialTabs = function MaterialTabs(element) {\n    // Stores the HTML element.\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialTabs'] = MaterialTabs;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialTabs.prototype.Constant_ = {};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialTabs.prototype.CssClasses_ = {\n    TAB_CLASS: 'mdl-tabs__tab',\n    PANEL_CLASS: 'mdl-tabs__panel',\n    ACTIVE_CLASS: 'is-active',\n    UPGRADED_CLASS: 'is-upgraded',\n    MDL_JS_RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    MDL_RIPPLE_CONTAINER: 'mdl-tabs__ripple-container',\n    MDL_RIPPLE: 'mdl-ripple',\n    MDL_JS_RIPPLE_EFFECT_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events'\n};\n/**\n   * Handle clicks to a tabs component\n   *\n   * @private\n   */\nMaterialTabs.prototype.initTabs_ = function () {\n    if (this.element_.classList.contains(this.CssClasses_.MDL_JS_RIPPLE_EFFECT)) {\n        this.element_.classList.add(this.CssClasses_.MDL_JS_RIPPLE_EFFECT_IGNORE_EVENTS);\n    }\n    // Select element tabs, document panels\n    this.tabs_ = this.element_.querySelectorAll('.' + this.CssClasses_.TAB_CLASS);\n    this.panels_ = this.element_.querySelectorAll('.' + this.CssClasses_.PANEL_CLASS);\n    // Create new tabs for each tab element\n    for (var i = 0; i < this.tabs_.length; i++) {\n        new MaterialTab(this.tabs_[i], this);\n    }\n    this.element_.classList.add(this.CssClasses_.UPGRADED_CLASS);\n};\n/**\n   * Reset tab state, dropping active classes\n   *\n   * @private\n   */\nMaterialTabs.prototype.resetTabState_ = function () {\n    for (var k = 0; k < this.tabs_.length; k++) {\n        this.tabs_[k].classList.remove(this.CssClasses_.ACTIVE_CLASS);\n    }\n};\n/**\n   * Reset panel state, droping active classes\n   *\n   * @private\n   */\nMaterialTabs.prototype.resetPanelState_ = function () {\n    for (var j = 0; j < this.panels_.length; j++) {\n        this.panels_[j].classList.remove(this.CssClasses_.ACTIVE_CLASS);\n    }\n};\n/**\n   * Initialize element.\n   */\nMaterialTabs.prototype.init = function () {\n    if (this.element_) {\n        this.initTabs_();\n    }\n};\n/**\n   * Constructor for an individual tab.\n   *\n   * @constructor\n   * @param {Element} tab The HTML element for the tab.\n   * @param {MaterialTabs} ctx The MaterialTabs object that owns the tab.\n   */\nfunction MaterialTab(tab, ctx) {\n    if (tab) {\n        if (ctx.element_.classList.contains(ctx.CssClasses_.MDL_JS_RIPPLE_EFFECT)) {\n            var rippleContainer = document.createElement('span');\n            rippleContainer.classList.add(ctx.CssClasses_.MDL_RIPPLE_CONTAINER);\n            rippleContainer.classList.add(ctx.CssClasses_.MDL_JS_RIPPLE_EFFECT);\n            var ripple = document.createElement('span');\n            ripple.classList.add(ctx.CssClasses_.MDL_RIPPLE);\n            rippleContainer.appendChild(ripple);\n            tab.appendChild(rippleContainer);\n        }\n        tab.addEventListener('click', function (e) {\n            e.preventDefault();\n            var href = tab.href.split('#')[1];\n            var panel = ctx.element_.querySelector('#' + href);\n            ctx.resetTabState_();\n            ctx.resetPanelState_();\n            tab.classList.add(ctx.CssClasses_.ACTIVE_CLASS);\n            panel.classList.add(ctx.CssClasses_.ACTIVE_CLASS);\n        });\n    }\n}\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialTabs,\n    classAsString: 'MaterialTabs',\n    cssClass: 'mdl-js-tabs'\n});\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Textfield MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialTextfield = function MaterialTextfield(element) {\n    this.element_ = element;\n    this.maxRows = this.Constant_.NO_MAX_ROWS;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialTextfield'] = MaterialTextfield;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialTextfield.prototype.Constant_ = {\n    NO_MAX_ROWS: -1,\n    MAX_ROWS_ATTRIBUTE: 'maxrows'\n};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialTextfield.prototype.CssClasses_ = {\n    LABEL: 'mdl-textfield__label',\n    INPUT: 'mdl-textfield__input',\n    IS_DIRTY: 'is-dirty',\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_INVALID: 'is-invalid',\n    IS_UPGRADED: 'is-upgraded',\n    HAS_PLACEHOLDER: 'has-placeholder'\n};\n/**\n   * Handle input being entered.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialTextfield.prototype.onKeyDown_ = function (event) {\n    var currentRowCount = event.target.value.split('\\n').length;\n    if (event.keyCode === 13) {\n        if (currentRowCount >= this.maxRows) {\n            event.preventDefault();\n        }\n    }\n};\n/**\n   * Handle focus.\n   *\n   * @private\n   */\nMaterialTextfield.prototype.onFocus_ = function () {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle lost focus.\n   *\n   * @private\n   */\nMaterialTextfield.prototype.onBlur_ = function () {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle reset event from out side.\n   *\n   * @private\n   */\nMaterialTextfield.prototype.onReset_ = function () {\n    this.updateClasses_();\n};\n/**\n   * Handle class updates.\n   *\n   * @private\n   */\nMaterialTextfield.prototype.updateClasses_ = function () {\n    this.checkDisabled();\n    this.checkValidity();\n    this.checkDirty();\n    this.checkFocus();\n};\n// Public methods.\n/**\n   * Check the disabled state and update field accordingly.\n   *\n   * @public\n   */\nMaterialTextfield.prototype.checkDisabled = function () {\n    if (this.input_.disabled) {\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n};\nMaterialTextfield.prototype['checkDisabled'] = MaterialTextfield.prototype.checkDisabled;\n/**\n  * Check the focus state and update field accordingly.\n  *\n  * @public\n  */\nMaterialTextfield.prototype.checkFocus = function () {\n    if (this.element_.querySelector(':focus')) {\n        this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n    }\n};\nMaterialTextfield.prototype['checkFocus'] = MaterialTextfield.prototype.checkFocus;\n/**\n   * Check the validity state and update field accordingly.\n   *\n   * @public\n   */\nMaterialTextfield.prototype.checkValidity = function () {\n    if (this.input_.validity) {\n        if (this.input_.validity.valid) {\n            this.element_.classList.remove(this.CssClasses_.IS_INVALID);\n        } else {\n            this.element_.classList.add(this.CssClasses_.IS_INVALID);\n        }\n    }\n};\nMaterialTextfield.prototype['checkValidity'] = MaterialTextfield.prototype.checkValidity;\n/**\n   * Check the dirty state and update field accordingly.\n   *\n   * @public\n   */\nMaterialTextfield.prototype.checkDirty = function () {\n    if (this.input_.value && this.input_.value.length > 0) {\n        this.element_.classList.add(this.CssClasses_.IS_DIRTY);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_DIRTY);\n    }\n};\nMaterialTextfield.prototype['checkDirty'] = MaterialTextfield.prototype.checkDirty;\n/**\n   * Disable text field.\n   *\n   * @public\n   */\nMaterialTextfield.prototype.disable = function () {\n    this.input_.disabled = true;\n    this.updateClasses_();\n};\nMaterialTextfield.prototype['disable'] = MaterialTextfield.prototype.disable;\n/**\n   * Enable text field.\n   *\n   * @public\n   */\nMaterialTextfield.prototype.enable = function () {\n    this.input_.disabled = false;\n    this.updateClasses_();\n};\nMaterialTextfield.prototype['enable'] = MaterialTextfield.prototype.enable;\n/**\n   * Update text field value.\n   *\n   * @param {string} value The value to which to set the control (optional).\n   * @public\n   */\nMaterialTextfield.prototype.change = function (value) {\n    this.input_.value = value || '';\n    this.updateClasses_();\n};\nMaterialTextfield.prototype['change'] = MaterialTextfield.prototype.change;\n/**\n   * Focus text field.\n   *\n   * @public\n   */\nMaterialTextfield.prototype.focus = function () {\n    this.input_.focus();\n    this.updateClasses_();\n};\nMaterialTextfield.prototype['focus'] = MaterialTextfield.prototype.focus;\n/**\n   * Blur text field.\n   *\n   * @public\n   */\nMaterialTextfield.prototype.blur = function () {\n    this.input_.blur();\n    this.updateClasses_();\n};\nMaterialTextfield.prototype['blur'] = MaterialTextfield.prototype.blur;\n/**\n   * Initialize element.\n   */\nMaterialTextfield.prototype.init = function () {\n    if (this.element_) {\n        this.label_ = this.element_.querySelector('.' + this.CssClasses_.LABEL);\n        this.input_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);\n        if (this.input_) {\n            if (this.input_.hasAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE)) {\n                this.maxRows = parseInt(this.input_.getAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE), 10);\n                if (isNaN(this.maxRows)) {\n                    this.maxRows = this.Constant_.NO_MAX_ROWS;\n                }\n            }\n            if (this.input_.hasAttribute('placeholder')) {\n                this.element_.classList.add(this.CssClasses_.HAS_PLACEHOLDER);\n            }\n            this.boundUpdateClassesHandler = this.updateClasses_.bind(this);\n            this.boundFocusHandler = this.onFocus_.bind(this);\n            this.boundBlurHandler = this.onBlur_.bind(this);\n            this.boundResetHandler = this.onReset_.bind(this);\n            this.input_.addEventListener('input', this.boundUpdateClassesHandler);\n            this.input_.addEventListener('focus', this.boundFocusHandler);\n            this.input_.addEventListener('blur', this.boundBlurHandler);\n            this.input_.addEventListener('reset', this.boundResetHandler);\n            if (this.maxRows !== this.Constant_.NO_MAX_ROWS) {\n                // TODO: This should handle pasting multi line text.\n                // Currently doesn't.\n                this.boundKeyDownHandler = this.onKeyDown_.bind(this);\n                this.input_.addEventListener('keydown', this.boundKeyDownHandler);\n            }\n            var invalid = this.element_.classList.contains(this.CssClasses_.IS_INVALID);\n            this.updateClasses_();\n            this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n            if (invalid) {\n                this.element_.classList.add(this.CssClasses_.IS_INVALID);\n            }\n            if (this.input_.hasAttribute('autofocus')) {\n                this.element_.focus();\n                this.checkFocus();\n            }\n        }\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialTextfield,\n    classAsString: 'MaterialTextfield',\n    cssClass: 'mdl-js-textfield',\n    widget: true\n});\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Tooltip MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialTooltip = function MaterialTooltip(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialTooltip'] = MaterialTooltip;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialTooltip.prototype.Constant_ = {};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialTooltip.prototype.CssClasses_ = {\n    IS_ACTIVE: 'is-active',\n    BOTTOM: 'mdl-tooltip--bottom',\n    LEFT: 'mdl-tooltip--left',\n    RIGHT: 'mdl-tooltip--right',\n    TOP: 'mdl-tooltip--top'\n};\n/**\n   * Handle mouseenter for tooltip.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialTooltip.prototype.handleMouseEnter_ = function (event) {\n    var props = event.target.getBoundingClientRect();\n    var left = props.left + props.width / 2;\n    var top = props.top + props.height / 2;\n    var marginLeft = -1 * (this.element_.offsetWidth / 2);\n    var marginTop = -1 * (this.element_.offsetHeight / 2);\n    if (this.element_.classList.contains(this.CssClasses_.LEFT) || this.element_.classList.contains(this.CssClasses_.RIGHT)) {\n        left = props.width / 2;\n        if (top + marginTop < 0) {\n            this.element_.style.top = 0;\n            this.element_.style.marginTop = 0;\n        } else {\n            this.element_.style.top = top + 'px';\n            this.element_.style.marginTop = marginTop + 'px';\n        }\n    } else if (left + marginLeft < 0) {\n        this.element_.style.left = 0;\n        this.element_.style.marginLeft = 0;\n    } else {\n        this.element_.style.left = left + 'px';\n        this.element_.style.marginLeft = marginLeft + 'px';\n    }\n    if (this.element_.classList.contains(this.CssClasses_.TOP)) {\n        this.element_.style.top = props.top - this.element_.offsetHeight - 10 + 'px';\n    } else if (this.element_.classList.contains(this.CssClasses_.RIGHT)) {\n        this.element_.style.left = props.left + props.width + 10 + 'px';\n    } else if (this.element_.classList.contains(this.CssClasses_.LEFT)) {\n        this.element_.style.left = props.left - this.element_.offsetWidth - 10 + 'px';\n    } else {\n        this.element_.style.top = props.top + props.height + 10 + 'px';\n    }\n    this.element_.classList.add(this.CssClasses_.IS_ACTIVE);\n};\n/**\n   * Handle mouseleave for tooltip.\n   *\n   * @private\n   */\nMaterialTooltip.prototype.handleMouseLeave_ = function () {\n    this.element_.classList.remove(this.CssClasses_.IS_ACTIVE);\n};\n/**\n   * Initialize element.\n   */\nMaterialTooltip.prototype.init = function () {\n    if (this.element_) {\n        var forElId = this.element_.getAttribute('for');\n        if (forElId) {\n            this.forElement_ = document.getElementById(forElId);\n        }\n        if (this.forElement_) {\n            // It's left here because it prevents accidental text selection on Android\n            if (!this.forElement_.hasAttribute('tabindex')) {\n                this.forElement_.setAttribute('tabindex', '0');\n            }\n            this.boundMouseEnterHandler = this.handleMouseEnter_.bind(this);\n            this.boundMouseLeaveHandler = this.handleMouseLeave_.bind(this);\n            this.forElement_.addEventListener('mouseenter', this.boundMouseEnterHandler, false);\n            this.forElement_.addEventListener('touchend', this.boundMouseEnterHandler, false);\n            this.forElement_.addEventListener('mouseleave', this.boundMouseLeaveHandler, false);\n            window.addEventListener('touchstart', this.boundMouseLeaveHandler);\n        }\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialTooltip,\n    classAsString: 'MaterialTooltip',\n    cssClass: 'mdl-tooltip'\n});\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Layout MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialLayout = function MaterialLayout(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialLayout'] = MaterialLayout;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialLayout.prototype.Constant_ = {\n    MAX_WIDTH: '(max-width: 1024px)',\n    TAB_SCROLL_PIXELS: 100,\n    RESIZE_TIMEOUT: 100,\n    MENU_ICON: '&#xE5D2;',\n    CHEVRON_LEFT: 'chevron_left',\n    CHEVRON_RIGHT: 'chevron_right'\n};\n/**\n   * Keycodes, for code readability.\n   *\n   * @enum {number}\n   * @private\n   */\nMaterialLayout.prototype.Keycodes_ = {\n    ENTER: 13,\n    ESCAPE: 27,\n    SPACE: 32\n};\n/**\n   * Modes.\n   *\n   * @enum {number}\n   * @private\n   */\nMaterialLayout.prototype.Mode_ = {\n    STANDARD: 0,\n    SEAMED: 1,\n    WATERFALL: 2,\n    SCROLL: 3\n};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialLayout.prototype.CssClasses_ = {\n    CONTAINER: 'mdl-layout__container',\n    HEADER: 'mdl-layout__header',\n    DRAWER: 'mdl-layout__drawer',\n    CONTENT: 'mdl-layout__content',\n    DRAWER_BTN: 'mdl-layout__drawer-button',\n    ICON: 'material-icons',\n    JS_RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_CONTAINER: 'mdl-layout__tab-ripple-container',\n    RIPPLE: 'mdl-ripple',\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    HEADER_SEAMED: 'mdl-layout__header--seamed',\n    HEADER_WATERFALL: 'mdl-layout__header--waterfall',\n    HEADER_SCROLL: 'mdl-layout__header--scroll',\n    FIXED_HEADER: 'mdl-layout--fixed-header',\n    OBFUSCATOR: 'mdl-layout__obfuscator',\n    TAB_BAR: 'mdl-layout__tab-bar',\n    TAB_CONTAINER: 'mdl-layout__tab-bar-container',\n    TAB: 'mdl-layout__tab',\n    TAB_BAR_BUTTON: 'mdl-layout__tab-bar-button',\n    TAB_BAR_LEFT_BUTTON: 'mdl-layout__tab-bar-left-button',\n    TAB_BAR_RIGHT_BUTTON: 'mdl-layout__tab-bar-right-button',\n    PANEL: 'mdl-layout__tab-panel',\n    HAS_DRAWER: 'has-drawer',\n    HAS_TABS: 'has-tabs',\n    HAS_SCROLLING_HEADER: 'has-scrolling-header',\n    CASTING_SHADOW: 'is-casting-shadow',\n    IS_COMPACT: 'is-compact',\n    IS_SMALL_SCREEN: 'is-small-screen',\n    IS_DRAWER_OPEN: 'is-visible',\n    IS_ACTIVE: 'is-active',\n    IS_UPGRADED: 'is-upgraded',\n    IS_ANIMATING: 'is-animating',\n    ON_LARGE_SCREEN: 'mdl-layout--large-screen-only',\n    ON_SMALL_SCREEN: 'mdl-layout--small-screen-only'\n};\n/**\n   * Handles scrolling on the content.\n   *\n   * @private\n   */\nMaterialLayout.prototype.contentScrollHandler_ = function () {\n    if (this.header_.classList.contains(this.CssClasses_.IS_ANIMATING)) {\n        return;\n    }\n    var headerVisible = !this.element_.classList.contains(this.CssClasses_.IS_SMALL_SCREEN) || this.element_.classList.contains(this.CssClasses_.FIXED_HEADER);\n    if (this.content_.scrollTop > 0 && !this.header_.classList.contains(this.CssClasses_.IS_COMPACT)) {\n        this.header_.classList.add(this.CssClasses_.CASTING_SHADOW);\n        this.header_.classList.add(this.CssClasses_.IS_COMPACT);\n        if (headerVisible) {\n            this.header_.classList.add(this.CssClasses_.IS_ANIMATING);\n        }\n    } else if (this.content_.scrollTop <= 0 && this.header_.classList.contains(this.CssClasses_.IS_COMPACT)) {\n        this.header_.classList.remove(this.CssClasses_.CASTING_SHADOW);\n        this.header_.classList.remove(this.CssClasses_.IS_COMPACT);\n        if (headerVisible) {\n            this.header_.classList.add(this.CssClasses_.IS_ANIMATING);\n        }\n    }\n};\n/**\n   * Handles a keyboard event on the drawer.\n   *\n   * @param {Event} evt The event that fired.\n   * @private\n   */\nMaterialLayout.prototype.keyboardEventHandler_ = function (evt) {\n    // Only react when the drawer is open.\n    if (evt.keyCode === this.Keycodes_.ESCAPE && this.drawer_.classList.contains(this.CssClasses_.IS_DRAWER_OPEN)) {\n        this.toggleDrawer();\n    }\n};\n/**\n   * Handles changes in screen size.\n   *\n   * @private\n   */\nMaterialLayout.prototype.screenSizeHandler_ = function () {\n    if (this.screenSizeMediaQuery_.matches) {\n        this.element_.classList.add(this.CssClasses_.IS_SMALL_SCREEN);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_SMALL_SCREEN);\n        // Collapse drawer (if any) when moving to a large screen size.\n        if (this.drawer_) {\n            this.drawer_.classList.remove(this.CssClasses_.IS_DRAWER_OPEN);\n            this.obfuscator_.classList.remove(this.CssClasses_.IS_DRAWER_OPEN);\n        }\n    }\n};\n/**\n   * Handles events of drawer button.\n   *\n   * @param {Event} evt The event that fired.\n   * @private\n   */\nMaterialLayout.prototype.drawerToggleHandler_ = function (evt) {\n    if (evt && evt.type === 'keydown') {\n        if (evt.keyCode === this.Keycodes_.SPACE || evt.keyCode === this.Keycodes_.ENTER) {\n            // prevent scrolling in drawer nav\n            evt.preventDefault();\n        } else {\n            // prevent other keys\n            return;\n        }\n    }\n    this.toggleDrawer();\n};\n/**\n   * Handles (un)setting the `is-animating` class\n   *\n   * @private\n   */\nMaterialLayout.prototype.headerTransitionEndHandler_ = function () {\n    this.header_.classList.remove(this.CssClasses_.IS_ANIMATING);\n};\n/**\n   * Handles expanding the header on click\n   *\n   * @private\n   */\nMaterialLayout.prototype.headerClickHandler_ = function () {\n    if (this.header_.classList.contains(this.CssClasses_.IS_COMPACT)) {\n        this.header_.classList.remove(this.CssClasses_.IS_COMPACT);\n        this.header_.classList.add(this.CssClasses_.IS_ANIMATING);\n    }\n};\n/**\n   * Reset tab state, dropping active classes\n   *\n   * @param {NodeList} tabs The tabs to reset.\n   * @private\n   */\nMaterialLayout.prototype.resetTabState_ = function (tabs) {\n    for (var k = 0; k < tabs.length; k++) {\n        tabs[k].classList.remove(this.CssClasses_.IS_ACTIVE);\n    }\n};\n/**\n   * Reset panel state, droping active classes\n   *\n   * @param {NodeList} panels The panels to reset.\n   * @private\n   */\nMaterialLayout.prototype.resetPanelState_ = function (panels) {\n    for (var j = 0; j < panels.length; j++) {\n        panels[j].classList.remove(this.CssClasses_.IS_ACTIVE);\n    }\n};\n/**\n  * Toggle drawer state\n  *\n  * @public\n  */\nMaterialLayout.prototype.toggleDrawer = function () {\n    var drawerButton = this.element_.querySelector('.' + this.CssClasses_.DRAWER_BTN);\n    this.drawer_.classList.toggle(this.CssClasses_.IS_DRAWER_OPEN);\n    this.obfuscator_.classList.toggle(this.CssClasses_.IS_DRAWER_OPEN);\n    // Set accessibility properties.\n    if (this.drawer_.classList.contains(this.CssClasses_.IS_DRAWER_OPEN)) {\n        this.drawer_.setAttribute('aria-hidden', 'false');\n        drawerButton.setAttribute('aria-expanded', 'true');\n    } else {\n        this.drawer_.setAttribute('aria-hidden', 'true');\n        drawerButton.setAttribute('aria-expanded', 'false');\n    }\n};\nMaterialLayout.prototype['toggleDrawer'] = MaterialLayout.prototype.toggleDrawer;\n/**\n   * Initialize element.\n   */\nMaterialLayout.prototype.init = function () {\n    if (this.element_) {\n        var container = document.createElement('div');\n        container.classList.add(this.CssClasses_.CONTAINER);\n        var focusedElement = this.element_.querySelector(':focus');\n        this.element_.parentElement.insertBefore(container, this.element_);\n        this.element_.parentElement.removeChild(this.element_);\n        container.appendChild(this.element_);\n        if (focusedElement) {\n            focusedElement.focus();\n        }\n        var directChildren = this.element_.childNodes;\n        var numChildren = directChildren.length;\n        for (var c = 0; c < numChildren; c++) {\n            var child = directChildren[c];\n            if (child.classList && child.classList.contains(this.CssClasses_.HEADER)) {\n                this.header_ = child;\n            }\n            if (child.classList && child.classList.contains(this.CssClasses_.DRAWER)) {\n                this.drawer_ = child;\n            }\n            if (child.classList && child.classList.contains(this.CssClasses_.CONTENT)) {\n                this.content_ = child;\n            }\n        }\n        window.addEventListener('pageshow', function (e) {\n            if (e.persisted) {\n                // when page is loaded from back/forward cache\n                // trigger repaint to let layout scroll in safari\n                this.element_.style.overflowY = 'hidden';\n                requestAnimationFrame(function () {\n                    this.element_.style.overflowY = '';\n                }.bind(this));\n            }\n        }.bind(this), false);\n        if (this.header_) {\n            this.tabBar_ = this.header_.querySelector('.' + this.CssClasses_.TAB_BAR);\n        }\n        var mode = this.Mode_.STANDARD;\n        if (this.header_) {\n            if (this.header_.classList.contains(this.CssClasses_.HEADER_SEAMED)) {\n                mode = this.Mode_.SEAMED;\n            } else if (this.header_.classList.contains(this.CssClasses_.HEADER_WATERFALL)) {\n                mode = this.Mode_.WATERFALL;\n                this.header_.addEventListener('transitionend', this.headerTransitionEndHandler_.bind(this));\n                this.header_.addEventListener('click', this.headerClickHandler_.bind(this));\n            } else if (this.header_.classList.contains(this.CssClasses_.HEADER_SCROLL)) {\n                mode = this.Mode_.SCROLL;\n                container.classList.add(this.CssClasses_.HAS_SCROLLING_HEADER);\n            }\n            if (mode === this.Mode_.STANDARD) {\n                this.header_.classList.add(this.CssClasses_.CASTING_SHADOW);\n                if (this.tabBar_) {\n                    this.tabBar_.classList.add(this.CssClasses_.CASTING_SHADOW);\n                }\n            } else if (mode === this.Mode_.SEAMED || mode === this.Mode_.SCROLL) {\n                this.header_.classList.remove(this.CssClasses_.CASTING_SHADOW);\n                if (this.tabBar_) {\n                    this.tabBar_.classList.remove(this.CssClasses_.CASTING_SHADOW);\n                }\n            } else if (mode === this.Mode_.WATERFALL) {\n                // Add and remove shadows depending on scroll position.\n                // Also add/remove auxiliary class for styling of the compact version of\n                // the header.\n                this.content_.addEventListener('scroll', this.contentScrollHandler_.bind(this));\n                this.contentScrollHandler_();\n            }\n        }\n        // Add drawer toggling button to our layout, if we have an openable drawer.\n        if (this.drawer_) {\n            var drawerButton = this.element_.querySelector('.' + this.CssClasses_.DRAWER_BTN);\n            if (!drawerButton) {\n                drawerButton = document.createElement('div');\n                drawerButton.setAttribute('aria-expanded', 'false');\n                drawerButton.setAttribute('role', 'button');\n                drawerButton.setAttribute('tabindex', '0');\n                drawerButton.classList.add(this.CssClasses_.DRAWER_BTN);\n                var drawerButtonIcon = document.createElement('i');\n                drawerButtonIcon.classList.add(this.CssClasses_.ICON);\n                drawerButtonIcon.innerHTML = this.Constant_.MENU_ICON;\n                drawerButton.appendChild(drawerButtonIcon);\n            }\n            if (this.drawer_.classList.contains(this.CssClasses_.ON_LARGE_SCREEN)) {\n                // If drawer has ON_LARGE_SCREEN class then add it to the drawer toggle button as well.\n                drawerButton.classList.add(this.CssClasses_.ON_LARGE_SCREEN);\n            } else if (this.drawer_.classList.contains(this.CssClasses_.ON_SMALL_SCREEN)) {\n                // If drawer has ON_SMALL_SCREEN class then add it to the drawer toggle button as well.\n                drawerButton.classList.add(this.CssClasses_.ON_SMALL_SCREEN);\n            }\n            drawerButton.addEventListener('click', this.drawerToggleHandler_.bind(this));\n            drawerButton.addEventListener('keydown', this.drawerToggleHandler_.bind(this));\n            // Add a class if the layout has a drawer, for altering the left padding.\n            // Adds the HAS_DRAWER to the elements since this.header_ may or may\n            // not be present.\n            this.element_.classList.add(this.CssClasses_.HAS_DRAWER);\n            // If we have a fixed header, add the button to the header rather than\n            // the layout.\n            if (this.element_.classList.contains(this.CssClasses_.FIXED_HEADER)) {\n                this.header_.insertBefore(drawerButton, this.header_.firstChild);\n            } else {\n                this.element_.insertBefore(drawerButton, this.content_);\n            }\n            var obfuscator = document.createElement('div');\n            obfuscator.classList.add(this.CssClasses_.OBFUSCATOR);\n            this.element_.appendChild(obfuscator);\n            obfuscator.addEventListener('click', this.drawerToggleHandler_.bind(this));\n            this.obfuscator_ = obfuscator;\n            this.drawer_.addEventListener('keydown', this.keyboardEventHandler_.bind(this));\n            this.drawer_.setAttribute('aria-hidden', 'true');\n        }\n        // Keep an eye on screen size, and add/remove auxiliary class for styling\n        // of small screens.\n        this.screenSizeMediaQuery_ = window.matchMedia(this.Constant_.MAX_WIDTH);\n        this.screenSizeMediaQuery_.addListener(this.screenSizeHandler_.bind(this));\n        this.screenSizeHandler_();\n        // Initialize tabs, if any.\n        if (this.header_ && this.tabBar_) {\n            this.element_.classList.add(this.CssClasses_.HAS_TABS);\n            var tabContainer = document.createElement('div');\n            tabContainer.classList.add(this.CssClasses_.TAB_CONTAINER);\n            this.header_.insertBefore(tabContainer, this.tabBar_);\n            this.header_.removeChild(this.tabBar_);\n            var leftButton = document.createElement('div');\n            leftButton.classList.add(this.CssClasses_.TAB_BAR_BUTTON);\n            leftButton.classList.add(this.CssClasses_.TAB_BAR_LEFT_BUTTON);\n            var leftButtonIcon = document.createElement('i');\n            leftButtonIcon.classList.add(this.CssClasses_.ICON);\n            leftButtonIcon.textContent = this.Constant_.CHEVRON_LEFT;\n            leftButton.appendChild(leftButtonIcon);\n            leftButton.addEventListener('click', function () {\n                this.tabBar_.scrollLeft -= this.Constant_.TAB_SCROLL_PIXELS;\n            }.bind(this));\n            var rightButton = document.createElement('div');\n            rightButton.classList.add(this.CssClasses_.TAB_BAR_BUTTON);\n            rightButton.classList.add(this.CssClasses_.TAB_BAR_RIGHT_BUTTON);\n            var rightButtonIcon = document.createElement('i');\n            rightButtonIcon.classList.add(this.CssClasses_.ICON);\n            rightButtonIcon.textContent = this.Constant_.CHEVRON_RIGHT;\n            rightButton.appendChild(rightButtonIcon);\n            rightButton.addEventListener('click', function () {\n                this.tabBar_.scrollLeft += this.Constant_.TAB_SCROLL_PIXELS;\n            }.bind(this));\n            tabContainer.appendChild(leftButton);\n            tabContainer.appendChild(this.tabBar_);\n            tabContainer.appendChild(rightButton);\n            // Add and remove tab buttons depending on scroll position and total\n            // window size.\n            var tabUpdateHandler = function () {\n                if (this.tabBar_.scrollLeft > 0) {\n                    leftButton.classList.add(this.CssClasses_.IS_ACTIVE);\n                } else {\n                    leftButton.classList.remove(this.CssClasses_.IS_ACTIVE);\n                }\n                if (this.tabBar_.scrollLeft < this.tabBar_.scrollWidth - this.tabBar_.offsetWidth) {\n                    rightButton.classList.add(this.CssClasses_.IS_ACTIVE);\n                } else {\n                    rightButton.classList.remove(this.CssClasses_.IS_ACTIVE);\n                }\n            }.bind(this);\n            this.tabBar_.addEventListener('scroll', tabUpdateHandler);\n            tabUpdateHandler();\n            // Update tabs when the window resizes.\n            var windowResizeHandler = function () {\n                // Use timeouts to make sure it doesn't happen too often.\n                if (this.resizeTimeoutId_) {\n                    clearTimeout(this.resizeTimeoutId_);\n                }\n                this.resizeTimeoutId_ = setTimeout(function () {\n                    tabUpdateHandler();\n                    this.resizeTimeoutId_ = null;\n                }.bind(this), this.Constant_.RESIZE_TIMEOUT);\n            }.bind(this);\n            window.addEventListener('resize', windowResizeHandler);\n            if (this.tabBar_.classList.contains(this.CssClasses_.JS_RIPPLE_EFFECT)) {\n                this.tabBar_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\n            }\n            // Select element tabs, document panels\n            var tabs = this.tabBar_.querySelectorAll('.' + this.CssClasses_.TAB);\n            var panels = this.content_.querySelectorAll('.' + this.CssClasses_.PANEL);\n            // Create new tabs for each tab element\n            for (var i = 0; i < tabs.length; i++) {\n                new MaterialLayoutTab(tabs[i], tabs, panels, this);\n            }\n        }\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n    }\n};\n/**\n   * Constructor for an individual tab.\n   *\n   * @constructor\n   * @param {HTMLElement} tab The HTML element for the tab.\n   * @param {!NodeList} tabs Array with HTML elements for all tabs.\n   * @param {!NodeList} panels Array with HTML elements for all panels.\n   * @param {MaterialLayout} layout The MaterialLayout object that owns the tab.\n   */\nfunction MaterialLayoutTab(tab, tabs, panels, layout) {\n    /**\n     * Auxiliary method to programmatically select a tab in the UI.\n     */\n    function selectTab() {\n        var href = tab.href.split('#')[1];\n        var panel = layout.content_.querySelector('#' + href);\n        layout.resetTabState_(tabs);\n        layout.resetPanelState_(panels);\n        tab.classList.add(layout.CssClasses_.IS_ACTIVE);\n        panel.classList.add(layout.CssClasses_.IS_ACTIVE);\n    }\n    if (layout.tabBar_.classList.contains(layout.CssClasses_.JS_RIPPLE_EFFECT)) {\n        var rippleContainer = document.createElement('span');\n        rippleContainer.classList.add(layout.CssClasses_.RIPPLE_CONTAINER);\n        rippleContainer.classList.add(layout.CssClasses_.JS_RIPPLE_EFFECT);\n        var ripple = document.createElement('span');\n        ripple.classList.add(layout.CssClasses_.RIPPLE);\n        rippleContainer.appendChild(ripple);\n        tab.appendChild(rippleContainer);\n    }\n    tab.addEventListener('click', function (e) {\n        if (tab.getAttribute('href').charAt(0) === '#') {\n            e.preventDefault();\n            selectTab();\n        }\n    });\n    tab.show = selectTab;\n}\nwindow['MaterialLayoutTab'] = MaterialLayoutTab;\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialLayout,\n    classAsString: 'MaterialLayout',\n    cssClass: 'mdl-js-layout'\n});\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Data Table Card MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {Element} element The element that will be upgraded.\n   */\nvar MaterialDataTable = function MaterialDataTable(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialDataTable'] = MaterialDataTable;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialDataTable.prototype.Constant_ = {};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialDataTable.prototype.CssClasses_ = {\n    DATA_TABLE: 'mdl-data-table',\n    SELECTABLE: 'mdl-data-table--selectable',\n    SELECT_ELEMENT: 'mdl-data-table__select',\n    IS_SELECTED: 'is-selected',\n    IS_UPGRADED: 'is-upgraded'\n};\n/**\n   * Generates and returns a function that toggles the selection state of a\n   * single row (or multiple rows).\n   *\n   * @param {Element} checkbox Checkbox that toggles the selection state.\n   * @param {Element} row Row to toggle when checkbox changes.\n   * @param {(Array<Object>|NodeList)=} optRows Rows to toggle when checkbox changes.\n   * @return {?function()} a function to toggle the selection state of the row(s).\n   * @private\n   */\nMaterialDataTable.prototype.selectRow_ = function (checkbox, row, optRows) {\n    if (row) {\n        return function () {\n            if (checkbox.checked) {\n                row.classList.add(this.CssClasses_.IS_SELECTED);\n            } else {\n                row.classList.remove(this.CssClasses_.IS_SELECTED);\n            }\n        }.bind(this);\n    }\n    if (optRows) {\n        return function () {\n            var i;\n            var el;\n            if (checkbox.checked) {\n                for (i = 0; i < optRows.length; i++) {\n                    el = optRows[i].querySelector('td').querySelector('.mdl-checkbox');\n                    el['MaterialCheckbox'].check();\n                    optRows[i].classList.add(this.CssClasses_.IS_SELECTED);\n                }\n            } else {\n                for (i = 0; i < optRows.length; i++) {\n                    el = optRows[i].querySelector('td').querySelector('.mdl-checkbox');\n                    el['MaterialCheckbox'].uncheck();\n                    optRows[i].classList.remove(this.CssClasses_.IS_SELECTED);\n                }\n            }\n        }.bind(this);\n    }\n    return null;\n};\n/**\n   * Creates a checkbox for a single or or multiple rows and hooks up the\n   * event handling.\n   *\n   * @param {Element} row Row to toggle when checkbox changes.\n   * @param {(Array<Object>|NodeList)=} optRows Rows to toggle when checkbox changes.\n   * @return {Element} the created parent label.\n   * @private\n   */\nMaterialDataTable.prototype.createCheckbox_ = function (row, optRows) {\n    var label = document.createElement('label');\n    var labelClasses = [\n        'mdl-checkbox',\n        'mdl-js-checkbox',\n        'mdl-js-ripple-effect',\n        this.CssClasses_.SELECT_ELEMENT\n    ];\n    label.className = labelClasses.join(' ');\n    var checkbox = document.createElement('input');\n    checkbox.type = 'checkbox';\n    checkbox.classList.add('mdl-checkbox__input');\n    if (row) {\n        checkbox.checked = row.classList.contains(this.CssClasses_.IS_SELECTED);\n        checkbox.addEventListener('change', this.selectRow_(checkbox, row));\n    } else if (optRows) {\n        checkbox.addEventListener('change', this.selectRow_(checkbox, null, optRows));\n    }\n    label.appendChild(checkbox);\n    componentHandler.upgradeElement(label, 'MaterialCheckbox');\n    return label;\n};\n/**\n   * Initialize element.\n   */\nMaterialDataTable.prototype.init = function () {\n    if (this.element_) {\n        var firstHeader = this.element_.querySelector('th');\n        var bodyRows = Array.prototype.slice.call(this.element_.querySelectorAll('tbody tr'));\n        var footRows = Array.prototype.slice.call(this.element_.querySelectorAll('tfoot tr'));\n        var rows = bodyRows.concat(footRows);\n        if (this.element_.classList.contains(this.CssClasses_.SELECTABLE)) {\n            var th = document.createElement('th');\n            var headerCheckbox = this.createCheckbox_(null, rows);\n            th.appendChild(headerCheckbox);\n            firstHeader.parentElement.insertBefore(th, firstHeader);\n            for (var i = 0; i < rows.length; i++) {\n                var firstCell = rows[i].querySelector('td');\n                if (firstCell) {\n                    var td = document.createElement('td');\n                    if (rows[i].parentNode.nodeName.toUpperCase() === 'TBODY') {\n                        var rowCheckbox = this.createCheckbox_(rows[i]);\n                        td.appendChild(rowCheckbox);\n                    }\n                    rows[i].insertBefore(td, firstCell);\n                }\n            }\n            this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n        }\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialDataTable,\n    classAsString: 'MaterialDataTable',\n    cssClass: 'mdl-js-data-table'\n});\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for date picker MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialDatePicker = function MaterialDatePicker(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialDatePicker'] = MaterialDatePicker;\n/**\n   * Global date picker locales\n   * Currently allowed formats: ['mm/dd/yyyy', 'dd.mm.yyyy', 'yyyy-mm-dd']\n   * @type {Object}\n   * @public\n   */\nMaterialDatePicker.locales = {\n    /**\n     * Date format for input formatting\n     * @type {string}\n     */\n    format: 'yyyy-mm-dd',\n    weekStart: 0,\n    weekDays: [\n        'Sunday',\n        'Monday',\n        'Tuesday',\n        'Wednesday',\n        'Thursday',\n        'Friday',\n        'Saturday'\n    ],\n    weekDaysShort: [\n        'Sun',\n        'Mon',\n        'Tue',\n        'Wed',\n        'Thu',\n        'Fri',\n        'Sat'\n    ],\n    weekDaysLetter: [\n        'S',\n        'M',\n        'T',\n        'W',\n        'T',\n        'F',\n        'S'\n    ],\n    months: [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December'\n    ],\n    monthsShort: [\n        'Jan',\n        'Feb',\n        'Mar',\n        'Apr',\n        'May',\n        'Jun',\n        'Jul',\n        'Aug',\n        'Sep',\n        'Oct',\n        'Nov',\n        'Dec'\n    ],\n    actions: {\n        cancel: 'Cancel',\n        ok: 'Ok'\n    }\n};\n/**\n   * Instance based date picker locales.\n   * Overrides global date picker locales\n   *\n   * @type {Object}\n   * @public\n   */\nMaterialDatePicker.prototype.locales = {};\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialDatePicker.prototype.Constant_ = {};\n/**\n   * Store events in one place so they can be updated easily.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialDatePicker.prototype.Event_ = {};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialDatePicker.prototype.CssClasses_ = {\n    // General component classes\n    IS_UPGRADED: 'is-upgraded',\n    IS_VISIBLE: 'is-visible',\n    IS_ATTACHED: 'is-attached',\n    IS_INVALID: 'is-invalid',\n    IS_FOCUSED: 'is-focused',\n    IS_DIRTY: 'is-dirty',\n    IS_FIXED: 'is-fixed',\n    // Appearance classes\n    INLINE: 'mdl-datepicker--inline',\n    FIXED: 'mdl-datepicker--fixed',\n    LANDSCAPE: 'mdl-datepicker--landscape',\n    // Datepicker related classes\n    BACKDROP: 'mdl-datepicker__backdrop',\n    WIDGET: 'mdl-datepicker__widget',\n    INPUT: 'mdl-datepicker__input',\n    NAVIGATION: 'mdl-datepicker__navigation',\n    CALENDAR: 'mdl-datepicker__calendar',\n    YEAR: 'mdl-datepicker__year',\n    YEAR_SELECTED: 'is-selected',\n    YEAR_DISABLED: 'is-disabled',\n    YEAR_PICKER: 'is-year-picker',\n    YEAR_PICKER_ELEMENT: 'mdl-datepicker__year-picker',\n    MONTH: 'mdl-datepicker__month',\n    WEEKS: 'mdl-datepicker__weeks',\n    WEEK: 'mdl-datepicker__week',\n    WEEK_DAYS: 'mdl-datepicker__week-days',\n    DATE: 'mdl-datepicker__date',\n    DATE_TODAY: 'is-today',\n    DATE_SELECTED: 'is-selected',\n    DATE_EMPTY: 'is-empty',\n    DATE_DISABLED: 'is-disabled',\n    MONTH_CURRENT: 'mdl-datepicker__current-month',\n    MONTH_PREVIOUS: 'mdl-datepicker__previous-month',\n    MONTH_NEXT: 'mdl-datepicker__next-month',\n    HEADER: 'mdl-datepicker__header',\n    HEADER_YEAR: 'mdl-datepicker__header-year',\n    HEADER_DATE: 'mdl-datepicker__header-date',\n    CALENDAR_PREVIOUS: 'mdl-datepicker__calendar--previous',\n    CALENDAR_NEXT: 'mdl-datepicker__calendar--next',\n    ACTIONS: 'mdl-datepicker__actions',\n    ACTION_CANCEL: 'mdl-datepicker__cancel',\n    ACTION_OK: 'mdl-datepicker__ok'\n};\nMaterialDatePicker.prototype.isInitialized_ = null;\nMaterialDatePicker.prototype.currentDate_ = null;\nMaterialDatePicker.prototype.selectedDate_ = null;\nMaterialDatePicker.prototype.pickedDate_ = null;\nMaterialDatePicker.prototype.minDate_ = null;\nMaterialDatePicker.prototype.maxDate_ = null;\n/**\n   * Trigger date picker internal events\n   * @param {string} eventName  Event which will be triggered on component element\n   * @private\n   * @return {void}\n   */\nMaterialDatePicker.prototype.triggerEvent_ = function (eventName) {\n    var evt = document.createEvent('Events');\n    evt.initEvent(eventName, false, false);\n    this.element_.dispatchEvent(evt);\n};\n/**\n   * Cancel action click handler\n   * @param {Event} e click event object\n   * @private\n   * @return {void}\n   */\nMaterialDatePicker.prototype.cancelHandler_ = function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n    this.close();\n    if (this.selectedDate_) {\n        this.pickedDate_.setFullYear(this.selectedDate_.getFullYear());\n        this.pickedDate_.setMonth(this.selectedDate_.getMonth());\n        this.pickedDate_.setDate(this.selectedDate_.getDate());\n    }\n    this.updateHeader_();\n    this.updateMonthTitle_();\n    this.changeCurrentMonth_(this.pickedDate_);\n    if (this.element_.classList.contains(this.CssClasses_.YEAR_PICKER)) {\n        this.element_.classList.remove(this.CssClasses_.YEAR_PICKER);\n    }\n};\n/**\n   * Ok action click handler\n   * @param {Event} e click event object\n   * @private\n   * @return {void}\n   */\nMaterialDatePicker.prototype.okHandler_ = function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n    if (!this.selectedDate_) {\n        this.selectedDate_ = new Date();\n    }\n    this.selectedDate_.setFullYear(this.pickedDate_.getFullYear());\n    this.selectedDate_.setMonth(this.pickedDate_.getMonth());\n    this.selectedDate_.setDate(this.pickedDate_.getDate());\n    if (this.input_) {\n        this.input_.value = this.formatInputDate_(this.selectedDate_);\n        if (this.element_.MaterialTextfield) {\n            this.element_.MaterialTextfield.checkValidity();\n        }\n    }\n    this.element_.classList.add(this.CssClasses_.IS_DIRTY);\n    if (this.element_.classList.contains(this.CssClasses_.YEAR_PICKER)) {\n        this.element_.classList.remove(this.CssClasses_.YEAR_PICKER);\n    }\n    this.triggerEvent_('change');\n    this.close();\n};\n/**\n   * Date picker input focus handler\n   * @param {Event} e focus event object\n   * @private\n   * @return {void}\n   */\nMaterialDatePicker.prototype.inputFocusHandler_ = function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n    this.input_.blur();\n    this.open();\n};\n/**\n   * Date picker input blur handler\n   * @param {Event} e focusout event object\n   * @private\n   * @return {void}\n   */\nMaterialDatePicker.prototype.inputBlurHandler_ = function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n};\n/**\n   * Header year click handler\n   * @param {Event} e Click event object\n   * @private\n   * @return {void}\n   */\nMaterialDatePicker.prototype.headerYearClickHandler_ = function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n    if (this.widgetElement_ && !this.widgetElement_.classList.contains(this.CssClasses_.YEAR_PICKER)) {\n        this.widgetElement_.classList.add(this.CssClasses_.YEAR_PICKER);\n        var selectedYear = this.yearPickerElement_.querySelector('.' + this.CssClasses_.YEAR_SELECTED);\n        if (selectedYear) {\n            var focusYear = selectedYear;\n            for (var i = 0; i < 3; i++) {\n                if (focusYear.previousElementSibling) {\n                    focusYear = focusYear.previousElementSibling;\n                }\n            }\n            focusYear.parentNode.scrollTop = focusYear.offsetTop;\n        }\n    }\n};\n/**\n   * Header date click handler\n   * @param {Event} e Click event object\n   * @private\n   * @return {void}\n   */\nMaterialDatePicker.prototype.headerDateClickHandler_ = function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n    if (this.widgetElement_ && this.widgetElement_.classList.contains(this.CssClasses_.YEAR_PICKER)) {\n        this.widgetElement_.classList.remove(this.CssClasses_.YEAR_PICKER);\n    }\n};\n/**\n   * Picker year click handler\n   * @private\n   * @param {Event} e Click event object\n   * @return {void}\n   */\nMaterialDatePicker.prototype.pickYearHandler_ = function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n    var selectedYear = this.yearPickerElement_.querySelector('.' + this.CssClasses_.YEAR_SELECTED);\n    if (selectedYear && selectedYear.classList.contains(this.CssClasses_.YEAR_SELECTED)) {\n        selectedYear.classList.remove(this.CssClasses_.YEAR_SELECTED);\n    }\n    var currentYear = e.target;\n    currentYear.classList.add(this.CssClasses_.YEAR_SELECTED);\n    var currentYearInt = parseInt(currentYear.getAttribute('data-year'), 10);\n    this.pickedDate_.setFullYear(currentYearInt);\n    var pickedDate = new Date(this.pickedDate_.getTime());\n    if (!this.isInRange_(pickedDate)) {\n        if (this.minDate_ && !this.maxDate_ && pickedDate.getTime() < this.minDate_.getTime()) {\n            pickedDate.setFullYear(this.minDate_.getFullYear());\n            pickedDate.setMonth(this.minDate_.getMonth());\n            pickedDate.setDate(this.minDate_.getDate());\n        } else if (!this.minDate_ && this.maxDate_ && pickedDate.getTime() > this.maxDate_.getTime()) {\n            pickedDate.setFullYear(this.maxDate_.getFullYear());\n            pickedDate.setMonth(this.maxDate_.getMonth());\n            pickedDate.setDate(this.maxDate_.getDate());\n        } else {\n            pickedDate.setFullYear(this.minDate_.getFullYear());\n            pickedDate.setMonth(this.minDate_.getMonth());\n            pickedDate.setDate(this.minDate_.getDate());\n        }\n        this.pickedDate_.setFullYear(pickedDate.getFullYear());\n        this.pickedDate_.setMonth(pickedDate.getMonth());\n        this.pickedDate_.setDate(pickedDate.getDate());\n    }\n    this.currentMonth_.setFullYear(currentYearInt);\n    this.currentMonth_.setMonth(this.pickedDate_.getMonth());\n    this.currentMonth_.setDate(this.pickedDate_.getDate());\n    this.updateHeader_();\n    this.updateMonthTitle_();\n    this.changeCurrentMonth_(this.currentMonth_);\n};\n/**\n   * Select date action click handler\n   * @param {Event} e Click event object\n   * @private\n   * @return {void}\n   */\nMaterialDatePicker.prototype.pickDateHandler_ = function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n    var previousDate = this.calendarElement_.querySelector('.' + this.CssClasses_.DATE + '.' + this.CssClasses_.DATE_SELECTED);\n    if (previousDate) {\n        previousDate.classList.remove(this.CssClasses_.DATE_SELECTED);\n    }\n    // Select current date\n    var pickedDate = e.target;\n    var pickedDateInt = pickedDate.getAttribute('data-date');\n    pickedDate.classList.add(this.CssClasses_.DATE_SELECTED);\n    var nextPickedDate = new Date(this.pickedDate_.getTime());\n    nextPickedDate.setFullYear(this.currentMonth_.getFullYear());\n    nextPickedDate.setMonth(this.currentMonth_.getMonth());\n    nextPickedDate.setDate(pickedDateInt);\n    if (this.isInRange_(nextPickedDate)) {\n        this.pickedDate_.setFullYear(this.currentMonth_.getFullYear());\n        this.pickedDate_.setMonth(this.currentMonth_.getMonth());\n        this.pickedDate_.setDate(pickedDateInt);\n        this.updateHeader_();\n        this.updateYearPicker_();\n    }\n};\n/**\n   * Previous date picker month handler\n   * @param {Event} e Click event object\n   * @private\n   * @return {void}\n   */\nMaterialDatePicker.prototype.previousMonthHandler_ = function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n    var previousMonth = new Date(this.currentMonth_.getTime());\n    previousMonth.setDate(1);\n    previousMonth.setMonth(this.currentMonth_.getMonth() - 1);\n    this.changeCurrentMonth_(previousMonth);\n};\n/**\n   * Next date picker month handler\n   * @param {Event} e Click event object\n   * @private\n   * @return {void}\n   */\nMaterialDatePicker.prototype.nextMonthHandler_ = function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n    var nextMonth = new Date(this.currentMonth_.getTime());\n    nextMonth.setDate(1);\n    nextMonth.setMonth(nextMonth.getMonth() + 1);\n    this.changeCurrentMonth_(nextMonth);\n};\n/**\n   * Format given date for input value\n   * @param  {Date} dateObject Date object to format\n   * @private\n   * @return {string} Formatted date string\n   */\nMaterialDatePicker.prototype.formatInputDate_ = function (dateObject) {\n    var dateFormatted;\n    // If given format is actually function,\n    // execute in global scope with selected date as parameter\n    if (typeof this.locales.format === 'function') {\n        var formatFunction = this.locales.format;\n        var selectedDate = this.selectedDate_;\n        return formatFunction.call(window, selectedDate);\n    }\n    /**\n     * Append leading zero if necessary\n     * @param {number} number Number to append leading zero\n     * @return {string} String containing leading zero if needed\n     */\n    var addLeadingZero = function (number) {\n        return ('0' + number).substr(-2, 2);\n    };\n    switch (this.locales.format) {\n    case 'dd.mm.yyyy':\n        dateFormatted = [\n            addLeadingZero(dateObject.getDate()),\n            addLeadingZero(dateObject.getMonth() + 1),\n            dateObject.getFullYear()\n        ].join('.');\n        break;\n    case 'yyyy-mm-dd':\n        dateFormatted = [\n            dateObject.getFullYear(),\n            addLeadingZero(dateObject.getMonth() + 1),\n            addLeadingZero(dateObject.getDate())\n        ].join('-');\n        break;\n    case 'mm/dd/yyyy':\n        dateFormatted = [\n            addLeadingZero(dateObject.getMonth() + 1),\n            addLeadingZero(dateObject.getDate()),\n            dateObject.getFullYear()\n        ].join('/');\n        break;\n    default:\n        dateFormatted = [\n            addLeadingZero(dateObject.getMonth() + 1),\n            addLeadingZero(dateObject.getDate()),\n            dateObject.getFullYear()\n        ].join('/');\n        break;\n    }\n    return dateFormatted;\n};\n/**\n   * Format given date for header display\n   * @param  {Date} date Current picked date object\n   * @return {string} Formatted date\n   */\nMaterialDatePicker.prototype.formatHeaderDate_ = function (date) {\n    return this.locales.weekDaysShort[date.getDay()] + ', ' + this.locales.monthsShort[date.getMonth()] + ' ' + date.getDate();\n};\n/**\n   * Check if given date is today\n   * @param  {Date} currentDate Date object to check \"is today\" state\n   * @return {boolean} Date \"is today\" status\n   */\nMaterialDatePicker.prototype.isToday_ = function (currentDate) {\n    var today = new Date();\n    if (today.getFullYear() !== currentDate.getFullYear()) {\n        return false;\n    }\n    if (today.getMonth() !== currentDate.getMonth()) {\n        return false;\n    }\n    if (today.getDate() !== currentDate.getDate()) {\n        return false;\n    }\n    return true;\n};\n/**\n   * Check if given date is selected date\n   * @param  {Date} currentDate Date object to check \"is picked\" state\n   * @return {boolean} Date \"is picked\" state\n   */\nMaterialDatePicker.prototype.isPickedDate_ = function (currentDate) {\n    if (!this.pickedDate_) {\n        return false;\n    }\n    if (this.pickedDate_.getFullYear() !== currentDate.getFullYear()) {\n        return false;\n    }\n    if (this.pickedDate_.getMonth() !== currentDate.getMonth()) {\n        return false;\n    }\n    if (this.pickedDate_.getDate() !== currentDate.getDate()) {\n        return false;\n    }\n    return true;\n};\n/**\n   * Check if given date is in range, if range is set.\n   * @private\n   * @param  {Date} dateObject Date to check if it is in defined date range\n   * @return {boolean} Date \"in range\" state\n   */\nMaterialDatePicker.prototype.isInRange_ = function (dateObject) {\n    var isInRange = true;\n    if (this.minDate_ && !this.maxDate_) {\n        if (this.minDate_.getTime() > dateObject.getTime()) {\n            isInRange = false;\n        }\n    } else if (!this.minDate_ && this.maxDate_) {\n        if (this.maxDate_.getTime() < dateObject.getTime()) {\n            isInRange = false;\n        }\n    } else if (this.minDate_ && this.maxDate_) {\n        if (this.minDate_.getTime() <= dateObject.getTime() && dateObject.getTime() <= this.maxDate_.getTime()) {\n        } else {\n            isInRange = false;\n        }\n    }\n    return isInRange;\n};\n/**\n   * Check if given year is in range, if range is set\n   * @param  {number} year Year to check \"in range\" state\n   * @return {boolean} Year \"in range\" state\n   */\nMaterialDatePicker.prototype.isYearInRange_ = function (year) {\n    var isInRange = true;\n    if (this.minDate_ && !this.maxDate_) {\n        if (this.minDate_.getFullYear() > year) {\n            isInRange = false;\n        }\n    } else if (!this.minDate_ && this.maxDate_) {\n        if (this.maxDate_.getFullYear() < year) {\n            isInRange = false;\n        }\n    } else if (this.minDate_ && this.maxDate_) {\n        if (this.minDate_.getFullYear() <= year && year <= this.maxDate_.getFullYear()) {\n        } else {\n            isInRange = false;\n        }\n    }\n    return isInRange;\n};\n/**\n   * Change current month and rerender calendar\n   * @private\n   * @param  {Date} nextMonth Next month object\n   * @return {void}\n   */\nMaterialDatePicker.prototype.changeCurrentMonth_ = function (nextMonth) {\n    if (!nextMonth) {\n        return undefined;\n    }\n    var currentMonthElement = this.renderMonth_(nextMonth);\n    if (this.currentMonthElement_) {\n        this.calendarElement_.insertBefore(currentMonthElement, this.currentMonthElement_);\n    } else {\n        this.calendarElement_.appendChild(currentMonthElement);\n    }\n    var dateButtons = this.currentMonthElement_.querySelectorAll('.' + this.CssClasses_.DATE);\n    for (var i = 0; i < dateButtons.length; i++) {\n        var dateButton = dateButtons[i];\n        dateButton.removeEventListener('click', this.boundPickDateHandler);\n    }\n    if (this.currentMonthElement_.remove) {\n        this.currentMonthElement_.remove();\n    } else {\n        this.currentMonthElement_.parentNode.removeChild(this.currentMonthElement_);\n    }\n    this.currentMonthElement_ = currentMonthElement;\n    this.currentMonth_ = nextMonth;\n    this.updateMonthTitle_();\n};\n/**\n   * Render datepicker dialog\n   *\n   * @private\n   * @return {void}\n   */\nMaterialDatePicker.prototype.render_ = function () {\n    if (!this.widgetElement_) {\n        this.widgetElement_ = document.createElement('div');\n        this.widgetElement_.classList.add(this.CssClasses_.WIDGET);\n        // Append header element\n        this.widgetElement_.appendChild(this.renderHeader_());\n        this.widgetElement_.appendChild(this.renderCalendar_());\n        if (this.element_.classList.contains(this.CssClasses_.FIXED)) {\n            this.widgetElement_.classList.add(this.CssClasses_.IS_FIXED);\n            document.body.appendChild(this.widgetElement_);\n        } else {\n            this.element_.appendChild(this.widgetElement_);\n        }\n    }\n};\n/**\n   * Render date picker header element\n   * @private\n   * @return {Element} Date picker header element\n   */\nMaterialDatePicker.prototype.renderHeader_ = function () {\n    if (!this.headerElement_) {\n        this.headerElement_ = document.createElement('div');\n        this.headerYearElement_ = document.createElement('div');\n        this.headerDateElement_ = document.createElement('div');\n        // Add appropriate classes\n        this.headerElement_.classList.add(this.CssClasses_.HEADER);\n        this.headerYearElement_.classList.add(this.CssClasses_.HEADER_YEAR);\n        this.headerDateElement_.classList.add(this.CssClasses_.HEADER_DATE);\n        // Bind click events\n        this.boundHeaderYearClickHandler = this.headerYearClickHandler_.bind(this);\n        this.boundHeaderDateClickHandler = this.headerDateClickHandler_.bind(this);\n        this.headerYearElement_.addEventListener('click', this.boundHeaderYearClickHandler);\n        this.headerDateElement_.addEventListener('click', this.boundHeaderDateClickHandler);\n        // Assemble header element\n        this.headerElement_.appendChild(this.headerYearElement_);\n        this.headerElement_.appendChild(this.headerDateElement_);\n        // Setup initial header values\n        this.updateHeader_();\n    }\n    return this.headerElement_;\n};\n/**\n   * Update header date and year\n   *\n   * @private\n   * @return {void}\n   */\nMaterialDatePicker.prototype.updateHeader_ = function () {\n    if (this.headerYearElement_) {\n        this.headerYearElement_.innerHTML = this.pickedDate_.getFullYear();\n    }\n    if (this.headerDateElement_) {\n        this.headerDateElement_.innerHTML = this.formatHeaderDate_(this.pickedDate_);\n    }\n};\n/**\n   * Update current month title\n   * @private\n   * @return {void}\n   */\nMaterialDatePicker.prototype.updateMonthTitle_ = function () {\n    this.currentMonthTitleElement_.innerHTML = this.locales.months[this.currentMonth_.getMonth()] + ', ' + this.currentMonth_.getFullYear();\n};\n/**\n   * Update year picker current year\n   * @private\n   * @return {void}\n   */\nMaterialDatePicker.prototype.updateYearPicker_ = function () {\n    var pickedYear = this.yearPickerElement_.querySelector('.' + this.CssClasses_.YEAR_SELECTED);\n    if (pickedYear) {\n        pickedYear.classList.remove(this.CssClasses_.YEAR_SELECTED);\n    }\n    pickedYear = this.yearPickerElement_.querySelector('.' + this.CssClasses_.YEAR + '[data-year=\"' + this.pickedDate_.getFullYear() + '\"]');\n    pickedYear.classList.add(this.CssClasses_.YEAR_SELECTED);\n    var focusYear = pickedYear;\n    for (var i = 0; i < 3; i++) {\n        if (focusYear.previousElementSibling) {\n            focusYear = focusYear.previousElementSibling;\n        }\n    }\n    focusYear.parentNode.scrollTop = focusYear.offsetTop;\n};\n/**\n   * Render entire date picker content\n   * @private\n   * @return {Element} Date picker calendar element\n   */\nMaterialDatePicker.prototype.renderCalendar_ = function () {\n    if (!this.calendarElement_) {\n        this.calendarElement_ = document.createElement('div');\n        this.calendarElement_.classList.add(this.CssClasses_.CALENDAR);\n        this.calendarElement_.appendChild(this.renderNavigation_());\n        this.calendarElement_.appendChild(this.renderWeekDays_());\n        this.currentMonthElement_ = this.renderMonth_(this.currentMonth_);\n        this.calendarElement_.appendChild(this.currentMonthElement_);\n        this.calendarElement_.appendChild(this.renderYearPicker_());\n        this.calendarElement_.appendChild(this.renderActions_());\n    }\n    return this.calendarElement_;\n};\n/**\n   * Render month navigation\n   * @private\n   * @return {Element} Date picker navigation element\n   */\nMaterialDatePicker.prototype.renderNavigation_ = function () {\n    if (!this.navigationElement_) {\n        this.navigationElement_ = document.createElement('div');\n        this.navigationElement_.classList.add(this.CssClasses_.NAVIGATION);\n        var previousMonth = document.createElement('button');\n        previousMonth.setAttribute('type', 'button');\n        previousMonth.classList.add('mdl-button');\n        previousMonth.classList.add('mdl-js-button');\n        previousMonth.classList.add('mdl-button--icon');\n        previousMonth.classList.add(this.CssClasses_.MONTH_PREVIOUS);\n        var previousIcon = document.createElement('i');\n        previousIcon.classList.add('material-icons');\n        previousIcon.innerHTML = 'keyboard_arrow_left';\n        previousMonth.appendChild(previousIcon);\n        var nextMonth = document.createElement('button');\n        nextMonth.setAttribute('type', 'button');\n        nextMonth.classList.add('mdl-button');\n        nextMonth.classList.add('mdl-js-button');\n        nextMonth.classList.add('mdl-button--icon');\n        nextMonth.classList.add(this.CssClasses_.MONTH_NEXT);\n        var nextIcon = document.createElement('i');\n        nextIcon.classList.add('material-icons');\n        nextIcon.innerHTML = 'keyboard_arrow_right';\n        nextMonth.appendChild(nextIcon);\n        // Bind month change event\n        this.boundPreviousMonthHandler = this.previousMonthHandler_.bind(this);\n        this.boundNextMonthHandler = this.nextMonthHandler_.bind(this);\n        previousMonth.addEventListener('click', this.boundPreviousMonthHandler, true);\n        nextMonth.addEventListener('click', this.boundNextMonthHandler, true);\n        this.currentMonthTitleElement_ = document.createElement('div');\n        this.currentMonthTitleElement_.classList.add(this.CssClasses_.MONTH_CURRENT);\n        if (this.currentMonth_) {\n            this.updateMonthTitle_();\n        }\n        this.navigationElement_.appendChild(previousMonth);\n        this.navigationElement_.appendChild(this.currentMonthTitleElement_);\n        this.navigationElement_.appendChild(nextMonth);\n        componentHandler.upgradeElement(previousMonth);\n        componentHandler.upgradeElement(nextMonth);\n    }\n    return this.navigationElement_;\n};\n/**\n   * Render date picker week days heading\n   *\n   * @private\n   * @return {Element} Date picker week days heading element\n   */\nMaterialDatePicker.prototype.renderWeekDays_ = function () {\n    if (!this.weekDaysElement_) {\n        this.weekDaysElement_ = document.createElement('div');\n        this.weekDaysElement_.classList.add(this.CssClasses_.WEEK_DAYS);\n        var weekStart = this.locales.weekStart;\n        for (var i = 0; i <= 6; i++) {\n            var weekDay = document.createElement('button');\n            weekDay.setAttribute('type', 'button');\n            weekDay.classList.add(this.CssClasses_.DATE);\n            weekDay.classList.add(this.CssClasses_.DATE_EMPTY);\n            weekDay.innerHTML = this.locales.weekDaysLetter[weekStart];\n            this.weekDaysElement_.appendChild(weekDay);\n            weekStart += 1;\n            if (weekStart > 6) {\n                weekStart = 0;\n            }\n        }\n    }\n    return this.weekDaysElement_;\n};\n/**\n   * Render date picker weeks\n   * @param {Date} monthObject Date object from which month element will be rendered\n   * @private\n   * @return {Element} Date picker month element\n   */\nMaterialDatePicker.prototype.renderMonth_ = function (monthObject) {\n    var month = document.createElement('div');\n    month.classList.add(this.CssClasses_.MONTH);\n    var firstDay = new Date(monthObject.getTime());\n    var lastDay = new Date(monthObject.getTime());\n    var currentDay = new Date(firstDay.getTime());\n    var currentDayInt = 1;\n    // Set first day of the month\n    firstDay.setDate(1);\n    // Set last day of the month\n    lastDay.setDate(1);\n    lastDay.setMonth(lastDay.getMonth() + 1);\n    lastDay.setDate(lastDay.getDate() - 1);\n    var renderDays = true;\n    var weekStart = this.locales.weekStart;\n    while (renderDays) {\n        var week = document.createElement('div');\n        week.classList.add(this.CssClasses_.WEEK);\n        for (var i = 0; i <= 6; i++) {\n            currentDay.setDate(currentDayInt);\n            if (currentDayInt > lastDay.getDate()) {\n                renderDays = false;\n                break;\n            }\n            var weekDay = document.createElement('button');\n            weekDay.classList.add(this.CssClasses_.DATE);\n            if (currentDay.getDay() === weekStart && currentDay.getDate() <= lastDay.getDate()) {\n                weekDay.innerHTML = currentDayInt;\n                weekDay.setAttribute('data-date', currentDayInt);\n                weekDay.setAttribute('type', 'button');\n                currentDayInt++;\n                if (!this.isInRange_(currentDay)) {\n                    weekDay.classList.add(this.CssClasses_.DATE_DISABLED);\n                }\n                // Bind select date event\n                if (!weekDay.classList.contains(this.CssClasses_.DATE_DISABLED)) {\n                    if (this.isToday_(currentDay)) {\n                        weekDay.classList.add(this.CssClasses_.DATE_TODAY);\n                    }\n                    // Check if current day is selected\n                    if (this.isPickedDate_(currentDay)) {\n                        weekDay.classList.add(this.CssClasses_.DATE_SELECTED);\n                    }\n                    this.boundPickDateHandler = this.pickDateHandler_.bind(this);\n                    weekDay.addEventListener('click', this.boundPickDateHandler, true);\n                }\n            } else {\n                // Render empty date\n                weekDay.classList.add(this.CssClasses_.DATE_EMPTY);\n            }\n            weekStart += 1;\n            if (weekStart > 6) {\n                weekStart = 0;\n            }\n            week.appendChild(weekDay);\n        }\n        month.appendChild(week);\n    }\n    return month;\n};\n/**\n   * Render year picker\n   * @private\n   * @return {Element} Date picker \"year picker\" element\n   */\nMaterialDatePicker.prototype.renderYearPicker_ = function () {\n    var year;\n    var yearButton;\n    if (this.yearPickerElement_) {\n        // Year picker already rendered, just need to update state\n        var yearButtons = this.yearPickerElement_.querySelectorAll('.' + this.CssClasses_.YEAR);\n        for (var i = 0; i < yearButtons.length; i++) {\n            yearButton = null;\n            yearButton = yearButtons[i];\n            var existingYear = parseInt(yearButton.getAttribute('data-year'), 10);\n            if (this.isYearInRange_(existingYear)) {\n                if (yearButton.classList.contains(this.CssClasses_.YEAR_DISABLED)) {\n                    yearButton.classList.remove(this.CssClasses_.YEAR_DISABLED);\n                }\n                // First try remove, then add event listener again to avoid duplication\n                yearButton.removeEventListener('click', this.boundPickYearHandler);\n                yearButton.addEventListener('click', this.boundPickYearHandler);\n            } else {\n                yearButton.removeEventListener('click', this.boundPickYearHandler);\n                yearButton.classList.add(this.CssClasses_.YEAR_DISABLED);\n            }\n        }\n    } else {\n        this.yearPickerElement_ = document.createElement('div');\n        this.yearPickerElement_.classList.add(this.CssClasses_.YEAR_PICKER_ELEMENT);\n        var today = new Date();\n        var startYear = today.getFullYear() - 100;\n        var endYear = today.getFullYear() + 100;\n        this.boundPickYearHandler = this.pickYearHandler_.bind(this);\n        for (year = startYear; year <= endYear; year++) {\n            yearButton = document.createElement('button');\n            yearButton.classList.add(this.CssClasses_.YEAR);\n            yearButton.setAttribute('data-year', year);\n            yearButton.setAttribute('type', 'button');\n            yearButton.innerHTML = year;\n            if (this.isYearInRange_(year)) {\n                yearButton.addEventListener('click', this.boundPickYearHandler);\n                if (this.pickedDate_) {\n                    if (this.pickedDate_.getFullYear() === year) {\n                        yearButton.classList.add(this.CssClasses_.YEAR_SELECTED);\n                    }\n                }\n            } else {\n                yearButton.classList.add(this.CssClasses_.YEAR_DISABLED);\n            }\n            this.yearPickerElement_.appendChild(yearButton);\n        }\n    }\n    return this.yearPickerElement_;\n};\n/**\n   * Render date picker actions\n   * @private\n   * @return {Element} Date picker actions element\n   */\nMaterialDatePicker.prototype.renderActions_ = function () {\n    if (!this.actionsElement_) {\n        this.actionsElement_ = document.createElement('div');\n        this.actionsElement_.classList.add(this.CssClasses_.ACTIONS);\n        // Cancel button\n        this.cancelElement_ = document.createElement('button');\n        this.cancelElement_.classList.add('mdl-button');\n        this.cancelElement_.classList.add('mdl-js-button');\n        this.cancelElement_.classList.add('mdl-button--accent');\n        this.cancelElement_.classList.add(this.CssClasses_.ACTION_CANCEL);\n        this.cancelElement_.setAttribute('type', 'button');\n        this.cancelElement_.innerHTML = this.locales.actions.cancel || 'Cancel';\n        // OK button\n        this.okElement_ = document.createElement('button');\n        this.okElement_.classList.add('mdl-button');\n        this.okElement_.classList.add('mdl-js-button');\n        this.okElement_.classList.add('mdl-button--accent');\n        this.okElement_.classList.add(this.CssClasses_.ACTION_OK);\n        this.okElement_.setAttribute('type', 'button');\n        this.okElement_.innerHTML = this.locales.actions.ok || 'OK';\n        // Bind events\n        this.boundCancelActionHandler = this.cancelHandler_.bind(this);\n        this.boundOkActionHandler = this.okHandler_.bind(this);\n        this.cancelElement_.addEventListener('click', this.boundCancelActionHandler, true);\n        this.okElement_.addEventListener('click', this.boundOkActionHandler, true);\n        this.actionsElement_.appendChild(this.cancelElement_);\n        this.actionsElement_.appendChild(this.okElement_);\n        componentHandler.upgradeElement(this.cancelElement_);\n        componentHandler.upgradeElement(this.okElement_);\n    }\n    return this.actionsElement_;\n};\n/**\n   * Destroy all properties and widget elements\n   * @private\n   * @return {void}\n   */\nMaterialDatePicker.prototype.destroy_ = function () {\n    var i = 0;\n    if (this.yearPickerElement_) {\n        var yearButtons = this.yearPickerElement_.querySelectorAll('.' + this.CssClasses_.YEAR);\n        for (i = 0; i < yearButtons.length; i++) {\n            var yearButton = yearButtons[i];\n            yearButton.removeEventListener('click', this.boundPickYearHandler);\n        }\n    }\n    if (this.currentMonthElement_) {\n        var dateButtons = this.currentMonthElement_.querySelectorAll('.' + this.CssClasses_.DATE);\n        for (i = 0; i < dateButtons.length; i++) {\n            var dateButton = dateButtons[i];\n            dateButton.removeEventListener('click', this.boundPickDateHandler);\n        }\n    }\n    if (this.cancelElement_) {\n        componentHandler.downgradeElements(this.cancelElement_);\n        this.cancelElement_.removeEventListener('click', this.boundCancelActionHandler);\n    }\n    if (this.okElement_) {\n        componentHandler.downgradeElements(this.okElement_);\n        this.okElement_.removeEventListener('click', this.boundOkActionHandler);\n    }\n    if (this.actionsElement_) {\n        this.actionsElement_ = null;\n    }\n    if (this.navigationElement_) {\n        var previousMonth = this.navigationElement_.querySelector('.' + this.CssClasses_.MONTH_PREVIOUS);\n        var nextMonth = this.navigationElement_.querySelector('.' + this.CssClasses_.MONTH_NEXT);\n        if (previousMonth) {\n            previousMonth.removeEventListener('click', this.boundPreviousMonthHandler);\n        }\n        if (nextMonth) {\n            nextMonth.removeEventListener('click', this.boundNextMonthHandler);\n        }\n        this.navigationElement_ = null;\n    }\n    if (this.headerDateElement_) {\n        this.headerDateElement_.removeEventListener('click', this.boundHeaderDateClickHandler);\n        this.headerDateElement_ = null;\n    }\n    if (this.headerYearElement_) {\n        this.headerYearElement_.removeEventListener('click', this.boundHeaderYearClickHandler);\n        this.headerYearElement_ = null;\n    }\n    if (this.headerElement_) {\n        this.headerElement_ = null;\n    }\n    if (this.weekDaysElement_) {\n        this.weekDaysElement_ = null;\n    }\n    if (this.calendarElement_) {\n        this.calendarElement_ = null;\n    }\n    if (this.widgetElement_) {\n        if (this.widgetElement_.remove) {\n            this.widgetElement_.remove();\n        } else {\n            this.widgetElement_.parentNode.removeChild(this.widgetElement_);\n        }\n        this.widgetElement_ = null;\n    }\n};\n/**\n   * Open date picker dialog\n   * @public\n   * @return {void}\n   */\nMaterialDatePicker.prototype.open = function () {\n    // Date picker widget already opened\n    if (this.widgetElement_ && this.widgetElement_.classList.contains(this.CssClasses_.IS_VISIBLE)) {\n        return;\n    }\n    if (!this.widgetElement_) {\n        this.render_();\n    }\n    if (!this.element_.classList.contains(this.CssClasses_.IS_FOCUSED)) {\n        this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n    }\n    // Slightly delay picker show to enable animation\n    setTimeout(function () {\n        if (this.backdrop_) {\n            this.backdrop_.style.display = 'block';\n        }\n        this.widgetElement_.classList.add(this.CssClasses_.IS_VISIBLE);\n        this.element_.classList.add(this.CssClasses_.IS_VISIBLE);\n        this.triggerEvent_('open');\n    }.bind(this), 0);\n};\nMaterialDatePicker.prototype['open'] = MaterialDatePicker.prototype.open;\n/**\n   * Close date picker dialog\n   *\n   * @public\n   * @return {void}\n   */\nMaterialDatePicker.prototype.close = function () {\n    // Inline styles can't be closed.\n    // @TODO: This should be reviewed with Google guys\n    if (this.element_.classList.contains(this.CssClasses_.INLINE)) {\n        return;\n    }\n    // Date picker widget already closed\n    if (!this.widgetElement_ || !this.widgetElement_.classList.contains(this.CssClasses_.IS_VISIBLE)) {\n        return;\n    }\n    if (this.element_.classList.contains(this.CssClasses_.IS_FOCUSED)) {\n        this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n    }\n    if (this.widgetElement_.classList.contains(this.CssClasses_.IS_VISIBLE)) {\n        if (this.backdrop_) {\n            this.backdrop_.style.display = 'none';\n        }\n        this.widgetElement_.classList.remove(this.CssClasses_.IS_VISIBLE);\n        this.element_.classList.remove(this.CssClasses_.IS_VISIBLE);\n        this.triggerEvent_('close');\n        setTimeout(function () {\n            // Destroy all properties and widget elements after close\n            this.destroy_();\n        }.bind(this), 200);\n    }\n};\nMaterialDatePicker.prototype['close'] = MaterialDatePicker.prototype.close;\n/**\n   * Get selected date to datepicker\n   * @public\n   * @return {Date} Current selected date\n   */\nMaterialDatePicker.prototype.getSelectedDate = function () {\n    return this.selectedDate_;\n};\nMaterialDatePicker.prototype['getSelectedDate'] = MaterialDatePicker.prototype.getSelectedDate;\n/**\n   * Set selected date to datepicker\n   *\n   * @param  {Date} selectedDate Date object to be set as selected in picker\n   * @public\n   * @return {Date} Current selected date\n   */\nMaterialDatePicker.prototype.setSelectedDate = function (selectedDate) {\n    if (selectedDate && this.isInRange_(selectedDate)) {\n        this.pickedDate_ = selectedDate;\n        this.currentMonth_ = selectedDate;\n        this.selectedDate_ = selectedDate;\n        this.render_();\n        if (this.input_) {\n            this.input_.value = this.formatInputDate_(this.selectedDate_);\n            if (this.element_.MaterialTextfield) {\n                this.element_.MaterialTextfield.checkValidity();\n            }\n        }\n        this.element_.classList.add(this.CssClasses_.IS_DIRTY);\n    }\n    return this.getSelectedDate();\n};\nMaterialDatePicker.prototype['setSelectedDate'] = MaterialDatePicker.prototype.setSelectedDate;\n/**\n   * Set allowed date picker range. Dates outside of the range can't be selected.\n   * @param {Date} minDate Minimum date\n   * @param {Date} maxDate Maximum date\n   */\nMaterialDatePicker.prototype.setRange = function (minDate, maxDate) {\n    if (minDate && minDate instanceof Date) {\n        // Set minimum lowest possible value of the date\n        minDate.setHours(0);\n        minDate.setMinutes(0);\n        minDate.setSeconds(0);\n        minDate.setMilliseconds(0);\n    }\n    this.minDate_ = minDate || null;\n    if (maxDate && maxDate instanceof Date) {\n        // Set maximum highest possible value of the date\n        maxDate.setHours(23);\n        maxDate.setMinutes(59);\n        maxDate.setSeconds(59);\n        maxDate.setMilliseconds(999);\n    }\n    this.maxDate_ = maxDate || null;\n    // Means that widget exists and is opened\n    if (this.widgetElement_) {\n        this.changeCurrentMonth_(this.currentMonth_);\n        this.renderYearPicker_();\n    }\n};\nMaterialDatePicker.prototype['setRange'] = MaterialDatePicker.prototype.setRange;\n/**\n   * Initialize element.\n   */\nMaterialDatePicker.prototype.init = function () {\n    if (this.element_) {\n        // Load default configuration\n        this.locales = Object.create(MaterialDatePicker.locales);\n        this.input_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);\n        if (this.input_) {\n            if (!this.element_.getAttribute('upgraded')) {\n                componentHandler.upgradeElement(this.element_, 'MaterialTextfield');\n            }\n            // Bind input events\n            this.boundInputFocusHandler = this.inputFocusHandler_.bind(this);\n            this.boundInputBlurHandler = this.inputBlurHandler_.bind(this);\n            this.input_.addEventListener('focus', this.boundInputFocusHandler, true);\n            this.input_.addEventListener('focusout', this.boundInputBlurHandler, true);\n        }\n        // Setup properties default values.\n        this.pickedDate_ = new Date();\n        this.currentMonth_ = new Date();\n        this.selectedDate_ = null;\n        if (this.element_.classList.contains(this.CssClasses_.FIXED)) {\n            this.backdrop_ = document.createElement('div');\n            this.backdrop_.classList.add(this.CssClasses_.BACKDROP);\n            this.backdrop_.style.display = 'none';\n            this.backdrop_.setAttribute('tabindex', -1);\n            document.body.appendChild(this.backdrop_);\n        }\n        if (this.element_.classList.contains(this.CssClasses_.IS_VISIBLE)) {\n            // Hide datepicker until it is fully rendered\n            this.element_.classList.remove(this.CssClasses_.IS_VISIBLE);\n            // Once rendered, show datepicker\n            this.open();\n        }\n        // Set private isInitialized_ property for internal tracking\n        this.isInitialized_ = true;\n        // Add \"is-updated\" class\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n    }\n};\n/**\n   * Downgrade datepicker component\n   * @return {void}\n   */\nMaterialDatePicker.prototype.mdlDowngrade_ = function () {\n    if (this.input_) {\n        this.input_.removeEventListener('focus', this.boundInputFocusHandler, true);\n        this.input_.removeEventListener('focusout', this.boundInputBlurHandler, true);\n    }\n    this.destroy_();\n    if (this.backdrop_) {\n        if (this.backdrop_.remove) {\n            this.backdrop_.remove();\n        } else {\n            this.backdrop_.parentNode.removeChild(this.backdrop_);\n        }\n    }\n    // Trigger \"destroy\" event for all those who are listening\n    // for other component events\n    this.triggerEvent_('destroy');\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialDatePicker,\n    classAsString: 'MaterialDatePicker',\n    cssClass: 'mdl-js-datepicker',\n    widget: true\n});\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Ripple MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialRipple = function MaterialRipple(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialRipple'] = MaterialRipple;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialRipple.prototype.Constant_ = {\n    INITIAL_SCALE: 'scale(0.0001, 0.0001)',\n    INITIAL_SIZE: '1px',\n    INITIAL_OPACITY: '0.4',\n    FINAL_OPACITY: '0',\n    FINAL_SCALE: ''\n};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialRipple.prototype.CssClasses_ = {\n    RIPPLE_CENTER: 'mdl-ripple--center',\n    RIPPLE_EFFECT_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE: 'mdl-ripple',\n    IS_ANIMATING: 'is-animating',\n    IS_VISIBLE: 'is-visible'\n};\n/**\n   * Handle mouse / finger down on element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialRipple.prototype.downHandler_ = function (event) {\n    if (!this.rippleElement_.style.width && !this.rippleElement_.style.height) {\n        var rect = this.element_.getBoundingClientRect();\n        this.boundHeight = rect.height;\n        this.boundWidth = rect.width;\n        this.rippleSize_ = Math.sqrt(rect.width * rect.width + rect.height * rect.height) * 2 + 2;\n        this.rippleElement_.style.width = this.rippleSize_ + 'px';\n        this.rippleElement_.style.height = this.rippleSize_ + 'px';\n    }\n    this.rippleElement_.classList.add(this.CssClasses_.IS_VISIBLE);\n    if (event.type === 'mousedown' && this.ignoringMouseDown_) {\n        this.ignoringMouseDown_ = false;\n    } else {\n        if (event.type === 'touchstart') {\n            this.ignoringMouseDown_ = true;\n        }\n        var frameCount = this.getFrameCount();\n        if (frameCount > 0) {\n            return;\n        }\n        this.setFrameCount(1);\n        var bound = event.currentTarget.getBoundingClientRect();\n        var x;\n        var y;\n        // Check if we are handling a keyboard click.\n        if (event.clientX === 0 && event.clientY === 0) {\n            x = Math.round(bound.width / 2);\n            y = Math.round(bound.height / 2);\n        } else {\n            var clientX = event.clientX ? event.clientX : event.touches[0].clientX;\n            var clientY = event.clientY ? event.clientY : event.touches[0].clientY;\n            x = Math.round(clientX - bound.left);\n            y = Math.round(clientY - bound.top);\n        }\n        this.setRippleXY(x, y);\n        this.setRippleStyles(true);\n        requestAnimationFrame(this.animFrameHandler.bind(this));\n    }\n};\n/**\n   * Handle mouse / finger up on element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialRipple.prototype.upHandler_ = function (event) {\n    // Don't fire for the artificial \"mouseup\" generated by a double-click.\n    if (event && event.detail !== 2) {\n        // Allow a repaint to occur before removing this class, so the animation\n        // shows for tap events, which seem to trigger a mouseup too soon after\n        // mousedown.\n        window.setTimeout(function () {\n            this.rippleElement_.classList.remove(this.CssClasses_.IS_VISIBLE);\n        }.bind(this), 0);\n    }\n};\n/**\n   * Initialize element.\n   */\nMaterialRipple.prototype.init = function () {\n    if (this.element_) {\n        var recentering = this.element_.classList.contains(this.CssClasses_.RIPPLE_CENTER);\n        if (!this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT_IGNORE_EVENTS)) {\n            this.rippleElement_ = this.element_.querySelector('.' + this.CssClasses_.RIPPLE);\n            this.frameCount_ = 0;\n            this.rippleSize_ = 0;\n            this.x_ = 0;\n            this.y_ = 0;\n            // Touch start produces a compat mouse down event, which would cause a\n            // second ripples. To avoid that, we use this property to ignore the first\n            // mouse down after a touch start.\n            this.ignoringMouseDown_ = false;\n            this.boundDownHandler = this.downHandler_.bind(this);\n            this.element_.addEventListener('mousedown', this.boundDownHandler);\n            this.element_.addEventListener('touchstart', this.boundDownHandler);\n            this.boundUpHandler = this.upHandler_.bind(this);\n            this.element_.addEventListener('mouseup', this.boundUpHandler);\n            this.element_.addEventListener('mouseleave', this.boundUpHandler);\n            this.element_.addEventListener('touchend', this.boundUpHandler);\n            this.element_.addEventListener('blur', this.boundUpHandler);\n            /**\n         * Getter for frameCount_.\n         * @return {number} the frame count.\n         */\n            this.getFrameCount = function () {\n                return this.frameCount_;\n            };\n            /**\n         * Setter for frameCount_.\n         * @param {number} fC the frame count.\n         */\n            this.setFrameCount = function (fC) {\n                this.frameCount_ = fC;\n            };\n            /**\n         * Getter for rippleElement_.\n         * @return {Element} the ripple element.\n         */\n            this.getRippleElement = function () {\n                return this.rippleElement_;\n            };\n            /**\n         * Sets the ripple X and Y coordinates.\n         * @param  {number} newX the new X coordinate\n         * @param  {number} newY the new Y coordinate\n         */\n            this.setRippleXY = function (newX, newY) {\n                this.x_ = newX;\n                this.y_ = newY;\n            };\n            /**\n         * Sets the ripple styles.\n         * @param  {boolean} start whether or not this is the start frame.\n         */\n            this.setRippleStyles = function (start) {\n                if (this.rippleElement_ !== null) {\n                    var transformString;\n                    var scale;\n                    var offset = 'translate(' + this.x_ + 'px, ' + this.y_ + 'px)';\n                    if (start) {\n                        scale = this.Constant_.INITIAL_SCALE;\n                    } else {\n                        scale = this.Constant_.FINAL_SCALE;\n                        if (recentering) {\n                            offset = 'translate(' + this.boundWidth / 2 + 'px, ' + this.boundHeight / 2 + 'px)';\n                        }\n                    }\n                    transformString = 'translate(-50%, -50%) ' + offset + scale;\n                    this.rippleElement_.style.webkitTransform = transformString;\n                    this.rippleElement_.style.msTransform = transformString;\n                    this.rippleElement_.style.transform = transformString;\n                    if (start) {\n                        this.rippleElement_.classList.remove(this.CssClasses_.IS_ANIMATING);\n                    } else {\n                        this.rippleElement_.classList.add(this.CssClasses_.IS_ANIMATING);\n                    }\n                }\n            };\n            /**\n         * Handles an animation frame.\n         */\n            this.animFrameHandler = function () {\n                if (this.frameCount_-- > 0) {\n                    requestAnimationFrame(this.animFrameHandler.bind(this));\n                } else {\n                    this.setRippleStyles(false);\n                }\n            };\n        }\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialRipple,\n    classAsString: 'MaterialRipple',\n    cssClass: 'mdl-js-ripple-effect',\n    widget: false\n});\n}());\n","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A component handler interface using the revealing module design pattern.\n * More details on this design pattern here:\n * https://github.com/jasonmayes/mdl-component-design-pattern\n *\n * @author Jason Mayes.\n */\n/* exported componentHandler */\n\n// Pre-defining the componentHandler interface, for closure documentation and\n// static verification.\nvar componentHandler = {\n  /**\n   * Searches existing DOM for elements of our component type and upgrades them\n   * if they have not already been upgraded.\n   *\n   * @param {string=} optJsClass the programatic name of the element class we\n   * need to create a new instance of.\n   * @param {string=} optCssClass the name of the CSS class elements of this\n   * type will have.\n   */\n  upgradeDom: function(optJsClass, optCssClass) {}, // eslint-disable-line\n  /**\n   * Upgrades a specific element rather than all in the DOM.\n   *\n   * @param {!Element} element The element we wish to upgrade.\n   * @param {string=} optJsClass Optional name of the class we want to upgrade\n   * the element to.\n   */\n  upgradeElement: function(element, optJsClass) {}, // eslint-disable-line\n  /**\n   * Upgrades a specific list of elements rather than all in the DOM.\n   *\n   * @param {!Element|!Array<!Element>|!NodeList|!HTMLCollection} elements\n   * The elements we wish to upgrade.\n   */\n  upgradeElements: function(elements) {}, // eslint-disable-line\n  /**\n   * Upgrades all registered components found in the current DOM. This is\n   * automatically called on window load.\n   */\n  upgradeAllRegistered: function() {},\n  /**\n   * Allows user to be alerted to any upgrades that are performed for a given\n   * component type\n   *\n   * @param {string} jsClass The class name of the MDL component we wish\n   * to hook into for any upgrades performed.\n   * @param {function(!HTMLElement)} callback The function to call upon an\n   * upgrade. This function should expect 1 parameter - the HTMLElement which\n   * got upgraded.\n   */\n  registerUpgradedCallback: function(jsClass, callback) {}, // eslint-disable-line\n  /**\n   * Registers a class for future use and attempts to upgrade existing DOM.\n   *\n   * @param {componentHandler.ComponentConfigPublic} config the registration configuration\n   */\n  register: function(config) {}, // eslint-disable-line\n  /**\n   * Downgrade either a given node, an array of nodes, or a NodeList.\n   *\n   * @param {!Node|!Array<!Node>|!NodeList} nodes The list of nodes.\n   */\n  downgradeElements: function(nodes) {} // eslint-disable-line\n};\n\ncomponentHandler = (function() {\n  'use strict';\n\n  /** @type {!Array<componentHandler.ComponentConfig>} */\n  var registeredComponents_ = [];\n\n  /** @type {!Array<componentHandler.Component>} */\n  var createdComponents_ = [];\n\n  var componentConfigProperty_ = 'mdlComponentConfigInternal_';\n\n  /**\n   * Searches registered components for a class we are interested in using.\n   * Optionally replaces a match with passed object if specified.\n   *\n   * @param {string} name The name of a class we want to use.\n   * @param {componentHandler.ComponentConfig=} optReplace Optional object to replace match with.\n   * @return {!Object|boolean} Registered components.\n   * @private\n   */\n  function findRegisteredClass_(name, optReplace) {\n    for (var i = 0; i < registeredComponents_.length; i++) {\n      if (registeredComponents_[i].className === name) {\n        if (typeof optReplace !== 'undefined') {\n          registeredComponents_[i] = optReplace;\n        }\n        return registeredComponents_[i];\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Returns an array of the classNames of the upgraded classes on the element.\n   *\n   * @param {!Element} element The element to fetch data from.\n   * @return {!Array<string>} Array of classNames.\n   * @private\n   */\n  function getUpgradedListOfElement_(element) {\n    var dataUpgraded = element.getAttribute('data-upgraded');\n    // Use `['']` as default value to conform the `,name,name...` style.\n    return dataUpgraded === null ? [''] : dataUpgraded.split(',');\n  }\n\n  /**\n   * Returns true if the given element has already been upgraded for the given\n   * class.\n   *\n   * @param {!Element} element The element we want to check.\n   * @param {string} jsClass The class to check for.\n   * @return {boolean} Whether the element is upgraded.\n   * @private\n   */\n  function isElementUpgraded_(element, jsClass) {\n    var upgradedList = getUpgradedListOfElement_(element);\n    return upgradedList.indexOf(jsClass) !== -1;\n  }\n\n  /**\n   * Searches existing DOM for elements of our component type and upgrades them\n   * if they have not already been upgraded.\n   *\n   * @param {string=} optJsClass the programatic name of the element class we\n   * need to create a new instance of.\n   * @param {string=} optCssClass the name of the CSS class elements of this\n   * type will have.\n   */\n  function upgradeDomInternal(optJsClass, optCssClass) {\n    if (typeof optJsClass === 'undefined' &&\n        typeof optCssClass === 'undefined') {\n      for (var i = 0; i < registeredComponents_.length; i++) {\n        upgradeDomInternal(registeredComponents_[i].className,\n            registeredComponents_[i].cssClass);\n      }\n    } else {\n      var jsClass = /** @type {string} */ (optJsClass);\n      if (typeof optCssClass === 'undefined') {\n        var registeredClass = findRegisteredClass_(jsClass);\n        if (registeredClass) {\n          optCssClass = registeredClass.cssClass;\n        }\n      }\n\n      var elements = document.querySelectorAll('.' + optCssClass);\n      for (var n = 0; n < elements.length; n++) {\n        upgradeElementInternal(elements[n], jsClass);\n      }\n    }\n  }\n\n  /**\n   * Upgrades a specific element rather than all in the DOM.\n   *\n   * @param {!Element} element The element we wish to upgrade.\n   * @param {string=} optJsClass Optional name of the class we want to upgrade\n   * the element to.\n   */\n  function upgradeElementInternal(element, optJsClass) {\n    // Verify argument type.\n    if (!(typeof element === 'object' && element instanceof Element)) {\n      throw new Error('Invalid argument provided to upgrade MDL element.');\n    }\n    var upgradedList = getUpgradedListOfElement_(element);\n    var classesToUpgrade = [];\n    // If jsClass is not provided scan the registered components to find the\n    // ones matching the element's CSS classList.\n    if (!optJsClass) {\n      var classList = element.classList;\n      registeredComponents_.forEach(function(component) {\n        // Match CSS & Not to be upgraded & Not upgraded.\n        if (classList.contains(component.cssClass) &&\n            classesToUpgrade.indexOf(component) === -1 &&\n            !isElementUpgraded_(element, component.className)) {\n          classesToUpgrade.push(component);\n        }\n      });\n    } else if (!isElementUpgraded_(element, optJsClass)) {\n      classesToUpgrade.push(findRegisteredClass_(optJsClass));\n    }\n\n    // Upgrade the element for each classes.\n    for (var i = 0, n = classesToUpgrade.length, registeredClass; i < n; i++) {\n      registeredClass = classesToUpgrade[i];\n      if (registeredClass) {\n        // Mark element as upgraded.\n        upgradedList.push(registeredClass.className);\n        element.setAttribute('data-upgraded', upgradedList.join(','));\n        var instance = new registeredClass.classConstructor(element); // eslint-disable-line\n        instance[componentConfigProperty_] = registeredClass;\n        createdComponents_.push(instance);\n        // Call any callbacks the user has registered with this component type.\n        for (var j = 0, m = registeredClass.callbacks.length; j < m; j++) {\n          registeredClass.callbacks[j](element);\n        }\n\n        if (registeredClass.widget) {\n          // Assign per element instance for control over API\n          element[registeredClass.className] = instance;\n        }\n      } else {\n        throw new Error(\n          'Unable to find a registered component for the given class.');\n      }\n\n      var ev;\n      if ('CustomEvent' in window && typeof window.CustomEvent === 'function') {\n        ev = new Event('mdl-componentupgraded', {\n          bubbles: true, cancelable: false\n        });\n      } else {\n        ev = document.createEvent('Events');\n        ev.initEvent('mdl-componentupgraded', true, true);\n      }\n      element.dispatchEvent(ev);\n    }\n  }\n\n  /**\n   * Upgrades a specific list of elements rather than all in the DOM.\n   *\n   * @param {!Element|!Array<!Element>|!NodeList|!HTMLCollection} elements\n   * The elements we wish to upgrade.\n   */\n  function upgradeElementsInternal(elements) {\n    if (!Array.isArray(elements)) {\n      if (typeof elements.item === 'function') {\n        elements = Array.prototype.slice.call(/** @type {Array} */ (elements));\n      } else {\n        elements = [elements];\n      }\n    }\n    for (var i = 0, n = elements.length, element; i < n; i++) {\n      element = elements[i];\n      if (element instanceof HTMLElement) {\n        upgradeElementInternal(element);\n        if (element.children.length > 0) {\n          upgradeElementsInternal(element.children);\n        }\n      }\n    }\n  }\n\n  /**\n   * Registers a class for future use and attempts to upgrade existing DOM.\n   *\n   * @param {componentHandler.ComponentConfigPublic} config The configuration.\n   */\n  function registerInternal(config) {\n    // In order to support both Closure-compiled and uncompiled code accessing\n    // this method, we need to allow for both the dot and array syntax for\n    // property access. You'll therefore see the `foo.bar || foo['bar']`\n    // pattern repeated across this method.\n    var widgetMissing = (typeof config.widget === 'undefined' &&\n        typeof config['widget'] === 'undefined');\n    var widget = true;\n\n    if (!widgetMissing) {\n      widget = config.widget || config['widget'];\n    }\n\n    var newConfig = /** @type {componentHandler.ComponentConfig} */ ({\n      classConstructor: config.constructor || config['constructor'],\n      className: config.classAsString || config['classAsString'],\n      cssClass: config.cssClass || config['cssClass'],\n      widget: widget,\n      callbacks: []\n    });\n\n    registeredComponents_.forEach(function(item) {\n      if (item.cssClass === newConfig.cssClass) {\n        throw new Error('The provided cssClass has already been registered: ' +\n            item.cssClass);\n      }\n      if (item.className === newConfig.className) {\n        throw new Error('The provided className has already been registered');\n      }\n    });\n\n    if (config.constructor.prototype\n        .hasOwnProperty(componentConfigProperty_)) {\n      throw new Error(\n          'MDL component classes must not have ' + componentConfigProperty_ +\n          ' defined as a property.');\n    }\n\n    var found = findRegisteredClass_(config.classAsString, newConfig);\n\n    if (!found) {\n      registeredComponents_.push(newConfig);\n    }\n  }\n\n  /**\n   * Allows user to be alerted to any upgrades that are performed for a given\n   * component type\n   *\n   * @param {string} jsClass The class name of the MDL component we wish\n   * to hook into for any upgrades performed.\n   * @param {function(!HTMLElement)} callback The function to call upon an\n   * upgrade. This function should expect 1 parameter - the HTMLElement which\n   * got upgraded.\n   */\n  function registerUpgradedCallbackInternal(jsClass, callback) {\n    var regClass = findRegisteredClass_(jsClass);\n    if (regClass) {\n      regClass.callbacks.push(callback);\n    }\n  }\n\n  /**\n   * Upgrades all registered components found in the current DOM. This is\n   * automatically called on window load.\n   */\n  function upgradeAllRegisteredInternal() {\n    for (var n = 0; n < registeredComponents_.length; n++) {\n      upgradeDomInternal(registeredComponents_[n].className);\n    }\n  }\n\n  /**\n   * Check the component for the downgrade method.\n   * Execute if found.\n   * Remove component from createdComponents list.\n   *\n   * @param {?componentHandler.Component} component The component to downgrade.\n   */\n  function deconstructComponentInternal(component) {\n    if (component) {\n      var componentIndex = createdComponents_.indexOf(component);\n      createdComponents_.splice(componentIndex, 1);\n\n      var upgrades =\n          component.element_.getAttribute('data-upgraded').split(',');\n      var componentPlace =\n          upgrades.indexOf(component[componentConfigProperty_].classAsString);\n      upgrades.splice(componentPlace, 1);\n      component.element_.setAttribute('data-upgraded', upgrades.join(','));\n\n      var ev;\n      if ('CustomEvent' in window && typeof window.CustomEvent === 'function') {\n        ev = new Event('mdl-componentdowngraded', {\n          bubbles: true, cancelable: false\n        });\n      } else {\n        ev = document.createEvent('Events');\n        ev.initEvent('mdl-componentdowngraded', true, true);\n      }\n    }\n  }\n\n  /**\n   * Downgrade either a given node, an array of nodes, or a NodeList.\n   *\n   * @param {!Node|!Array<!Node>|!NodeList} nodes The list of nodes.\n   */\n  function downgradeNodesInternal(nodes) {\n    /**\n     * Auxiliary function to downgrade a single node.\n     * @param  {!Node} node the node to be downgraded\n     */\n    var downgradeNode = function(node) {\n      createdComponents_.filter(function(item) {\n        return item.element_ === node;\n      }).forEach(deconstructComponentInternal);\n    };\n    if (nodes instanceof Array || nodes instanceof NodeList) {\n      for (var n = 0; n < nodes.length; n++) {\n        downgradeNode(nodes[n]);\n      }\n    } else if (nodes instanceof Node) {\n      downgradeNode(nodes);\n    } else {\n      throw new Error('Invalid argument provided to downgrade MDL nodes.');\n    }\n  }\n\n  // Now return the functions that should be made public with their publicly\n  // facing names...\n  return {\n    upgradeDom: upgradeDomInternal,\n    upgradeElement: upgradeElementInternal,\n    upgradeElements: upgradeElementsInternal,\n    upgradeAllRegistered: upgradeAllRegisteredInternal,\n    registerUpgradedCallback: registerUpgradedCallbackInternal,\n    register: registerInternal,\n    downgradeElements: downgradeNodesInternal\n  };\n})();\n\n/**\n * Describes the type of a registered component type managed by\n * componentHandler. Provided for benefit of the Closure compiler.\n *\n * @typedef {{\n *   constructor: Function,\n *   classAsString: string,\n *   cssClass: string,\n *   widget: (string|boolean|undefined)\n * }}\n */\ncomponentHandler.ComponentConfigPublic; // eslint-disable-line\n\n/**\n * Describes the type of a registered component type managed by\n * componentHandler. Provided for benefit of the Closure compiler.\n *\n * @typedef {{\n *   constructor: !Function,\n *   className: string,\n *   cssClass: string,\n *   widget: (string|boolean),\n *   callbacks: !Array<function(!HTMLElement)>\n * }}\n */\ncomponentHandler.ComponentConfig; // eslint-disable-line\n\n/**\n * Created component (i.e., upgraded element) type as managed by\n * componentHandler. Provided for benefit of the Closure compiler.\n *\n * @typedef {{\n *   element_: !HTMLElement,\n *   className: string,\n *   classAsString: string,\n *   cssClass: string,\n *   widget: string\n * }}\n */\ncomponentHandler.Component; // eslint-disable-line\n\n// Export all symbols, for the benefit of Closure compiler.\n// No effect on uncompiled code.\ncomponentHandler['upgradeDom'] = componentHandler.upgradeDom;\ncomponentHandler['upgradeElement'] = componentHandler.upgradeElement;\ncomponentHandler['upgradeElements'] = componentHandler.upgradeElements;\ncomponentHandler['upgradeAllRegistered'] =\n    componentHandler.upgradeAllRegistered;\ncomponentHandler['registerUpgradedCallback'] =\n    componentHandler.registerUpgradedCallback;\ncomponentHandler['register'] = componentHandler.register;\ncomponentHandler['downgradeElements'] = componentHandler.downgradeElements;\nwindow.componentHandler = componentHandler;\nwindow['componentHandler'] = componentHandler;\n\nwindow.addEventListener('load', function() {\n  'use strict';\n\n  /**\n   * Performs a \"Cutting the mustard\" test. If the browser supports the features\n   * tested, adds a mdl-js class to the <html> element. It then upgrades all MDL\n   * components requiring JavaScript.\n   */\n  if (\n      'classList' in document.documentElement &&\n      'querySelector' in document &&\n      'addEventListener' in window &&\n      'forEach' in Array.prototype) {\n    document.documentElement.classList.add('mdl-js');\n    componentHandler.upgradeAllRegistered();\n  } else {\n    /**\n     * Dummy function to avoid JS errors.\n     */\n    componentHandler.upgradeElement = function() {};\n    /**\n     * Dummy function to avoid JS errors.\n     */\n    componentHandler.register = function() {};\n  }\n});\n","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Tabs MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {Element} element The element that will be upgraded.\n   */\nvar MaterialTabs = function MaterialTabs(element) {\n    // Stores the HTML element.\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialTabs'] = MaterialTabs;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialTabs.prototype.Constant_ = {};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialTabs.prototype.CssClasses_ = {\n    TAB_CLASS: 'mdl-tabs__tab',\n    PANEL_CLASS: 'mdl-tabs__panel',\n    ACTIVE_CLASS: 'is-active',\n    UPGRADED_CLASS: 'is-upgraded',\n    MDL_JS_RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    MDL_RIPPLE_CONTAINER: 'mdl-tabs__ripple-container',\n    MDL_RIPPLE: 'mdl-ripple',\n    MDL_JS_RIPPLE_EFFECT_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events'\n};\n/**\n   * Handle clicks to a tabs component\n   *\n   * @private\n   */\nMaterialTabs.prototype.initTabs_ = function () {\n    if (this.element_.classList.contains(this.CssClasses_.MDL_JS_RIPPLE_EFFECT)) {\n        this.element_.classList.add(this.CssClasses_.MDL_JS_RIPPLE_EFFECT_IGNORE_EVENTS);\n    }\n    // Select element tabs, document panels\n    this.tabs_ = this.element_.querySelectorAll('.' + this.CssClasses_.TAB_CLASS);\n    this.panels_ = this.element_.querySelectorAll('.' + this.CssClasses_.PANEL_CLASS);\n    // Create new tabs for each tab element\n    for (var i = 0; i < this.tabs_.length; i++) {\n        new MaterialTab(this.tabs_[i], this);\n    }\n    this.element_.classList.add(this.CssClasses_.UPGRADED_CLASS);\n};\n/**\n   * Reset tab state, dropping active classes\n   *\n   * @private\n   */\nMaterialTabs.prototype.resetTabState_ = function () {\n    for (var k = 0; k < this.tabs_.length; k++) {\n        this.tabs_[k].classList.remove(this.CssClasses_.ACTIVE_CLASS);\n    }\n};\n/**\n   * Reset panel state, droping active classes\n   *\n   * @private\n   */\nMaterialTabs.prototype.resetPanelState_ = function () {\n    for (var j = 0; j < this.panels_.length; j++) {\n        this.panels_[j].classList.remove(this.CssClasses_.ACTIVE_CLASS);\n    }\n};\n/**\n   * Initialize element.\n   */\nMaterialTabs.prototype.init = function () {\n    if (this.element_) {\n        this.initTabs_();\n    }\n};\n/**\n   * Constructor for an individual tab.\n   *\n   * @constructor\n   * @param {Element} tab The HTML element for the tab.\n   * @param {MaterialTabs} ctx The MaterialTabs object that owns the tab.\n   */\nfunction MaterialTab(tab, ctx) {\n    if (tab) {\n        if (ctx.element_.classList.contains(ctx.CssClasses_.MDL_JS_RIPPLE_EFFECT)) {\n            var rippleContainer = document.createElement('span');\n            rippleContainer.classList.add(ctx.CssClasses_.MDL_RIPPLE_CONTAINER);\n            rippleContainer.classList.add(ctx.CssClasses_.MDL_JS_RIPPLE_EFFECT);\n            var ripple = document.createElement('span');\n            ripple.classList.add(ctx.CssClasses_.MDL_RIPPLE);\n            rippleContainer.appendChild(ripple);\n            tab.appendChild(rippleContainer);\n        }\n        tab.addEventListener('click', function (e) {\n            e.preventDefault();\n            var href = tab.href.split('#')[1];\n            var panel = ctx.element_.querySelector('#' + href);\n            ctx.resetTabState_();\n            ctx.resetPanelState_();\n            tab.classList.add(ctx.CssClasses_.ACTIVE_CLASS);\n            panel.classList.add(ctx.CssClasses_.ACTIVE_CLASS);\n        });\n    }\n}\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialTabs,\n    classAsString: 'MaterialTabs',\n    cssClass: 'mdl-js-tabs'\n});","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Layout MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialLayout = function MaterialLayout(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialLayout'] = MaterialLayout;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialLayout.prototype.Constant_ = {\n    MAX_WIDTH: '(max-width: 1024px)',\n    TAB_SCROLL_PIXELS: 100,\n    RESIZE_TIMEOUT: 100,\n    MENU_ICON: '&#xE5D2;',\n    CHEVRON_LEFT: 'chevron_left',\n    CHEVRON_RIGHT: 'chevron_right'\n};\n/**\n   * Keycodes, for code readability.\n   *\n   * @enum {number}\n   * @private\n   */\nMaterialLayout.prototype.Keycodes_ = {\n    ENTER: 13,\n    ESCAPE: 27,\n    SPACE: 32\n};\n/**\n   * Modes.\n   *\n   * @enum {number}\n   * @private\n   */\nMaterialLayout.prototype.Mode_ = {\n    STANDARD: 0,\n    SEAMED: 1,\n    WATERFALL: 2,\n    SCROLL: 3\n};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialLayout.prototype.CssClasses_ = {\n    CONTAINER: 'mdl-layout__container',\n    HEADER: 'mdl-layout__header',\n    DRAWER: 'mdl-layout__drawer',\n    CONTENT: 'mdl-layout__content',\n    DRAWER_BTN: 'mdl-layout__drawer-button',\n    ICON: 'material-icons',\n    JS_RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_CONTAINER: 'mdl-layout__tab-ripple-container',\n    RIPPLE: 'mdl-ripple',\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    HEADER_SEAMED: 'mdl-layout__header--seamed',\n    HEADER_WATERFALL: 'mdl-layout__header--waterfall',\n    HEADER_SCROLL: 'mdl-layout__header--scroll',\n    FIXED_HEADER: 'mdl-layout--fixed-header',\n    OBFUSCATOR: 'mdl-layout__obfuscator',\n    TAB_BAR: 'mdl-layout__tab-bar',\n    TAB_CONTAINER: 'mdl-layout__tab-bar-container',\n    TAB: 'mdl-layout__tab',\n    TAB_BAR_BUTTON: 'mdl-layout__tab-bar-button',\n    TAB_BAR_LEFT_BUTTON: 'mdl-layout__tab-bar-left-button',\n    TAB_BAR_RIGHT_BUTTON: 'mdl-layout__tab-bar-right-button',\n    PANEL: 'mdl-layout__tab-panel',\n    HAS_DRAWER: 'has-drawer',\n    HAS_TABS: 'has-tabs',\n    HAS_SCROLLING_HEADER: 'has-scrolling-header',\n    CASTING_SHADOW: 'is-casting-shadow',\n    IS_COMPACT: 'is-compact',\n    IS_SMALL_SCREEN: 'is-small-screen',\n    IS_DRAWER_OPEN: 'is-visible',\n    IS_ACTIVE: 'is-active',\n    IS_UPGRADED: 'is-upgraded',\n    IS_ANIMATING: 'is-animating',\n    ON_LARGE_SCREEN: 'mdl-layout--large-screen-only',\n    ON_SMALL_SCREEN: 'mdl-layout--small-screen-only'\n};\n/**\n   * Handles scrolling on the content.\n   *\n   * @private\n   */\nMaterialLayout.prototype.contentScrollHandler_ = function () {\n    if (this.header_.classList.contains(this.CssClasses_.IS_ANIMATING)) {\n        return;\n    }\n    var headerVisible = !this.element_.classList.contains(this.CssClasses_.IS_SMALL_SCREEN) || this.element_.classList.contains(this.CssClasses_.FIXED_HEADER);\n    if (this.content_.scrollTop > 0 && !this.header_.classList.contains(this.CssClasses_.IS_COMPACT)) {\n        this.header_.classList.add(this.CssClasses_.CASTING_SHADOW);\n        this.header_.classList.add(this.CssClasses_.IS_COMPACT);\n        if (headerVisible) {\n            this.header_.classList.add(this.CssClasses_.IS_ANIMATING);\n        }\n    } else if (this.content_.scrollTop <= 0 && this.header_.classList.contains(this.CssClasses_.IS_COMPACT)) {\n        this.header_.classList.remove(this.CssClasses_.CASTING_SHADOW);\n        this.header_.classList.remove(this.CssClasses_.IS_COMPACT);\n        if (headerVisible) {\n            this.header_.classList.add(this.CssClasses_.IS_ANIMATING);\n        }\n    }\n};\n/**\n   * Handles a keyboard event on the drawer.\n   *\n   * @param {Event} evt The event that fired.\n   * @private\n   */\nMaterialLayout.prototype.keyboardEventHandler_ = function (evt) {\n    // Only react when the drawer is open.\n    if (evt.keyCode === this.Keycodes_.ESCAPE && this.drawer_.classList.contains(this.CssClasses_.IS_DRAWER_OPEN)) {\n        this.toggleDrawer();\n    }\n};\n/**\n   * Handles changes in screen size.\n   *\n   * @private\n   */\nMaterialLayout.prototype.screenSizeHandler_ = function () {\n    if (this.screenSizeMediaQuery_.matches) {\n        this.element_.classList.add(this.CssClasses_.IS_SMALL_SCREEN);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_SMALL_SCREEN);\n        // Collapse drawer (if any) when moving to a large screen size.\n        if (this.drawer_) {\n            this.drawer_.classList.remove(this.CssClasses_.IS_DRAWER_OPEN);\n            this.obfuscator_.classList.remove(this.CssClasses_.IS_DRAWER_OPEN);\n        }\n    }\n};\n/**\n   * Handles events of drawer button.\n   *\n   * @param {Event} evt The event that fired.\n   * @private\n   */\nMaterialLayout.prototype.drawerToggleHandler_ = function (evt) {\n    if (evt && evt.type === 'keydown') {\n        if (evt.keyCode === this.Keycodes_.SPACE || evt.keyCode === this.Keycodes_.ENTER) {\n            // prevent scrolling in drawer nav\n            evt.preventDefault();\n        } else {\n            // prevent other keys\n            return;\n        }\n    }\n    this.toggleDrawer();\n};\n/**\n   * Handles (un)setting the `is-animating` class\n   *\n   * @private\n   */\nMaterialLayout.prototype.headerTransitionEndHandler_ = function () {\n    this.header_.classList.remove(this.CssClasses_.IS_ANIMATING);\n};\n/**\n   * Handles expanding the header on click\n   *\n   * @private\n   */\nMaterialLayout.prototype.headerClickHandler_ = function () {\n    if (this.header_.classList.contains(this.CssClasses_.IS_COMPACT)) {\n        this.header_.classList.remove(this.CssClasses_.IS_COMPACT);\n        this.header_.classList.add(this.CssClasses_.IS_ANIMATING);\n    }\n};\n/**\n   * Reset tab state, dropping active classes\n   *\n   * @param {NodeList} tabs The tabs to reset.\n   * @private\n   */\nMaterialLayout.prototype.resetTabState_ = function (tabs) {\n    for (var k = 0; k < tabs.length; k++) {\n        tabs[k].classList.remove(this.CssClasses_.IS_ACTIVE);\n    }\n};\n/**\n   * Reset panel state, droping active classes\n   *\n   * @param {NodeList} panels The panels to reset.\n   * @private\n   */\nMaterialLayout.prototype.resetPanelState_ = function (panels) {\n    for (var j = 0; j < panels.length; j++) {\n        panels[j].classList.remove(this.CssClasses_.IS_ACTIVE);\n    }\n};\n/**\n  * Toggle drawer state\n  *\n  * @public\n  */\nMaterialLayout.prototype.toggleDrawer = function () {\n    var drawerButton = this.element_.querySelector('.' + this.CssClasses_.DRAWER_BTN);\n    this.drawer_.classList.toggle(this.CssClasses_.IS_DRAWER_OPEN);\n    this.obfuscator_.classList.toggle(this.CssClasses_.IS_DRAWER_OPEN);\n    // Set accessibility properties.\n    if (this.drawer_.classList.contains(this.CssClasses_.IS_DRAWER_OPEN)) {\n        this.drawer_.setAttribute('aria-hidden', 'false');\n        drawerButton.setAttribute('aria-expanded', 'true');\n    } else {\n        this.drawer_.setAttribute('aria-hidden', 'true');\n        drawerButton.setAttribute('aria-expanded', 'false');\n    }\n};\nMaterialLayout.prototype['toggleDrawer'] = MaterialLayout.prototype.toggleDrawer;\n/**\n   * Initialize element.\n   */\nMaterialLayout.prototype.init = function () {\n    if (this.element_) {\n        var container = document.createElement('div');\n        container.classList.add(this.CssClasses_.CONTAINER);\n        var focusedElement = this.element_.querySelector(':focus');\n        this.element_.parentElement.insertBefore(container, this.element_);\n        this.element_.parentElement.removeChild(this.element_);\n        container.appendChild(this.element_);\n        if (focusedElement) {\n            focusedElement.focus();\n        }\n        var directChildren = this.element_.childNodes;\n        var numChildren = directChildren.length;\n        for (var c = 0; c < numChildren; c++) {\n            var child = directChildren[c];\n            if (child.classList && child.classList.contains(this.CssClasses_.HEADER)) {\n                this.header_ = child;\n            }\n            if (child.classList && child.classList.contains(this.CssClasses_.DRAWER)) {\n                this.drawer_ = child;\n            }\n            if (child.classList && child.classList.contains(this.CssClasses_.CONTENT)) {\n                this.content_ = child;\n            }\n        }\n        window.addEventListener('pageshow', function (e) {\n            if (e.persisted) {\n                // when page is loaded from back/forward cache\n                // trigger repaint to let layout scroll in safari\n                this.element_.style.overflowY = 'hidden';\n                requestAnimationFrame(function () {\n                    this.element_.style.overflowY = '';\n                }.bind(this));\n            }\n        }.bind(this), false);\n        if (this.header_) {\n            this.tabBar_ = this.header_.querySelector('.' + this.CssClasses_.TAB_BAR);\n        }\n        var mode = this.Mode_.STANDARD;\n        if (this.header_) {\n            if (this.header_.classList.contains(this.CssClasses_.HEADER_SEAMED)) {\n                mode = this.Mode_.SEAMED;\n            } else if (this.header_.classList.contains(this.CssClasses_.HEADER_WATERFALL)) {\n                mode = this.Mode_.WATERFALL;\n                this.header_.addEventListener('transitionend', this.headerTransitionEndHandler_.bind(this));\n                this.header_.addEventListener('click', this.headerClickHandler_.bind(this));\n            } else if (this.header_.classList.contains(this.CssClasses_.HEADER_SCROLL)) {\n                mode = this.Mode_.SCROLL;\n                container.classList.add(this.CssClasses_.HAS_SCROLLING_HEADER);\n            }\n            if (mode === this.Mode_.STANDARD) {\n                this.header_.classList.add(this.CssClasses_.CASTING_SHADOW);\n                if (this.tabBar_) {\n                    this.tabBar_.classList.add(this.CssClasses_.CASTING_SHADOW);\n                }\n            } else if (mode === this.Mode_.SEAMED || mode === this.Mode_.SCROLL) {\n                this.header_.classList.remove(this.CssClasses_.CASTING_SHADOW);\n                if (this.tabBar_) {\n                    this.tabBar_.classList.remove(this.CssClasses_.CASTING_SHADOW);\n                }\n            } else if (mode === this.Mode_.WATERFALL) {\n                // Add and remove shadows depending on scroll position.\n                // Also add/remove auxiliary class for styling of the compact version of\n                // the header.\n                this.content_.addEventListener('scroll', this.contentScrollHandler_.bind(this));\n                this.contentScrollHandler_();\n            }\n        }\n        // Add drawer toggling button to our layout, if we have an openable drawer.\n        if (this.drawer_) {\n            var drawerButton = this.element_.querySelector('.' + this.CssClasses_.DRAWER_BTN);\n            if (!drawerButton) {\n                drawerButton = document.createElement('div');\n                drawerButton.setAttribute('aria-expanded', 'false');\n                drawerButton.setAttribute('role', 'button');\n                drawerButton.setAttribute('tabindex', '0');\n                drawerButton.classList.add(this.CssClasses_.DRAWER_BTN);\n                var drawerButtonIcon = document.createElement('i');\n                drawerButtonIcon.classList.add(this.CssClasses_.ICON);\n                drawerButtonIcon.innerHTML = this.Constant_.MENU_ICON;\n                drawerButton.appendChild(drawerButtonIcon);\n            }\n            if (this.drawer_.classList.contains(this.CssClasses_.ON_LARGE_SCREEN)) {\n                // If drawer has ON_LARGE_SCREEN class then add it to the drawer toggle button as well.\n                drawerButton.classList.add(this.CssClasses_.ON_LARGE_SCREEN);\n            } else if (this.drawer_.classList.contains(this.CssClasses_.ON_SMALL_SCREEN)) {\n                // If drawer has ON_SMALL_SCREEN class then add it to the drawer toggle button as well.\n                drawerButton.classList.add(this.CssClasses_.ON_SMALL_SCREEN);\n            }\n            drawerButton.addEventListener('click', this.drawerToggleHandler_.bind(this));\n            drawerButton.addEventListener('keydown', this.drawerToggleHandler_.bind(this));\n            // Add a class if the layout has a drawer, for altering the left padding.\n            // Adds the HAS_DRAWER to the elements since this.header_ may or may\n            // not be present.\n            this.element_.classList.add(this.CssClasses_.HAS_DRAWER);\n            // If we have a fixed header, add the button to the header rather than\n            // the layout.\n            if (this.element_.classList.contains(this.CssClasses_.FIXED_HEADER)) {\n                this.header_.insertBefore(drawerButton, this.header_.firstChild);\n            } else {\n                this.element_.insertBefore(drawerButton, this.content_);\n            }\n            var obfuscator = document.createElement('div');\n            obfuscator.classList.add(this.CssClasses_.OBFUSCATOR);\n            this.element_.appendChild(obfuscator);\n            obfuscator.addEventListener('click', this.drawerToggleHandler_.bind(this));\n            this.obfuscator_ = obfuscator;\n            this.drawer_.addEventListener('keydown', this.keyboardEventHandler_.bind(this));\n            this.drawer_.setAttribute('aria-hidden', 'true');\n        }\n        // Keep an eye on screen size, and add/remove auxiliary class for styling\n        // of small screens.\n        this.screenSizeMediaQuery_ = window.matchMedia(this.Constant_.MAX_WIDTH);\n        this.screenSizeMediaQuery_.addListener(this.screenSizeHandler_.bind(this));\n        this.screenSizeHandler_();\n        // Initialize tabs, if any.\n        if (this.header_ && this.tabBar_) {\n            this.element_.classList.add(this.CssClasses_.HAS_TABS);\n            var tabContainer = document.createElement('div');\n            tabContainer.classList.add(this.CssClasses_.TAB_CONTAINER);\n            this.header_.insertBefore(tabContainer, this.tabBar_);\n            this.header_.removeChild(this.tabBar_);\n            var leftButton = document.createElement('div');\n            leftButton.classList.add(this.CssClasses_.TAB_BAR_BUTTON);\n            leftButton.classList.add(this.CssClasses_.TAB_BAR_LEFT_BUTTON);\n            var leftButtonIcon = document.createElement('i');\n            leftButtonIcon.classList.add(this.CssClasses_.ICON);\n            leftButtonIcon.textContent = this.Constant_.CHEVRON_LEFT;\n            leftButton.appendChild(leftButtonIcon);\n            leftButton.addEventListener('click', function () {\n                this.tabBar_.scrollLeft -= this.Constant_.TAB_SCROLL_PIXELS;\n            }.bind(this));\n            var rightButton = document.createElement('div');\n            rightButton.classList.add(this.CssClasses_.TAB_BAR_BUTTON);\n            rightButton.classList.add(this.CssClasses_.TAB_BAR_RIGHT_BUTTON);\n            var rightButtonIcon = document.createElement('i');\n            rightButtonIcon.classList.add(this.CssClasses_.ICON);\n            rightButtonIcon.textContent = this.Constant_.CHEVRON_RIGHT;\n            rightButton.appendChild(rightButtonIcon);\n            rightButton.addEventListener('click', function () {\n                this.tabBar_.scrollLeft += this.Constant_.TAB_SCROLL_PIXELS;\n            }.bind(this));\n            tabContainer.appendChild(leftButton);\n            tabContainer.appendChild(this.tabBar_);\n            tabContainer.appendChild(rightButton);\n            // Add and remove tab buttons depending on scroll position and total\n            // window size.\n            var tabUpdateHandler = function () {\n                if (this.tabBar_.scrollLeft > 0) {\n                    leftButton.classList.add(this.CssClasses_.IS_ACTIVE);\n                } else {\n                    leftButton.classList.remove(this.CssClasses_.IS_ACTIVE);\n                }\n                if (this.tabBar_.scrollLeft < this.tabBar_.scrollWidth - this.tabBar_.offsetWidth) {\n                    rightButton.classList.add(this.CssClasses_.IS_ACTIVE);\n                } else {\n                    rightButton.classList.remove(this.CssClasses_.IS_ACTIVE);\n                }\n            }.bind(this);\n            this.tabBar_.addEventListener('scroll', tabUpdateHandler);\n            tabUpdateHandler();\n            // Update tabs when the window resizes.\n            var windowResizeHandler = function () {\n                // Use timeouts to make sure it doesn't happen too often.\n                if (this.resizeTimeoutId_) {\n                    clearTimeout(this.resizeTimeoutId_);\n                }\n                this.resizeTimeoutId_ = setTimeout(function () {\n                    tabUpdateHandler();\n                    this.resizeTimeoutId_ = null;\n                }.bind(this), this.Constant_.RESIZE_TIMEOUT);\n            }.bind(this);\n            window.addEventListener('resize', windowResizeHandler);\n            if (this.tabBar_.classList.contains(this.CssClasses_.JS_RIPPLE_EFFECT)) {\n                this.tabBar_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\n            }\n            // Select element tabs, document panels\n            var tabs = this.tabBar_.querySelectorAll('.' + this.CssClasses_.TAB);\n            var panels = this.content_.querySelectorAll('.' + this.CssClasses_.PANEL);\n            // Create new tabs for each tab element\n            for (var i = 0; i < tabs.length; i++) {\n                new MaterialLayoutTab(tabs[i], tabs, panels, this);\n            }\n        }\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n    }\n};\n/**\n   * Constructor for an individual tab.\n   *\n   * @constructor\n   * @param {HTMLElement} tab The HTML element for the tab.\n   * @param {!NodeList} tabs Array with HTML elements for all tabs.\n   * @param {!NodeList} panels Array with HTML elements for all panels.\n   * @param {MaterialLayout} layout The MaterialLayout object that owns the tab.\n   */\nfunction MaterialLayoutTab(tab, tabs, panels, layout) {\n    /**\n     * Auxiliary method to programmatically select a tab in the UI.\n     */\n    function selectTab() {\n        var href = tab.href.split('#')[1];\n        var panel = layout.content_.querySelector('#' + href);\n        layout.resetTabState_(tabs);\n        layout.resetPanelState_(panels);\n        tab.classList.add(layout.CssClasses_.IS_ACTIVE);\n        panel.classList.add(layout.CssClasses_.IS_ACTIVE);\n    }\n    if (layout.tabBar_.classList.contains(layout.CssClasses_.JS_RIPPLE_EFFECT)) {\n        var rippleContainer = document.createElement('span');\n        rippleContainer.classList.add(layout.CssClasses_.RIPPLE_CONTAINER);\n        rippleContainer.classList.add(layout.CssClasses_.JS_RIPPLE_EFFECT);\n        var ripple = document.createElement('span');\n        ripple.classList.add(layout.CssClasses_.RIPPLE);\n        rippleContainer.appendChild(ripple);\n        tab.appendChild(rippleContainer);\n    }\n    tab.addEventListener('click', function (e) {\n        if (tab.getAttribute('href').charAt(0) === '#') {\n            e.preventDefault();\n            selectTab();\n        }\n    });\n    tab.show = selectTab;\n}\nwindow['MaterialLayoutTab'] = MaterialLayoutTab;\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialLayout,\n    classAsString: 'MaterialLayout',\n    cssClass: 'mdl-js-layout'\n});","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Button MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialButton = function MaterialButton(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialButton'] = MaterialButton;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialButton.prototype.Constant_ = {};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialButton.prototype.CssClasses_ = {\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_CONTAINER: 'mdl-button__ripple-container',\n    RIPPLE: 'mdl-ripple'\n};\n/**\n   * Handle blur of element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialButton.prototype.blurHandler_ = function (event) {\n    if (event) {\n        this.element_.blur();\n    }\n};\n// Public methods.\n/**\n   * Disable button.\n   *\n   * @public\n   */\nMaterialButton.prototype.disable = function () {\n    this.element_.disabled = true;\n};\nMaterialButton.prototype['disable'] = MaterialButton.prototype.disable;\n/**\n   * Enable button.\n   *\n   * @public\n   */\nMaterialButton.prototype.enable = function () {\n    this.element_.disabled = false;\n};\nMaterialButton.prototype['enable'] = MaterialButton.prototype.enable;\n/**\n   * Initialize element.\n   */\nMaterialButton.prototype.init = function () {\n    if (this.element_) {\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {\n            var rippleContainer = document.createElement('span');\n            rippleContainer.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\n            this.rippleElement_ = document.createElement('span');\n            this.rippleElement_.classList.add(this.CssClasses_.RIPPLE);\n            rippleContainer.appendChild(this.rippleElement_);\n            this.boundRippleBlurHandler = this.blurHandler_.bind(this);\n            this.rippleElement_.addEventListener('mouseup', this.boundRippleBlurHandler);\n            this.element_.appendChild(rippleContainer);\n        }\n        this.boundButtonBlurHandler = this.blurHandler_.bind(this);\n        this.element_.addEventListener('mouseup', this.boundButtonBlurHandler);\n        this.element_.addEventListener('mouseleave', this.boundButtonBlurHandler);\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialButton,\n    classAsString: 'MaterialButton',\n    cssClass: 'mdl-js-button',\n    widget: true\n});","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Checkbox MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialCheckbox = function MaterialCheckbox(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialCheckbox'] = MaterialCheckbox;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialCheckbox.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialCheckbox.prototype.CssClasses_ = {\n    INPUT: 'mdl-checkbox__input',\n    BOX_OUTLINE: 'mdl-checkbox__box-outline',\n    FOCUS_HELPER: 'mdl-checkbox__focus-helper',\n    TICK_OUTLINE: 'mdl-checkbox__tick-outline',\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE_CONTAINER: 'mdl-checkbox__ripple-container',\n    RIPPLE_CENTER: 'mdl-ripple--center',\n    RIPPLE: 'mdl-ripple',\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_CHECKED: 'is-checked',\n    IS_UPGRADED: 'is-upgraded'\n};\n/**\n   * Handle change of state.\n   *\n   * @private\n   */\nMaterialCheckbox.prototype.onChange_ = function () {\n    this.updateClasses_();\n};\n/**\n   * Handle focus of element.\n   *\n   * @private\n   */\nMaterialCheckbox.prototype.onFocus_ = function () {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle lost focus of element.\n   *\n   * @private\n   */\nMaterialCheckbox.prototype.onBlur_ = function () {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle mouseup.\n   *\n   * @private\n   */\nMaterialCheckbox.prototype.onMouseUp_ = function () {\n    this.blur_();\n};\n/**\n   * Handle class updates.\n   *\n   * @private\n   */\nMaterialCheckbox.prototype.updateClasses_ = function () {\n    this.checkDisabled();\n    this.checkToggleState();\n};\n/**\n   * Add blur.\n   *\n   * @private\n   */\nMaterialCheckbox.prototype.blur_ = function () {\n    // TODO: figure out why there's a focus event being fired after our blur,\n    // so that we can avoid this hack.\n    window.setTimeout(function () {\n        this.inputElement_.blur();\n    }.bind(this), this.Constant_.TINY_TIMEOUT);\n};\n// Public methods.\n/**\n   * Check the inputs toggle state and update display.\n   *\n   * @public\n   */\nMaterialCheckbox.prototype.checkToggleState = function () {\n    if (this.inputElement_.checked) {\n        this.element_.classList.add(this.CssClasses_.IS_CHECKED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);\n    }\n};\nMaterialCheckbox.prototype['checkToggleState'] = MaterialCheckbox.prototype.checkToggleState;\n/**\n   * Check the inputs disabled state and update display.\n   *\n   * @public\n   */\nMaterialCheckbox.prototype.checkDisabled = function () {\n    if (this.inputElement_.disabled) {\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n};\nMaterialCheckbox.prototype['checkDisabled'] = MaterialCheckbox.prototype.checkDisabled;\n/**\n   * Disable checkbox.\n   *\n   * @public\n   */\nMaterialCheckbox.prototype.disable = function () {\n    this.inputElement_.disabled = true;\n    this.updateClasses_();\n};\nMaterialCheckbox.prototype['disable'] = MaterialCheckbox.prototype.disable;\n/**\n   * Enable checkbox.\n   *\n   * @public\n   */\nMaterialCheckbox.prototype.enable = function () {\n    this.inputElement_.disabled = false;\n    this.updateClasses_();\n};\nMaterialCheckbox.prototype['enable'] = MaterialCheckbox.prototype.enable;\n/**\n   * Check checkbox.\n   *\n   * @public\n   */\nMaterialCheckbox.prototype.check = function () {\n    this.inputElement_.checked = true;\n    this.updateClasses_();\n};\nMaterialCheckbox.prototype['check'] = MaterialCheckbox.prototype.check;\n/**\n   * Uncheck checkbox.\n   *\n   * @public\n   */\nMaterialCheckbox.prototype.uncheck = function () {\n    this.inputElement_.checked = false;\n    this.updateClasses_();\n};\nMaterialCheckbox.prototype['uncheck'] = MaterialCheckbox.prototype.uncheck;\n/**\n   * Initialize element.\n   */\nMaterialCheckbox.prototype.init = function () {\n    if (this.element_) {\n        this.inputElement_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);\n        var boxOutline = document.createElement('span');\n        boxOutline.classList.add(this.CssClasses_.BOX_OUTLINE);\n        var tickContainer = document.createElement('span');\n        tickContainer.classList.add(this.CssClasses_.FOCUS_HELPER);\n        var tickOutline = document.createElement('span');\n        tickOutline.classList.add(this.CssClasses_.TICK_OUTLINE);\n        boxOutline.appendChild(tickOutline);\n        this.element_.appendChild(tickContainer);\n        this.element_.appendChild(boxOutline);\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\n            this.rippleContainerElement_ = document.createElement('span');\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_EFFECT);\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER);\n            this.boundRippleMouseUp = this.onMouseUp_.bind(this);\n            this.rippleContainerElement_.addEventListener('mouseup', this.boundRippleMouseUp);\n            var ripple = document.createElement('span');\n            ripple.classList.add(this.CssClasses_.RIPPLE);\n            this.rippleContainerElement_.appendChild(ripple);\n            this.element_.appendChild(this.rippleContainerElement_);\n        }\n        this.boundInputOnChange = this.onChange_.bind(this);\n        this.boundInputOnFocus = this.onFocus_.bind(this);\n        this.boundInputOnBlur = this.onBlur_.bind(this);\n        this.boundElementMouseUp = this.onMouseUp_.bind(this);\n        this.inputElement_.addEventListener('change', this.boundInputOnChange);\n        this.inputElement_.addEventListener('focus', this.boundInputOnFocus);\n        this.inputElement_.addEventListener('blur', this.boundInputOnBlur);\n        this.element_.addEventListener('mouseup', this.boundElementMouseUp);\n        this.updateClasses_();\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialCheckbox,\n    classAsString: 'MaterialCheckbox',\n    cssClass: 'mdl-js-checkbox',\n    widget: true\n});","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for icon toggle MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialIconToggle = function MaterialIconToggle(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialIconToggle'] = MaterialIconToggle;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialIconToggle.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialIconToggle.prototype.CssClasses_ = {\n    INPUT: 'mdl-icon-toggle__input',\n    JS_RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE_CONTAINER: 'mdl-icon-toggle__ripple-container',\n    RIPPLE_CENTER: 'mdl-ripple--center',\n    RIPPLE: 'mdl-ripple',\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_CHECKED: 'is-checked'\n};\n/**\n   * Handle change of state.\n   *\n   * @private\n   */\nMaterialIconToggle.prototype.onChange_ = function () {\n    this.updateClasses_();\n};\n/**\n   * Handle focus of element.\n   *\n   * @private\n   */\nMaterialIconToggle.prototype.onFocus_ = function () {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle lost focus of element.\n   *\n   * @private\n   */\nMaterialIconToggle.prototype.onBlur_ = function () {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle mouseup.\n   *\n   * @private\n   */\nMaterialIconToggle.prototype.onMouseUp_ = function () {\n    this.blur_();\n};\n/**\n   * Handle class updates.\n   *\n   * @private\n   */\nMaterialIconToggle.prototype.updateClasses_ = function () {\n    this.checkDisabled();\n    this.checkToggleState();\n};\n/**\n   * Add blur.\n   *\n   * @private\n   */\nMaterialIconToggle.prototype.blur_ = function () {\n    // TODO: figure out why there's a focus event being fired after our blur,\n    // so that we can avoid this hack.\n    window.setTimeout(function () {\n        this.inputElement_.blur();\n    }.bind(this), this.Constant_.TINY_TIMEOUT);\n};\n// Public methods.\n/**\n   * Check the inputs toggle state and update display.\n   *\n   * @public\n   */\nMaterialIconToggle.prototype.checkToggleState = function () {\n    if (this.inputElement_.checked) {\n        this.element_.classList.add(this.CssClasses_.IS_CHECKED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);\n    }\n};\nMaterialIconToggle.prototype['checkToggleState'] = MaterialIconToggle.prototype.checkToggleState;\n/**\n   * Check the inputs disabled state and update display.\n   *\n   * @public\n   */\nMaterialIconToggle.prototype.checkDisabled = function () {\n    if (this.inputElement_.disabled) {\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n};\nMaterialIconToggle.prototype['checkDisabled'] = MaterialIconToggle.prototype.checkDisabled;\n/**\n   * Disable icon toggle.\n   *\n   * @public\n   */\nMaterialIconToggle.prototype.disable = function () {\n    this.inputElement_.disabled = true;\n    this.updateClasses_();\n};\nMaterialIconToggle.prototype['disable'] = MaterialIconToggle.prototype.disable;\n/**\n   * Enable icon toggle.\n   *\n   * @public\n   */\nMaterialIconToggle.prototype.enable = function () {\n    this.inputElement_.disabled = false;\n    this.updateClasses_();\n};\nMaterialIconToggle.prototype['enable'] = MaterialIconToggle.prototype.enable;\n/**\n   * Check icon toggle.\n   *\n   * @public\n   */\nMaterialIconToggle.prototype.check = function () {\n    this.inputElement_.checked = true;\n    this.updateClasses_();\n};\nMaterialIconToggle.prototype['check'] = MaterialIconToggle.prototype.check;\n/**\n   * Uncheck icon toggle.\n   *\n   * @public\n   */\nMaterialIconToggle.prototype.uncheck = function () {\n    this.inputElement_.checked = false;\n    this.updateClasses_();\n};\nMaterialIconToggle.prototype['uncheck'] = MaterialIconToggle.prototype.uncheck;\n/**\n   * Initialize element.\n   */\nMaterialIconToggle.prototype.init = function () {\n    if (this.element_) {\n        this.inputElement_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);\n        if (this.element_.classList.contains(this.CssClasses_.JS_RIPPLE_EFFECT)) {\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\n            this.rippleContainerElement_ = document.createElement('span');\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\n            this.rippleContainerElement_.classList.add(this.CssClasses_.JS_RIPPLE_EFFECT);\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER);\n            this.boundRippleMouseUp = this.onMouseUp_.bind(this);\n            this.rippleContainerElement_.addEventListener('mouseup', this.boundRippleMouseUp);\n            var ripple = document.createElement('span');\n            ripple.classList.add(this.CssClasses_.RIPPLE);\n            this.rippleContainerElement_.appendChild(ripple);\n            this.element_.appendChild(this.rippleContainerElement_);\n        }\n        this.boundInputOnChange = this.onChange_.bind(this);\n        this.boundInputOnFocus = this.onFocus_.bind(this);\n        this.boundInputOnBlur = this.onBlur_.bind(this);\n        this.boundElementOnMouseUp = this.onMouseUp_.bind(this);\n        this.inputElement_.addEventListener('change', this.boundInputOnChange);\n        this.inputElement_.addEventListener('focus', this.boundInputOnFocus);\n        this.inputElement_.addEventListener('blur', this.boundInputOnBlur);\n        this.element_.addEventListener('mouseup', this.boundElementOnMouseUp);\n        this.updateClasses_();\n        this.element_.classList.add('is-upgraded');\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialIconToggle,\n    classAsString: 'MaterialIconToggle',\n    cssClass: 'mdl-js-icon-toggle',\n    widget: true\n});","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for dropdown MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialMenu = function MaterialMenu(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialMenu'] = MaterialMenu;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialMenu.prototype.Constant_ = {\n    // Total duration of the menu animation.\n    TRANSITION_DURATION_SECONDS: 0.3,\n    // The fraction of the total duration we want to use for menu item animations.\n    TRANSITION_DURATION_FRACTION: 0.8,\n    // How long the menu stays open after choosing an option (so the user can see\n    // the ripple).\n    CLOSE_TIMEOUT: 150\n};\n/**\n   * Keycodes, for code readability.\n   *\n   * @enum {number}\n   * @private\n   */\nMaterialMenu.prototype.Keycodes_ = {\n    ENTER: 13,\n    ESCAPE: 27,\n    SPACE: 32,\n    UP_ARROW: 38,\n    DOWN_ARROW: 40\n};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialMenu.prototype.CssClasses_ = {\n    CONTAINER: 'mdl-menu__container',\n    OUTLINE: 'mdl-menu__outline',\n    ITEM: 'mdl-menu__item',\n    ITEM_RIPPLE_CONTAINER: 'mdl-menu__item-ripple-container',\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE: 'mdl-ripple',\n    // Statuses\n    IS_UPGRADED: 'is-upgraded',\n    IS_VISIBLE: 'is-visible',\n    IS_ANIMATING: 'is-animating',\n    // Alignment options\n    BOTTOM_LEFT: 'mdl-menu--bottom-left',\n    // This is the default.\n    BOTTOM_RIGHT: 'mdl-menu--bottom-right',\n    TOP_LEFT: 'mdl-menu--top-left',\n    TOP_RIGHT: 'mdl-menu--top-right',\n    UNALIGNED: 'mdl-menu--unaligned'\n};\n/**\n   * Initialize element.\n   */\nMaterialMenu.prototype.init = function () {\n    if (this.element_) {\n        // Create container for the menu.\n        var container = document.createElement('div');\n        container.classList.add(this.CssClasses_.CONTAINER);\n        this.element_.parentElement.insertBefore(container, this.element_);\n        this.element_.parentElement.removeChild(this.element_);\n        container.appendChild(this.element_);\n        this.container_ = container;\n        // Create outline for the menu (shadow and background).\n        var outline = document.createElement('div');\n        outline.classList.add(this.CssClasses_.OUTLINE);\n        this.outline_ = outline;\n        container.insertBefore(outline, this.element_);\n        // Find the \"for\" element and bind events to it.\n        var forElId = this.element_.getAttribute('for') || this.element_.getAttribute('data-mdl-for');\n        var forEl = null;\n        if (forElId) {\n            forEl = document.getElementById(forElId);\n            if (forEl) {\n                this.forElement_ = forEl;\n                forEl.addEventListener('click', this.handleForClick_.bind(this));\n                forEl.addEventListener('keydown', this.handleForKeyboardEvent_.bind(this));\n            }\n        }\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM);\n        this.boundItemKeydown_ = this.handleItemKeyboardEvent_.bind(this);\n        this.boundItemClick_ = this.handleItemClick_.bind(this);\n        for (var i = 0; i < items.length; i++) {\n            // Add a listener to each menu item.\n            items[i].addEventListener('click', this.boundItemClick_);\n            // Add a tab index to each menu item.\n            items[i].tabIndex = '-1';\n            // Add a keyboard listener to each menu item.\n            items[i].addEventListener('keydown', this.boundItemKeydown_);\n        }\n        // Add ripple classes to each item, if the user has enabled ripples.\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\n            for (var j = 0; j < items.length; j++) {\n                var item = items[j];\n                var rippleContainer = document.createElement('span');\n                rippleContainer.classList.add(this.CssClasses_.ITEM_RIPPLE_CONTAINER);\n                var ripple = document.createElement('span');\n                ripple.classList.add(this.CssClasses_.RIPPLE);\n                rippleContainer.appendChild(ripple);\n                item.appendChild(rippleContainer);\n                item.classList.add(this.CssClasses_.RIPPLE_EFFECT);\n            }\n        }\n        // Copy alignment classes to the container, so the outline can use them.\n        if (this.element_.classList.contains(this.CssClasses_.BOTTOM_LEFT)) {\n            this.outline_.classList.add(this.CssClasses_.BOTTOM_LEFT);\n        }\n        if (this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)) {\n            this.outline_.classList.add(this.CssClasses_.BOTTOM_RIGHT);\n        }\n        if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT)) {\n            this.outline_.classList.add(this.CssClasses_.TOP_LEFT);\n        }\n        if (this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {\n            this.outline_.classList.add(this.CssClasses_.TOP_RIGHT);\n        }\n        if (this.element_.classList.contains(this.CssClasses_.UNALIGNED)) {\n            this.outline_.classList.add(this.CssClasses_.UNALIGNED);\n        }\n        container.classList.add(this.CssClasses_.IS_UPGRADED);\n    }\n};\n/**\n   * Handles a click on the \"for\" element, by positioning the menu and then\n   * toggling it.\n   *\n   * @param {Event} evt The event that fired.\n   * @private\n   */\nMaterialMenu.prototype.handleForClick_ = function (evt) {\n    if (this.element_ && this.forElement_) {\n        var rect = this.forElement_.getBoundingClientRect();\n        var forRect = this.forElement_.parentElement.getBoundingClientRect();\n        if (this.element_.classList.contains(this.CssClasses_.UNALIGNED)) {\n        } else if (this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)) {\n            // Position below the \"for\" element, aligned to its right.\n            this.container_.style.right = forRect.right - rect.right + 'px';\n            this.container_.style.top = this.forElement_.offsetTop + this.forElement_.offsetHeight + 'px';\n        } else if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT)) {\n            // Position above the \"for\" element, aligned to its left.\n            this.container_.style.left = this.forElement_.offsetLeft + 'px';\n            this.container_.style.bottom = forRect.bottom - rect.top + 'px';\n        } else if (this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {\n            // Position above the \"for\" element, aligned to its right.\n            this.container_.style.right = forRect.right - rect.right + 'px';\n            this.container_.style.bottom = forRect.bottom - rect.top + 'px';\n        } else {\n            // Default: position below the \"for\" element, aligned to its left.\n            this.container_.style.left = this.forElement_.offsetLeft + 'px';\n            this.container_.style.top = this.forElement_.offsetTop + this.forElement_.offsetHeight + 'px';\n        }\n    }\n    this.toggle(evt);\n};\n/**\n   * Handles a keyboard event on the \"for\" element.\n   *\n   * @param {Event} evt The event that fired.\n   * @private\n   */\nMaterialMenu.prototype.handleForKeyboardEvent_ = function (evt) {\n    if (this.element_ && this.container_ && this.forElement_) {\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM + ':not([disabled])');\n        if (items && items.length > 0 && this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)) {\n            if (evt.keyCode === this.Keycodes_.UP_ARROW) {\n                evt.preventDefault();\n                items[items.length - 1].focus();\n            } else if (evt.keyCode === this.Keycodes_.DOWN_ARROW) {\n                evt.preventDefault();\n                items[0].focus();\n            }\n        }\n    }\n};\n/**\n   * Handles a keyboard event on an item.\n   *\n   * @param {Event} evt The event that fired.\n   * @private\n   */\nMaterialMenu.prototype.handleItemKeyboardEvent_ = function (evt) {\n    if (this.element_ && this.container_) {\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM + ':not([disabled])');\n        if (items && items.length > 0 && this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)) {\n            var currentIndex = Array.prototype.slice.call(items).indexOf(evt.target);\n            if (evt.keyCode === this.Keycodes_.UP_ARROW) {\n                evt.preventDefault();\n                if (currentIndex > 0) {\n                    items[currentIndex - 1].focus();\n                } else {\n                    items[items.length - 1].focus();\n                }\n            } else if (evt.keyCode === this.Keycodes_.DOWN_ARROW) {\n                evt.preventDefault();\n                if (items.length > currentIndex + 1) {\n                    items[currentIndex + 1].focus();\n                } else {\n                    items[0].focus();\n                }\n            } else if (evt.keyCode === this.Keycodes_.SPACE || evt.keyCode === this.Keycodes_.ENTER) {\n                evt.preventDefault();\n                // Send mousedown and mouseup to trigger ripple.\n                var e = new MouseEvent('mousedown');\n                evt.target.dispatchEvent(e);\n                e = new MouseEvent('mouseup');\n                evt.target.dispatchEvent(e);\n                // Send click.\n                evt.target.click();\n            } else if (evt.keyCode === this.Keycodes_.ESCAPE) {\n                evt.preventDefault();\n                this.hide();\n            }\n        }\n    }\n};\n/**\n   * Handles a click event on an item.\n   *\n   * @param {Event} evt The event that fired.\n   * @private\n   */\nMaterialMenu.prototype.handleItemClick_ = function (evt) {\n    if (evt.target.hasAttribute('disabled')) {\n        evt.stopPropagation();\n    } else {\n        // Wait some time before closing menu, so the user can see the ripple.\n        this.closing_ = true;\n        window.setTimeout(function () {\n            this.hide();\n            this.closing_ = false;\n        }.bind(this), this.Constant_.CLOSE_TIMEOUT);\n    }\n};\n/**\n   * Calculates the initial clip (for opening the menu) or final clip (for closing\n   * it), and applies it. This allows us to animate from or to the correct point,\n   * that is, the point it's aligned to in the \"for\" element.\n   *\n   * @param {number} height Height of the clip rectangle\n   * @param {number} width Width of the clip rectangle\n   * @private\n   */\nMaterialMenu.prototype.applyClip_ = function (height, width) {\n    if (this.element_.classList.contains(this.CssClasses_.UNALIGNED)) {\n        // Do not clip.\n        this.element_.style.clip = '';\n    } else if (this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)) {\n        // Clip to the top right corner of the menu.\n        this.element_.style.clip = 'rect(0 ' + width + 'px 0 ' + width + 'px)';\n    } else if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT)) {\n        // Clip to the bottom left corner of the menu.\n        this.element_.style.clip = 'rect(' + height + 'px 0 ' + height + 'px 0)';\n    } else if (this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {\n        // Clip to the bottom right corner of the menu.\n        this.element_.style.clip = 'rect(' + height + 'px ' + width + 'px ' + height + 'px ' + width + 'px)';\n    } else {\n        // Default: do not clip (same as clipping to the top left corner).\n        this.element_.style.clip = '';\n    }\n};\n/**\n   * Cleanup function to remove animation listeners.\n   *\n   * @param {Event} evt The event being handled.\n   * @private\n   */\nMaterialMenu.prototype.removeAnimationEndListener_ = function (evt) {\n    evt.target.classList.remove(MaterialMenu.prototype.CssClasses_.IS_ANIMATING);\n};\n/**\n   * Adds an event listener to clean up after the animation ends.\n   *\n   * @private\n   */\nMaterialMenu.prototype.addAnimationEndListener_ = function () {\n    this.element_.addEventListener('transitionend', this.removeAnimationEndListener_);\n    this.element_.addEventListener('webkitTransitionEnd', this.removeAnimationEndListener_);\n};\n/**\n   * Displays the menu.\n   *\n   * @param {Event} evt The event being handled.\n   * @public\n   */\nMaterialMenu.prototype.show = function (evt) {\n    if (this.element_ && this.container_ && this.outline_) {\n        // Measure the inner element.\n        var height = this.element_.getBoundingClientRect().height;\n        var width = this.element_.getBoundingClientRect().width;\n        // Apply the inner element's size to the container and outline.\n        this.container_.style.width = width + 'px';\n        this.container_.style.height = height + 'px';\n        this.outline_.style.width = width + 'px';\n        this.outline_.style.height = height + 'px';\n        var transitionDuration = this.Constant_.TRANSITION_DURATION_SECONDS * this.Constant_.TRANSITION_DURATION_FRACTION;\n        // Calculate transition delays for individual menu items, so that they fade\n        // in one at a time.\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM);\n        for (var i = 0; i < items.length; i++) {\n            var itemDelay = null;\n            if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT) || this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {\n                itemDelay = (height - items[i].offsetTop - items[i].offsetHeight) / height * transitionDuration + 's';\n            } else {\n                itemDelay = items[i].offsetTop / height * transitionDuration + 's';\n            }\n            items[i].style.transitionDelay = itemDelay;\n        }\n        // Apply the initial clip to the text before we start animating.\n        this.applyClip_(height, width);\n        // Wait for the next frame, turn on animation, and apply the final clip.\n        // Also make it visible. This triggers the transitions.\n        requestAnimationFrame(function () {\n            this.element_.classList.add(this.CssClasses_.IS_ANIMATING);\n            this.element_.style.clip = 'rect(0 ' + width + 'px ' + height + 'px 0)';\n            this.container_.classList.add(this.CssClasses_.IS_VISIBLE);\n        }.bind(this));\n        // Clean up after the animation is complete.\n        this.addAnimationEndListener_();\n        // Add a click listener to the document, to close the menu.\n        var callback = function (e) {\n            // Check to see if the document is processing the same event that\n            // displayed the menu in the first place. If so, do nothing.\n            // Also check to see if the menu is in the process of closing itself, and\n            // do nothing in that case.\n            // Also check if the clicked element is a menu item\n            // if so, do nothing.\n            if (e !== evt && !this.closing_ && e.target.parentNode !== this.element_) {\n                document.removeEventListener('click', callback);\n                this.hide();\n            }\n        }.bind(this);\n        document.addEventListener('click', callback);\n    }\n};\nMaterialMenu.prototype['show'] = MaterialMenu.prototype.show;\n/**\n   * Hides the menu.\n   *\n   * @public\n   */\nMaterialMenu.prototype.hide = function () {\n    if (this.element_ && this.container_ && this.outline_) {\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM);\n        // Remove all transition delays; menu items fade out concurrently.\n        for (var i = 0; i < items.length; i++) {\n            items[i].style.removeProperty('transition-delay');\n        }\n        // Measure the inner element.\n        var rect = this.element_.getBoundingClientRect();\n        var height = rect.height;\n        var width = rect.width;\n        // Turn on animation, and apply the final clip. Also make invisible.\n        // This triggers the transitions.\n        this.element_.classList.add(this.CssClasses_.IS_ANIMATING);\n        this.applyClip_(height, width);\n        this.container_.classList.remove(this.CssClasses_.IS_VISIBLE);\n        // Clean up after the animation is complete.\n        this.addAnimationEndListener_();\n    }\n};\nMaterialMenu.prototype['hide'] = MaterialMenu.prototype.hide;\n/**\n   * Displays or hides the menu, depending on current state.\n   *\n   * @param {Event} evt The event being handled.\n   * @public\n   */\nMaterialMenu.prototype.toggle = function (evt) {\n    if (this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)) {\n        this.hide();\n    } else {\n        this.show(evt);\n    }\n};\nMaterialMenu.prototype['toggle'] = MaterialMenu.prototype.toggle;\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialMenu,\n    classAsString: 'MaterialMenu',\n    cssClass: 'mdl-js-menu',\n    widget: true\n});","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Progress MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialProgress = function MaterialProgress(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialProgress'] = MaterialProgress;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialProgress.prototype.Constant_ = {};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialProgress.prototype.CssClasses_ = { INDETERMINATE_CLASS: 'mdl-progress__indeterminate' };\n/**\n   * Set the current progress of the progressbar.\n   *\n   * @param {number} p Percentage of the progress (0-100)\n   * @public\n   */\nMaterialProgress.prototype.setProgress = function (p) {\n    if (this.element_.classList.contains(this.CssClasses_.INDETERMINATE_CLASS)) {\n        return;\n    }\n    this.progressbar_.style.width = p + '%';\n};\nMaterialProgress.prototype['setProgress'] = MaterialProgress.prototype.setProgress;\n/**\n   * Set the current progress of the buffer.\n   *\n   * @param {number} p Percentage of the buffer (0-100)\n   * @public\n   */\nMaterialProgress.prototype.setBuffer = function (p) {\n    this.bufferbar_.style.width = p + '%';\n    this.auxbar_.style.width = 100 - p + '%';\n};\nMaterialProgress.prototype['setBuffer'] = MaterialProgress.prototype.setBuffer;\n/**\n   * Initialize element.\n   */\nMaterialProgress.prototype.init = function () {\n    if (this.element_) {\n        var el = document.createElement('div');\n        el.className = 'progressbar bar bar1';\n        this.element_.appendChild(el);\n        this.progressbar_ = el;\n        el = document.createElement('div');\n        el.className = 'bufferbar bar bar2';\n        this.element_.appendChild(el);\n        this.bufferbar_ = el;\n        el = document.createElement('div');\n        el.className = 'auxbar bar bar3';\n        this.element_.appendChild(el);\n        this.auxbar_ = el;\n        this.progressbar_.style.width = '0%';\n        this.bufferbar_.style.width = '100%';\n        this.auxbar_.style.width = '0%';\n        this.element_.classList.add('is-upgraded');\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialProgress,\n    classAsString: 'MaterialProgress',\n    cssClass: 'mdl-js-progress',\n    widget: true\n});","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Radio MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialRadio = function MaterialRadio(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialRadio'] = MaterialRadio;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialRadio.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialRadio.prototype.CssClasses_ = {\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_CHECKED: 'is-checked',\n    IS_UPGRADED: 'is-upgraded',\n    JS_RADIO: 'mdl-js-radio',\n    RADIO_BTN: 'mdl-radio__button',\n    RADIO_OUTER_CIRCLE: 'mdl-radio__outer-circle',\n    RADIO_INNER_CIRCLE: 'mdl-radio__inner-circle',\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE_CONTAINER: 'mdl-radio__ripple-container',\n    RIPPLE_CENTER: 'mdl-ripple--center',\n    RIPPLE: 'mdl-ripple'\n};\n/**\n   * Handle change of state.\n   *\n   * @private\n   */\nMaterialRadio.prototype.onChange_ = function () {\n    // Since other radio buttons don't get change events, we need to look for\n    // them to update their classes.\n    var radios = document.getElementsByClassName(this.CssClasses_.JS_RADIO);\n    for (var i = 0; i < radios.length; i++) {\n        var button = radios[i].querySelector('.' + this.CssClasses_.RADIO_BTN);\n        // Different name == different group, so no point updating those.\n        if (button.getAttribute('name') === this.btnElement_.getAttribute('name')) {\n            radios[i]['MaterialRadio'].updateClasses_();\n        }\n    }\n};\n/**\n   * Handle focus.\n   *\n   * @private\n   */\nMaterialRadio.prototype.onFocus_ = function () {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle lost focus.\n   *\n   * @private\n   */\nMaterialRadio.prototype.onBlur_ = function () {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle mouseup.\n   *\n   * @private\n   */\nMaterialRadio.prototype.onMouseup_ = function () {\n    this.blur_();\n};\n/**\n   * Update classes.\n   *\n   * @private\n   */\nMaterialRadio.prototype.updateClasses_ = function () {\n    this.checkDisabled();\n    this.checkToggleState();\n};\n/**\n   * Add blur.\n   *\n   * @private\n   */\nMaterialRadio.prototype.blur_ = function () {\n    // TODO: figure out why there's a focus event being fired after our blur,\n    // so that we can avoid this hack.\n    window.setTimeout(function () {\n        this.btnElement_.blur();\n    }.bind(this), this.Constant_.TINY_TIMEOUT);\n};\n// Public methods.\n/**\n   * Check the components disabled state.\n   *\n   * @public\n   */\nMaterialRadio.prototype.checkDisabled = function () {\n    if (this.btnElement_.disabled) {\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n};\nMaterialRadio.prototype['checkDisabled'] = MaterialRadio.prototype.checkDisabled;\n/**\n   * Check the components toggled state.\n   *\n   * @public\n   */\nMaterialRadio.prototype.checkToggleState = function () {\n    if (this.btnElement_.checked) {\n        this.element_.classList.add(this.CssClasses_.IS_CHECKED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);\n    }\n};\nMaterialRadio.prototype['checkToggleState'] = MaterialRadio.prototype.checkToggleState;\n/**\n   * Disable radio.\n   *\n   * @public\n   */\nMaterialRadio.prototype.disable = function () {\n    this.btnElement_.disabled = true;\n    this.updateClasses_();\n};\nMaterialRadio.prototype['disable'] = MaterialRadio.prototype.disable;\n/**\n   * Enable radio.\n   *\n   * @public\n   */\nMaterialRadio.prototype.enable = function () {\n    this.btnElement_.disabled = false;\n    this.updateClasses_();\n};\nMaterialRadio.prototype['enable'] = MaterialRadio.prototype.enable;\n/**\n   * Check radio.\n   *\n   * @public\n   */\nMaterialRadio.prototype.check = function () {\n    this.btnElement_.checked = true;\n    this.updateClasses_();\n};\nMaterialRadio.prototype['check'] = MaterialRadio.prototype.check;\n/**\n   * Uncheck radio.\n   *\n   * @public\n   */\nMaterialRadio.prototype.uncheck = function () {\n    this.btnElement_.checked = false;\n    this.updateClasses_();\n};\nMaterialRadio.prototype['uncheck'] = MaterialRadio.prototype.uncheck;\n/**\n   * Initialize element.\n   */\nMaterialRadio.prototype.init = function () {\n    if (this.element_) {\n        this.btnElement_ = this.element_.querySelector('.' + this.CssClasses_.RADIO_BTN);\n        this.boundChangeHandler_ = this.onChange_.bind(this);\n        this.boundFocusHandler_ = this.onChange_.bind(this);\n        this.boundBlurHandler_ = this.onBlur_.bind(this);\n        this.boundMouseUpHandler_ = this.onMouseup_.bind(this);\n        var outerCircle = document.createElement('span');\n        outerCircle.classList.add(this.CssClasses_.RADIO_OUTER_CIRCLE);\n        var innerCircle = document.createElement('span');\n        innerCircle.classList.add(this.CssClasses_.RADIO_INNER_CIRCLE);\n        this.element_.appendChild(outerCircle);\n        this.element_.appendChild(innerCircle);\n        var rippleContainer;\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\n            rippleContainer = document.createElement('span');\n            rippleContainer.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\n            rippleContainer.classList.add(this.CssClasses_.RIPPLE_EFFECT);\n            rippleContainer.classList.add(this.CssClasses_.RIPPLE_CENTER);\n            rippleContainer.addEventListener('mouseup', this.boundMouseUpHandler_);\n            var ripple = document.createElement('span');\n            ripple.classList.add(this.CssClasses_.RIPPLE);\n            rippleContainer.appendChild(ripple);\n            this.element_.appendChild(rippleContainer);\n        }\n        this.btnElement_.addEventListener('change', this.boundChangeHandler_);\n        this.btnElement_.addEventListener('focus', this.boundFocusHandler_);\n        this.btnElement_.addEventListener('blur', this.boundBlurHandler_);\n        this.element_.addEventListener('mouseup', this.boundMouseUpHandler_);\n        this.updateClasses_();\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialRadio,\n    classAsString: 'MaterialRadio',\n    cssClass: 'mdl-js-radio',\n    widget: true\n});","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Slider MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialSlider = function MaterialSlider(element) {\n    this.element_ = element;\n    // Browser feature detection.\n    this.isIE_ = window.navigator.msPointerEnabled;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialSlider'] = MaterialSlider;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialSlider.prototype.Constant_ = {};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialSlider.prototype.CssClasses_ = {\n    IE_CONTAINER: 'mdl-slider__ie-container',\n    SLIDER_CONTAINER: 'mdl-slider__container',\n    BACKGROUND_FLEX: 'mdl-slider__background-flex',\n    BACKGROUND_LOWER: 'mdl-slider__background-lower',\n    BACKGROUND_UPPER: 'mdl-slider__background-upper',\n    IS_LOWEST_VALUE: 'is-lowest-value',\n    IS_UPGRADED: 'is-upgraded'\n};\n/**\n   * Handle input on element.\n   *\n   * @private\n   */\nMaterialSlider.prototype.onInput_ = function () {\n    this.updateValueStyles_();\n};\n/**\n   * Handle change on element.\n   *\n   * @private\n   */\nMaterialSlider.prototype.onChange_ = function () {\n    this.updateValueStyles_();\n};\n/**\n   * Handle mouseup on element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialSlider.prototype.onMouseUp_ = function (event) {\n    event.target.blur();\n};\n/**\n   * Handle mousedown on container element.\n   * This handler is purpose is to not require the use to click\n   * exactly on the 2px slider element, as FireFox seems to be very\n   * strict about this.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   * @suppress {missingProperties}\n   */\nMaterialSlider.prototype.onContainerMouseDown_ = function (event) {\n    // If this click is not on the parent element (but rather some child)\n    // ignore. It may still bubble up.\n    if (event.target !== this.element_.parentElement) {\n        return;\n    }\n    // Discard the original event and create a new event that\n    // is on the slider element.\n    event.preventDefault();\n    var newEvent = new MouseEvent('mousedown', {\n        target: event.target,\n        buttons: event.buttons,\n        clientX: event.clientX,\n        clientY: this.element_.getBoundingClientRect().y\n    });\n    this.element_.dispatchEvent(newEvent);\n};\n/**\n   * Handle updating of values.\n   *\n   * @private\n   */\nMaterialSlider.prototype.updateValueStyles_ = function () {\n    // Calculate and apply percentages to div structure behind slider.\n    var fraction = (this.element_.value - this.element_.min) / (this.element_.max - this.element_.min);\n    if (fraction === 0) {\n        this.element_.classList.add(this.CssClasses_.IS_LOWEST_VALUE);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_LOWEST_VALUE);\n    }\n    if (!this.isIE_) {\n        this.backgroundLower_.style.flex = fraction;\n        this.backgroundLower_.style.webkitFlex = fraction;\n        this.backgroundUpper_.style.flex = 1 - fraction;\n        this.backgroundUpper_.style.webkitFlex = 1 - fraction;\n    }\n};\n// Public methods.\n/**\n   * Disable slider.\n   *\n   * @public\n   */\nMaterialSlider.prototype.disable = function () {\n    this.element_.disabled = true;\n};\nMaterialSlider.prototype['disable'] = MaterialSlider.prototype.disable;\n/**\n   * Enable slider.\n   *\n   * @public\n   */\nMaterialSlider.prototype.enable = function () {\n    this.element_.disabled = false;\n};\nMaterialSlider.prototype['enable'] = MaterialSlider.prototype.enable;\n/**\n   * Update slider value.\n   *\n   * @param {number} value The value to which to set the control (optional).\n   * @public\n   */\nMaterialSlider.prototype.change = function (value) {\n    if (typeof value !== 'undefined') {\n        this.element_.value = value;\n    }\n    this.updateValueStyles_();\n};\nMaterialSlider.prototype['change'] = MaterialSlider.prototype.change;\n/**\n   * Initialize element.\n   */\nMaterialSlider.prototype.init = function () {\n    if (this.element_) {\n        if (this.isIE_) {\n            // Since we need to specify a very large height in IE due to\n            // implementation limitations, we add a parent here that trims it down to\n            // a reasonable size.\n            var containerIE = document.createElement('div');\n            containerIE.classList.add(this.CssClasses_.IE_CONTAINER);\n            this.element_.parentElement.insertBefore(containerIE, this.element_);\n            this.element_.parentElement.removeChild(this.element_);\n            containerIE.appendChild(this.element_);\n        } else {\n            // For non-IE browsers, we need a div structure that sits behind the\n            // slider and allows us to style the left and right sides of it with\n            // different colors.\n            var container = document.createElement('div');\n            container.classList.add(this.CssClasses_.SLIDER_CONTAINER);\n            this.element_.parentElement.insertBefore(container, this.element_);\n            this.element_.parentElement.removeChild(this.element_);\n            container.appendChild(this.element_);\n            var backgroundFlex = document.createElement('div');\n            backgroundFlex.classList.add(this.CssClasses_.BACKGROUND_FLEX);\n            container.appendChild(backgroundFlex);\n            this.backgroundLower_ = document.createElement('div');\n            this.backgroundLower_.classList.add(this.CssClasses_.BACKGROUND_LOWER);\n            backgroundFlex.appendChild(this.backgroundLower_);\n            this.backgroundUpper_ = document.createElement('div');\n            this.backgroundUpper_.classList.add(this.CssClasses_.BACKGROUND_UPPER);\n            backgroundFlex.appendChild(this.backgroundUpper_);\n        }\n        this.boundInputHandler = this.onInput_.bind(this);\n        this.boundChangeHandler = this.onChange_.bind(this);\n        this.boundMouseUpHandler = this.onMouseUp_.bind(this);\n        this.boundContainerMouseDownHandler = this.onContainerMouseDown_.bind(this);\n        this.element_.addEventListener('input', this.boundInputHandler);\n        this.element_.addEventListener('change', this.boundChangeHandler);\n        this.element_.addEventListener('mouseup', this.boundMouseUpHandler);\n        this.element_.parentElement.addEventListener('mousedown', this.boundContainerMouseDownHandler);\n        this.updateValueStyles_();\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialSlider,\n    classAsString: 'MaterialSlider',\n    cssClass: 'mdl-js-slider',\n    widget: true\n});","/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Snackbar MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialSnackbar = function MaterialSnackbar(element) {\n    this.element_ = element;\n    this.textElement_ = this.element_.querySelector('.' + this.cssClasses_.MESSAGE);\n    this.actionElement_ = this.element_.querySelector('.' + this.cssClasses_.ACTION);\n    if (!this.textElement_) {\n        throw new Error('There must be a message element for a snackbar.');\n    }\n    if (!this.actionElement_) {\n        throw new Error('There must be an action element for a snackbar.');\n    }\n    this.active = false;\n    this.actionHandler_ = undefined;\n    this.message_ = undefined;\n    this.actionText_ = undefined;\n    this.queuedNotifications_ = [];\n    this.setActionHidden_(true);\n};\nwindow['MaterialSnackbar'] = MaterialSnackbar;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialSnackbar.prototype.Constant_ = {\n    // The duration of the snackbar show/hide animation, in ms.\n    ANIMATION_LENGTH: 250\n};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialSnackbar.prototype.cssClasses_ = {\n    SNACKBAR: 'mdl-snackbar',\n    MESSAGE: 'mdl-snackbar__text',\n    ACTION: 'mdl-snackbar__action',\n    ACTIVE: 'mdl-snackbar--active'\n};\n/**\n   * Display the snackbar.\n   *\n   * @private\n   */\nMaterialSnackbar.prototype.displaySnackbar_ = function () {\n    this.element_.setAttribute('aria-hidden', 'true');\n    if (this.actionHandler_) {\n        this.actionElement_.textContent = this.actionText_;\n        this.actionElement_.addEventListener('click', this.actionHandler_);\n        this.setActionHidden_(false);\n    }\n    this.textElement_.textContent = this.message_;\n    this.element_.classList.add(this.cssClasses_.ACTIVE);\n    this.element_.setAttribute('aria-hidden', 'false');\n    setTimeout(this.cleanup_.bind(this), this.timeout_);\n};\n/**\n   * Show the snackbar.\n   *\n   * @param {Object} data The data for the notification.\n   * @public\n   */\nMaterialSnackbar.prototype.showSnackbar = function (data) {\n    if (data === undefined) {\n        throw new Error('Please provide a data object with at least a message to display.');\n    }\n    if (data['message'] === undefined) {\n        throw new Error('Please provide a message to be displayed.');\n    }\n    if (data['actionHandler'] && !data['actionText']) {\n        throw new Error('Please provide action text with the handler.');\n    }\n    if (this.active) {\n        this.queuedNotifications_.push(data);\n    } else {\n        this.active = true;\n        this.message_ = data['message'];\n        if (data['timeout']) {\n            this.timeout_ = data['timeout'];\n        } else {\n            this.timeout_ = 2750;\n        }\n        if (data['actionHandler']) {\n            this.actionHandler_ = data['actionHandler'];\n        }\n        if (data['actionText']) {\n            this.actionText_ = data['actionText'];\n        }\n        this.displaySnackbar_();\n    }\n};\nMaterialSnackbar.prototype['showSnackbar'] = MaterialSnackbar.prototype.showSnackbar;\n/**\n   * Check if the queue has items within it.\n   * If it does, display the next entry.\n   *\n   * @private\n   */\nMaterialSnackbar.prototype.checkQueue_ = function () {\n    if (this.queuedNotifications_.length > 0) {\n        this.showSnackbar(this.queuedNotifications_.shift());\n    }\n};\n/**\n   * Cleanup the snackbar event listeners and accessiblity attributes.\n   *\n   * @private\n   */\nMaterialSnackbar.prototype.cleanup_ = function () {\n    this.element_.classList.remove(this.cssClasses_.ACTIVE);\n    setTimeout(function () {\n        this.element_.setAttribute('aria-hidden', 'true');\n        this.textElement_.textContent = '';\n        if (!this.actionElement_.getAttribute('aria-hidden')) {\n            this.setActionHidden_(true);\n            this.actionElement_.textContent = '';\n            this.actionElement_.removeEventListener('click', this.actionHandler_);\n        }\n        this.actionHandler_ = undefined;\n        this.message_ = undefined;\n        this.actionText_ = undefined;\n        this.active = false;\n        this.checkQueue_();\n    }.bind(this), this.Constant_.ANIMATION_LENGTH);\n};\n/**\n   * Set the action handler hidden state.\n   *\n   * @param {boolean} value Whether or not to set to 'hidden'.\n   * @private\n   */\nMaterialSnackbar.prototype.setActionHidden_ = function (value) {\n    if (value) {\n        this.actionElement_.setAttribute('aria-hidden', 'true');\n    } else {\n        this.actionElement_.removeAttribute('aria-hidden');\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialSnackbar,\n    classAsString: 'MaterialSnackbar',\n    cssClass: 'mdl-js-snackbar',\n    widget: true\n});","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Spinner MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   * @constructor\n   */\nvar MaterialSpinner = function MaterialSpinner(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialSpinner'] = MaterialSpinner;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialSpinner.prototype.Constant_ = { MDL_SPINNER_LAYER_COUNT: 4 };\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialSpinner.prototype.CssClasses_ = {\n    MDL_SPINNER_LAYER: 'mdl-spinner__layer',\n    MDL_SPINNER_CIRCLE_CLIPPER: 'mdl-spinner__circle-clipper',\n    MDL_SPINNER_CIRCLE: 'mdl-spinner__circle',\n    MDL_SPINNER_GAP_PATCH: 'mdl-spinner__gap-patch',\n    MDL_SPINNER_LEFT: 'mdl-spinner__left',\n    MDL_SPINNER_RIGHT: 'mdl-spinner__right'\n};\n/**\n   * Auxiliary method to create a spinner layer.\n   *\n   * @param {number} index Index of the layer to be created.\n   * @public\n   */\nMaterialSpinner.prototype.createLayer = function (index) {\n    var layer = document.createElement('div');\n    layer.classList.add(this.CssClasses_.MDL_SPINNER_LAYER);\n    layer.classList.add(this.CssClasses_.MDL_SPINNER_LAYER + '-' + index);\n    var leftClipper = document.createElement('div');\n    leftClipper.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER);\n    leftClipper.classList.add(this.CssClasses_.MDL_SPINNER_LEFT);\n    var gapPatch = document.createElement('div');\n    gapPatch.classList.add(this.CssClasses_.MDL_SPINNER_GAP_PATCH);\n    var rightClipper = document.createElement('div');\n    rightClipper.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER);\n    rightClipper.classList.add(this.CssClasses_.MDL_SPINNER_RIGHT);\n    var circleOwners = [\n        leftClipper,\n        gapPatch,\n        rightClipper\n    ];\n    for (var i = 0; i < circleOwners.length; i++) {\n        var circle = document.createElement('div');\n        circle.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE);\n        circleOwners[i].appendChild(circle);\n    }\n    layer.appendChild(leftClipper);\n    layer.appendChild(gapPatch);\n    layer.appendChild(rightClipper);\n    this.element_.appendChild(layer);\n};\nMaterialSpinner.prototype['createLayer'] = MaterialSpinner.prototype.createLayer;\n/**\n   * Stops the spinner animation.\n   * Public method for users who need to stop the spinner for any reason.\n   *\n   * @public\n   */\nMaterialSpinner.prototype.stop = function () {\n    this.element_.classList.remove('is-active');\n};\nMaterialSpinner.prototype['stop'] = MaterialSpinner.prototype.stop;\n/**\n   * Starts the spinner animation.\n   * Public method for users who need to manually start the spinner for any reason\n   * (instead of just adding the 'is-active' class to their markup).\n   *\n   * @public\n   */\nMaterialSpinner.prototype.start = function () {\n    this.element_.classList.add('is-active');\n};\nMaterialSpinner.prototype['start'] = MaterialSpinner.prototype.start;\n/**\n   * Initialize element.\n   */\nMaterialSpinner.prototype.init = function () {\n    if (this.element_) {\n        for (var i = 1; i <= this.Constant_.MDL_SPINNER_LAYER_COUNT; i++) {\n            this.createLayer(i);\n        }\n        this.element_.classList.add('is-upgraded');\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialSpinner,\n    classAsString: 'MaterialSpinner',\n    cssClass: 'mdl-js-spinner',\n    widget: true\n});","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Checkbox MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialSwitch = function MaterialSwitch(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialSwitch'] = MaterialSwitch;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialSwitch.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialSwitch.prototype.CssClasses_ = {\n    INPUT: 'mdl-switch__input',\n    TRACK: 'mdl-switch__track',\n    THUMB: 'mdl-switch__thumb',\n    FOCUS_HELPER: 'mdl-switch__focus-helper',\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE_CONTAINER: 'mdl-switch__ripple-container',\n    RIPPLE_CENTER: 'mdl-ripple--center',\n    RIPPLE: 'mdl-ripple',\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_CHECKED: 'is-checked'\n};\n/**\n   * Handle change of state.\n   *\n   * @private\n   */\nMaterialSwitch.prototype.onChange_ = function () {\n    this.updateClasses_();\n};\n/**\n   * Handle focus of element.\n   *\n   * @private\n   */\nMaterialSwitch.prototype.onFocus_ = function () {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle lost focus of element.\n   *\n   * @private\n   */\nMaterialSwitch.prototype.onBlur_ = function () {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle mouseup.\n   *\n   * @private\n   */\nMaterialSwitch.prototype.onMouseUp_ = function () {\n    this.blur_();\n};\n/**\n   * Handle class updates.\n   *\n   * @private\n   */\nMaterialSwitch.prototype.updateClasses_ = function () {\n    this.checkDisabled();\n    this.checkToggleState();\n};\n/**\n   * Add blur.\n   *\n   * @private\n   */\nMaterialSwitch.prototype.blur_ = function () {\n    // TODO: figure out why there's a focus event being fired after our blur,\n    // so that we can avoid this hack.\n    window.setTimeout(function () {\n        this.inputElement_.blur();\n    }.bind(this), this.Constant_.TINY_TIMEOUT);\n};\n// Public methods.\n/**\n   * Check the components disabled state.\n   *\n   * @public\n   */\nMaterialSwitch.prototype.checkDisabled = function () {\n    if (this.inputElement_.disabled) {\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n};\nMaterialSwitch.prototype['checkDisabled'] = MaterialSwitch.prototype.checkDisabled;\n/**\n   * Check the components toggled state.\n   *\n   * @public\n   */\nMaterialSwitch.prototype.checkToggleState = function () {\n    if (this.inputElement_.checked) {\n        this.element_.classList.add(this.CssClasses_.IS_CHECKED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);\n    }\n};\nMaterialSwitch.prototype['checkToggleState'] = MaterialSwitch.prototype.checkToggleState;\n/**\n   * Disable switch.\n   *\n   * @public\n   */\nMaterialSwitch.prototype.disable = function () {\n    this.inputElement_.disabled = true;\n    this.updateClasses_();\n};\nMaterialSwitch.prototype['disable'] = MaterialSwitch.prototype.disable;\n/**\n   * Enable switch.\n   *\n   * @public\n   */\nMaterialSwitch.prototype.enable = function () {\n    this.inputElement_.disabled = false;\n    this.updateClasses_();\n};\nMaterialSwitch.prototype['enable'] = MaterialSwitch.prototype.enable;\n/**\n   * Activate switch.\n   *\n   * @public\n   */\nMaterialSwitch.prototype.on = function () {\n    this.inputElement_.checked = true;\n    this.updateClasses_();\n};\nMaterialSwitch.prototype['on'] = MaterialSwitch.prototype.on;\n/**\n   * Deactivate switch.\n   *\n   * @public\n   */\nMaterialSwitch.prototype.off = function () {\n    this.inputElement_.checked = false;\n    this.updateClasses_();\n};\nMaterialSwitch.prototype['off'] = MaterialSwitch.prototype.off;\n/**\n   * Initialize element.\n   */\nMaterialSwitch.prototype.init = function () {\n    if (this.element_) {\n        this.inputElement_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);\n        var track = document.createElement('div');\n        track.classList.add(this.CssClasses_.TRACK);\n        var thumb = document.createElement('div');\n        thumb.classList.add(this.CssClasses_.THUMB);\n        var focusHelper = document.createElement('span');\n        focusHelper.classList.add(this.CssClasses_.FOCUS_HELPER);\n        thumb.appendChild(focusHelper);\n        this.element_.appendChild(track);\n        this.element_.appendChild(thumb);\n        this.boundMouseUpHandler = this.onMouseUp_.bind(this);\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\n            this.rippleContainerElement_ = document.createElement('span');\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_EFFECT);\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER);\n            this.rippleContainerElement_.addEventListener('mouseup', this.boundMouseUpHandler);\n            var ripple = document.createElement('span');\n            ripple.classList.add(this.CssClasses_.RIPPLE);\n            this.rippleContainerElement_.appendChild(ripple);\n            this.element_.appendChild(this.rippleContainerElement_);\n        }\n        this.boundChangeHandler = this.onChange_.bind(this);\n        this.boundFocusHandler = this.onFocus_.bind(this);\n        this.boundBlurHandler = this.onBlur_.bind(this);\n        this.inputElement_.addEventListener('change', this.boundChangeHandler);\n        this.inputElement_.addEventListener('focus', this.boundFocusHandler);\n        this.inputElement_.addEventListener('blur', this.boundBlurHandler);\n        this.element_.addEventListener('mouseup', this.boundMouseUpHandler);\n        this.updateClasses_();\n        this.element_.classList.add('is-upgraded');\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialSwitch,\n    classAsString: 'MaterialSwitch',\n    cssClass: 'mdl-js-switch',\n    widget: true\n});","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Textfield MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialTextfield = function MaterialTextfield(element) {\n    this.element_ = element;\n    this.maxRows = this.Constant_.NO_MAX_ROWS;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialTextfield'] = MaterialTextfield;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialTextfield.prototype.Constant_ = {\n    NO_MAX_ROWS: -1,\n    MAX_ROWS_ATTRIBUTE: 'maxrows'\n};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialTextfield.prototype.CssClasses_ = {\n    LABEL: 'mdl-textfield__label',\n    INPUT: 'mdl-textfield__input',\n    IS_DIRTY: 'is-dirty',\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_INVALID: 'is-invalid',\n    IS_UPGRADED: 'is-upgraded',\n    HAS_PLACEHOLDER: 'has-placeholder'\n};\n/**\n   * Handle input being entered.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialTextfield.prototype.onKeyDown_ = function (event) {\n    var currentRowCount = event.target.value.split('\\n').length;\n    if (event.keyCode === 13) {\n        if (currentRowCount >= this.maxRows) {\n            event.preventDefault();\n        }\n    }\n};\n/**\n   * Handle focus.\n   *\n   * @private\n   */\nMaterialTextfield.prototype.onFocus_ = function () {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle lost focus.\n   *\n   * @private\n   */\nMaterialTextfield.prototype.onBlur_ = function () {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle reset event from out side.\n   *\n   * @private\n   */\nMaterialTextfield.prototype.onReset_ = function () {\n    this.updateClasses_();\n};\n/**\n   * Handle class updates.\n   *\n   * @private\n   */\nMaterialTextfield.prototype.updateClasses_ = function () {\n    this.checkDisabled();\n    this.checkValidity();\n    this.checkDirty();\n    this.checkFocus();\n};\n// Public methods.\n/**\n   * Check the disabled state and update field accordingly.\n   *\n   * @public\n   */\nMaterialTextfield.prototype.checkDisabled = function () {\n    if (this.input_.disabled) {\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n};\nMaterialTextfield.prototype['checkDisabled'] = MaterialTextfield.prototype.checkDisabled;\n/**\n  * Check the focus state and update field accordingly.\n  *\n  * @public\n  */\nMaterialTextfield.prototype.checkFocus = function () {\n    if (this.element_.querySelector(':focus')) {\n        this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n    }\n};\nMaterialTextfield.prototype['checkFocus'] = MaterialTextfield.prototype.checkFocus;\n/**\n   * Check the validity state and update field accordingly.\n   *\n   * @public\n   */\nMaterialTextfield.prototype.checkValidity = function () {\n    if (this.input_.validity) {\n        if (this.input_.validity.valid) {\n            this.element_.classList.remove(this.CssClasses_.IS_INVALID);\n        } else {\n            this.element_.classList.add(this.CssClasses_.IS_INVALID);\n        }\n    }\n};\nMaterialTextfield.prototype['checkValidity'] = MaterialTextfield.prototype.checkValidity;\n/**\n   * Check the dirty state and update field accordingly.\n   *\n   * @public\n   */\nMaterialTextfield.prototype.checkDirty = function () {\n    if (this.input_.value && this.input_.value.length > 0) {\n        this.element_.classList.add(this.CssClasses_.IS_DIRTY);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_DIRTY);\n    }\n};\nMaterialTextfield.prototype['checkDirty'] = MaterialTextfield.prototype.checkDirty;\n/**\n   * Disable text field.\n   *\n   * @public\n   */\nMaterialTextfield.prototype.disable = function () {\n    this.input_.disabled = true;\n    this.updateClasses_();\n};\nMaterialTextfield.prototype['disable'] = MaterialTextfield.prototype.disable;\n/**\n   * Enable text field.\n   *\n   * @public\n   */\nMaterialTextfield.prototype.enable = function () {\n    this.input_.disabled = false;\n    this.updateClasses_();\n};\nMaterialTextfield.prototype['enable'] = MaterialTextfield.prototype.enable;\n/**\n   * Update text field value.\n   *\n   * @param {string} value The value to which to set the control (optional).\n   * @public\n   */\nMaterialTextfield.prototype.change = function (value) {\n    this.input_.value = value || '';\n    this.updateClasses_();\n};\nMaterialTextfield.prototype['change'] = MaterialTextfield.prototype.change;\n/**\n   * Focus text field.\n   *\n   * @public\n   */\nMaterialTextfield.prototype.focus = function () {\n    this.input_.focus();\n    this.updateClasses_();\n};\nMaterialTextfield.prototype['focus'] = MaterialTextfield.prototype.focus;\n/**\n   * Blur text field.\n   *\n   * @public\n   */\nMaterialTextfield.prototype.blur = function () {\n    this.input_.blur();\n    this.updateClasses_();\n};\nMaterialTextfield.prototype['blur'] = MaterialTextfield.prototype.blur;\n/**\n   * Initialize element.\n   */\nMaterialTextfield.prototype.init = function () {\n    if (this.element_) {\n        this.label_ = this.element_.querySelector('.' + this.CssClasses_.LABEL);\n        this.input_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);\n        if (this.input_) {\n            if (this.input_.hasAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE)) {\n                this.maxRows = parseInt(this.input_.getAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE), 10);\n                if (isNaN(this.maxRows)) {\n                    this.maxRows = this.Constant_.NO_MAX_ROWS;\n                }\n            }\n            if (this.input_.hasAttribute('placeholder')) {\n                this.element_.classList.add(this.CssClasses_.HAS_PLACEHOLDER);\n            }\n            this.boundUpdateClassesHandler = this.updateClasses_.bind(this);\n            this.boundFocusHandler = this.onFocus_.bind(this);\n            this.boundBlurHandler = this.onBlur_.bind(this);\n            this.boundResetHandler = this.onReset_.bind(this);\n            this.input_.addEventListener('input', this.boundUpdateClassesHandler);\n            this.input_.addEventListener('focus', this.boundFocusHandler);\n            this.input_.addEventListener('blur', this.boundBlurHandler);\n            this.input_.addEventListener('reset', this.boundResetHandler);\n            if (this.maxRows !== this.Constant_.NO_MAX_ROWS) {\n                // TODO: This should handle pasting multi line text.\n                // Currently doesn't.\n                this.boundKeyDownHandler = this.onKeyDown_.bind(this);\n                this.input_.addEventListener('keydown', this.boundKeyDownHandler);\n            }\n            var invalid = this.element_.classList.contains(this.CssClasses_.IS_INVALID);\n            this.updateClasses_();\n            this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n            if (invalid) {\n                this.element_.classList.add(this.CssClasses_.IS_INVALID);\n            }\n            if (this.input_.hasAttribute('autofocus')) {\n                this.element_.focus();\n                this.checkFocus();\n            }\n        }\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialTextfield,\n    classAsString: 'MaterialTextfield',\n    cssClass: 'mdl-js-textfield',\n    widget: true\n});","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Tooltip MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialTooltip = function MaterialTooltip(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialTooltip'] = MaterialTooltip;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialTooltip.prototype.Constant_ = {};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialTooltip.prototype.CssClasses_ = {\n    IS_ACTIVE: 'is-active',\n    BOTTOM: 'mdl-tooltip--bottom',\n    LEFT: 'mdl-tooltip--left',\n    RIGHT: 'mdl-tooltip--right',\n    TOP: 'mdl-tooltip--top'\n};\n/**\n   * Handle mouseenter for tooltip.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialTooltip.prototype.handleMouseEnter_ = function (event) {\n    var props = event.target.getBoundingClientRect();\n    var left = props.left + props.width / 2;\n    var top = props.top + props.height / 2;\n    var marginLeft = -1 * (this.element_.offsetWidth / 2);\n    var marginTop = -1 * (this.element_.offsetHeight / 2);\n    if (this.element_.classList.contains(this.CssClasses_.LEFT) || this.element_.classList.contains(this.CssClasses_.RIGHT)) {\n        left = props.width / 2;\n        if (top + marginTop < 0) {\n            this.element_.style.top = 0;\n            this.element_.style.marginTop = 0;\n        } else {\n            this.element_.style.top = top + 'px';\n            this.element_.style.marginTop = marginTop + 'px';\n        }\n    } else if (left + marginLeft < 0) {\n        this.element_.style.left = 0;\n        this.element_.style.marginLeft = 0;\n    } else {\n        this.element_.style.left = left + 'px';\n        this.element_.style.marginLeft = marginLeft + 'px';\n    }\n    if (this.element_.classList.contains(this.CssClasses_.TOP)) {\n        this.element_.style.top = props.top - this.element_.offsetHeight - 10 + 'px';\n    } else if (this.element_.classList.contains(this.CssClasses_.RIGHT)) {\n        this.element_.style.left = props.left + props.width + 10 + 'px';\n    } else if (this.element_.classList.contains(this.CssClasses_.LEFT)) {\n        this.element_.style.left = props.left - this.element_.offsetWidth - 10 + 'px';\n    } else {\n        this.element_.style.top = props.top + props.height + 10 + 'px';\n    }\n    this.element_.classList.add(this.CssClasses_.IS_ACTIVE);\n};\n/**\n   * Handle mouseleave for tooltip.\n   *\n   * @private\n   */\nMaterialTooltip.prototype.handleMouseLeave_ = function () {\n    this.element_.classList.remove(this.CssClasses_.IS_ACTIVE);\n};\n/**\n   * Initialize element.\n   */\nMaterialTooltip.prototype.init = function () {\n    if (this.element_) {\n        var forElId = this.element_.getAttribute('for');\n        if (forElId) {\n            this.forElement_ = document.getElementById(forElId);\n        }\n        if (this.forElement_) {\n            // It's left here because it prevents accidental text selection on Android\n            if (!this.forElement_.hasAttribute('tabindex')) {\n                this.forElement_.setAttribute('tabindex', '0');\n            }\n            this.boundMouseEnterHandler = this.handleMouseEnter_.bind(this);\n            this.boundMouseLeaveHandler = this.handleMouseLeave_.bind(this);\n            this.forElement_.addEventListener('mouseenter', this.boundMouseEnterHandler, false);\n            this.forElement_.addEventListener('touchend', this.boundMouseEnterHandler, false);\n            this.forElement_.addEventListener('mouseleave', this.boundMouseLeaveHandler, false);\n            window.addEventListener('touchstart', this.boundMouseLeaveHandler);\n        }\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialTooltip,\n    classAsString: 'MaterialTooltip',\n    cssClass: 'mdl-tooltip'\n});","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Data Table Card MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {Element} element The element that will be upgraded.\n   */\nvar MaterialDataTable = function MaterialDataTable(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialDataTable'] = MaterialDataTable;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialDataTable.prototype.Constant_ = {};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialDataTable.prototype.CssClasses_ = {\n    DATA_TABLE: 'mdl-data-table',\n    SELECTABLE: 'mdl-data-table--selectable',\n    SELECT_ELEMENT: 'mdl-data-table__select',\n    IS_SELECTED: 'is-selected',\n    IS_UPGRADED: 'is-upgraded'\n};\n/**\n   * Generates and returns a function that toggles the selection state of a\n   * single row (or multiple rows).\n   *\n   * @param {Element} checkbox Checkbox that toggles the selection state.\n   * @param {Element} row Row to toggle when checkbox changes.\n   * @param {(Array<Object>|NodeList)=} optRows Rows to toggle when checkbox changes.\n   * @return {?function()} a function to toggle the selection state of the row(s).\n   * @private\n   */\nMaterialDataTable.prototype.selectRow_ = function (checkbox, row, optRows) {\n    if (row) {\n        return function () {\n            if (checkbox.checked) {\n                row.classList.add(this.CssClasses_.IS_SELECTED);\n            } else {\n                row.classList.remove(this.CssClasses_.IS_SELECTED);\n            }\n        }.bind(this);\n    }\n    if (optRows) {\n        return function () {\n            var i;\n            var el;\n            if (checkbox.checked) {\n                for (i = 0; i < optRows.length; i++) {\n                    el = optRows[i].querySelector('td').querySelector('.mdl-checkbox');\n                    el['MaterialCheckbox'].check();\n                    optRows[i].classList.add(this.CssClasses_.IS_SELECTED);\n                }\n            } else {\n                for (i = 0; i < optRows.length; i++) {\n                    el = optRows[i].querySelector('td').querySelector('.mdl-checkbox');\n                    el['MaterialCheckbox'].uncheck();\n                    optRows[i].classList.remove(this.CssClasses_.IS_SELECTED);\n                }\n            }\n        }.bind(this);\n    }\n    return null;\n};\n/**\n   * Creates a checkbox for a single or or multiple rows and hooks up the\n   * event handling.\n   *\n   * @param {Element} row Row to toggle when checkbox changes.\n   * @param {(Array<Object>|NodeList)=} optRows Rows to toggle when checkbox changes.\n   * @return {Element} the created parent label.\n   * @private\n   */\nMaterialDataTable.prototype.createCheckbox_ = function (row, optRows) {\n    var label = document.createElement('label');\n    var labelClasses = [\n        'mdl-checkbox',\n        'mdl-js-checkbox',\n        'mdl-js-ripple-effect',\n        this.CssClasses_.SELECT_ELEMENT\n    ];\n    label.className = labelClasses.join(' ');\n    var checkbox = document.createElement('input');\n    checkbox.type = 'checkbox';\n    checkbox.classList.add('mdl-checkbox__input');\n    if (row) {\n        checkbox.checked = row.classList.contains(this.CssClasses_.IS_SELECTED);\n        checkbox.addEventListener('change', this.selectRow_(checkbox, row));\n    } else if (optRows) {\n        checkbox.addEventListener('change', this.selectRow_(checkbox, null, optRows));\n    }\n    label.appendChild(checkbox);\n    componentHandler.upgradeElement(label, 'MaterialCheckbox');\n    return label;\n};\n/**\n   * Initialize element.\n   */\nMaterialDataTable.prototype.init = function () {\n    if (this.element_) {\n        var firstHeader = this.element_.querySelector('th');\n        var bodyRows = Array.prototype.slice.call(this.element_.querySelectorAll('tbody tr'));\n        var footRows = Array.prototype.slice.call(this.element_.querySelectorAll('tfoot tr'));\n        var rows = bodyRows.concat(footRows);\n        if (this.element_.classList.contains(this.CssClasses_.SELECTABLE)) {\n            var th = document.createElement('th');\n            var headerCheckbox = this.createCheckbox_(null, rows);\n            th.appendChild(headerCheckbox);\n            firstHeader.parentElement.insertBefore(th, firstHeader);\n            for (var i = 0; i < rows.length; i++) {\n                var firstCell = rows[i].querySelector('td');\n                if (firstCell) {\n                    var td = document.createElement('td');\n                    if (rows[i].parentNode.nodeName.toUpperCase() === 'TBODY') {\n                        var rowCheckbox = this.createCheckbox_(rows[i]);\n                        td.appendChild(rowCheckbox);\n                    }\n                    rows[i].insertBefore(td, firstCell);\n                }\n            }\n            this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n        }\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialDataTable,\n    classAsString: 'MaterialDataTable',\n    cssClass: 'mdl-js-data-table'\n});","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for date picker MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialDatePicker = function MaterialDatePicker(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialDatePicker'] = MaterialDatePicker;\n/**\n   * Global date picker locales\n   * Currently allowed formats: ['mm/dd/yyyy', 'dd.mm.yyyy', 'yyyy-mm-dd']\n   * @type {Object}\n   * @public\n   */\nMaterialDatePicker.locales = {\n    /**\n     * Date format for input formatting\n     * @type {string}\n     */\n    format: 'yyyy-mm-dd',\n    weekStart: 0,\n    weekDays: [\n        'Sunday',\n        'Monday',\n        'Tuesday',\n        'Wednesday',\n        'Thursday',\n        'Friday',\n        'Saturday'\n    ],\n    weekDaysShort: [\n        'Sun',\n        'Mon',\n        'Tue',\n        'Wed',\n        'Thu',\n        'Fri',\n        'Sat'\n    ],\n    weekDaysLetter: [\n        'S',\n        'M',\n        'T',\n        'W',\n        'T',\n        'F',\n        'S'\n    ],\n    months: [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December'\n    ],\n    monthsShort: [\n        'Jan',\n        'Feb',\n        'Mar',\n        'Apr',\n        'May',\n        'Jun',\n        'Jul',\n        'Aug',\n        'Sep',\n        'Oct',\n        'Nov',\n        'Dec'\n    ],\n    actions: {\n        cancel: 'Cancel',\n        ok: 'Ok'\n    }\n};\n/**\n   * Instance based date picker locales.\n   * Overrides global date picker locales\n   *\n   * @type {Object}\n   * @public\n   */\nMaterialDatePicker.prototype.locales = {};\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialDatePicker.prototype.Constant_ = {};\n/**\n   * Store events in one place so they can be updated easily.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialDatePicker.prototype.Event_ = {};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialDatePicker.prototype.CssClasses_ = {\n    // General component classes\n    IS_UPGRADED: 'is-upgraded',\n    IS_VISIBLE: 'is-visible',\n    IS_ATTACHED: 'is-attached',\n    IS_INVALID: 'is-invalid',\n    IS_FOCUSED: 'is-focused',\n    IS_DIRTY: 'is-dirty',\n    IS_FIXED: 'is-fixed',\n    // Appearance classes\n    INLINE: 'mdl-datepicker--inline',\n    FIXED: 'mdl-datepicker--fixed',\n    LANDSCAPE: 'mdl-datepicker--landscape',\n    // Datepicker related classes\n    BACKDROP: 'mdl-datepicker__backdrop',\n    WIDGET: 'mdl-datepicker__widget',\n    INPUT: 'mdl-datepicker__input',\n    NAVIGATION: 'mdl-datepicker__navigation',\n    CALENDAR: 'mdl-datepicker__calendar',\n    YEAR: 'mdl-datepicker__year',\n    YEAR_SELECTED: 'is-selected',\n    YEAR_DISABLED: 'is-disabled',\n    YEAR_PICKER: 'is-year-picker',\n    YEAR_PICKER_ELEMENT: 'mdl-datepicker__year-picker',\n    MONTH: 'mdl-datepicker__month',\n    WEEKS: 'mdl-datepicker__weeks',\n    WEEK: 'mdl-datepicker__week',\n    WEEK_DAYS: 'mdl-datepicker__week-days',\n    DATE: 'mdl-datepicker__date',\n    DATE_TODAY: 'is-today',\n    DATE_SELECTED: 'is-selected',\n    DATE_EMPTY: 'is-empty',\n    DATE_DISABLED: 'is-disabled',\n    MONTH_CURRENT: 'mdl-datepicker__current-month',\n    MONTH_PREVIOUS: 'mdl-datepicker__previous-month',\n    MONTH_NEXT: 'mdl-datepicker__next-month',\n    HEADER: 'mdl-datepicker__header',\n    HEADER_YEAR: 'mdl-datepicker__header-year',\n    HEADER_DATE: 'mdl-datepicker__header-date',\n    CALENDAR_PREVIOUS: 'mdl-datepicker__calendar--previous',\n    CALENDAR_NEXT: 'mdl-datepicker__calendar--next',\n    ACTIONS: 'mdl-datepicker__actions',\n    ACTION_CANCEL: 'mdl-datepicker__cancel',\n    ACTION_OK: 'mdl-datepicker__ok'\n};\nMaterialDatePicker.prototype.isInitialized_ = null;\nMaterialDatePicker.prototype.currentDate_ = null;\nMaterialDatePicker.prototype.selectedDate_ = null;\nMaterialDatePicker.prototype.pickedDate_ = null;\nMaterialDatePicker.prototype.minDate_ = null;\nMaterialDatePicker.prototype.maxDate_ = null;\n/**\n   * Trigger date picker internal events\n   * @param {string} eventName  Event which will be triggered on component element\n   * @private\n   * @return {void}\n   */\nMaterialDatePicker.prototype.triggerEvent_ = function (eventName) {\n    var evt = document.createEvent('Events');\n    evt.initEvent(eventName, false, false);\n    this.element_.dispatchEvent(evt);\n};\n/**\n   * Cancel action click handler\n   * @param {Event} e click event object\n   * @private\n   * @return {void}\n   */\nMaterialDatePicker.prototype.cancelHandler_ = function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n    this.close();\n    if (this.selectedDate_) {\n        this.pickedDate_.setFullYear(this.selectedDate_.getFullYear());\n        this.pickedDate_.setMonth(this.selectedDate_.getMonth());\n        this.pickedDate_.setDate(this.selectedDate_.getDate());\n    }\n    this.updateHeader_();\n    this.updateMonthTitle_();\n    this.changeCurrentMonth_(this.pickedDate_);\n    if (this.element_.classList.contains(this.CssClasses_.YEAR_PICKER)) {\n        this.element_.classList.remove(this.CssClasses_.YEAR_PICKER);\n    }\n};\n/**\n   * Ok action click handler\n   * @param {Event} e click event object\n   * @private\n   * @return {void}\n   */\nMaterialDatePicker.prototype.okHandler_ = function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n    if (!this.selectedDate_) {\n        this.selectedDate_ = new Date();\n    }\n    this.selectedDate_.setFullYear(this.pickedDate_.getFullYear());\n    this.selectedDate_.setMonth(this.pickedDate_.getMonth());\n    this.selectedDate_.setDate(this.pickedDate_.getDate());\n    if (this.input_) {\n        this.input_.value = this.formatInputDate_(this.selectedDate_);\n        if (this.element_.MaterialTextfield) {\n            this.element_.MaterialTextfield.checkValidity();\n        }\n    }\n    this.element_.classList.add(this.CssClasses_.IS_DIRTY);\n    if (this.element_.classList.contains(this.CssClasses_.YEAR_PICKER)) {\n        this.element_.classList.remove(this.CssClasses_.YEAR_PICKER);\n    }\n    this.triggerEvent_('change');\n    this.close();\n};\n/**\n   * Date picker input focus handler\n   * @param {Event} e focus event object\n   * @private\n   * @return {void}\n   */\nMaterialDatePicker.prototype.inputFocusHandler_ = function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n    this.input_.blur();\n    this.open();\n};\n/**\n   * Date picker input blur handler\n   * @param {Event} e focusout event object\n   * @private\n   * @return {void}\n   */\nMaterialDatePicker.prototype.inputBlurHandler_ = function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n};\n/**\n   * Header year click handler\n   * @param {Event} e Click event object\n   * @private\n   * @return {void}\n   */\nMaterialDatePicker.prototype.headerYearClickHandler_ = function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n    if (this.widgetElement_ && !this.widgetElement_.classList.contains(this.CssClasses_.YEAR_PICKER)) {\n        this.widgetElement_.classList.add(this.CssClasses_.YEAR_PICKER);\n        var selectedYear = this.yearPickerElement_.querySelector('.' + this.CssClasses_.YEAR_SELECTED);\n        if (selectedYear) {\n            var focusYear = selectedYear;\n            for (var i = 0; i < 3; i++) {\n                if (focusYear.previousElementSibling) {\n                    focusYear = focusYear.previousElementSibling;\n                }\n            }\n            focusYear.parentNode.scrollTop = focusYear.offsetTop;\n        }\n    }\n};\n/**\n   * Header date click handler\n   * @param {Event} e Click event object\n   * @private\n   * @return {void}\n   */\nMaterialDatePicker.prototype.headerDateClickHandler_ = function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n    if (this.widgetElement_ && this.widgetElement_.classList.contains(this.CssClasses_.YEAR_PICKER)) {\n        this.widgetElement_.classList.remove(this.CssClasses_.YEAR_PICKER);\n    }\n};\n/**\n   * Picker year click handler\n   * @private\n   * @param {Event} e Click event object\n   * @return {void}\n   */\nMaterialDatePicker.prototype.pickYearHandler_ = function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n    var selectedYear = this.yearPickerElement_.querySelector('.' + this.CssClasses_.YEAR_SELECTED);\n    if (selectedYear && selectedYear.classList.contains(this.CssClasses_.YEAR_SELECTED)) {\n        selectedYear.classList.remove(this.CssClasses_.YEAR_SELECTED);\n    }\n    var currentYear = e.target;\n    currentYear.classList.add(this.CssClasses_.YEAR_SELECTED);\n    var currentYearInt = parseInt(currentYear.getAttribute('data-year'), 10);\n    this.pickedDate_.setFullYear(currentYearInt);\n    var pickedDate = new Date(this.pickedDate_.getTime());\n    if (!this.isInRange_(pickedDate)) {\n        if (this.minDate_ && !this.maxDate_ && pickedDate.getTime() < this.minDate_.getTime()) {\n            pickedDate.setFullYear(this.minDate_.getFullYear());\n            pickedDate.setMonth(this.minDate_.getMonth());\n            pickedDate.setDate(this.minDate_.getDate());\n        } else if (!this.minDate_ && this.maxDate_ && pickedDate.getTime() > this.maxDate_.getTime()) {\n            pickedDate.setFullYear(this.maxDate_.getFullYear());\n            pickedDate.setMonth(this.maxDate_.getMonth());\n            pickedDate.setDate(this.maxDate_.getDate());\n        } else {\n            pickedDate.setFullYear(this.minDate_.getFullYear());\n            pickedDate.setMonth(this.minDate_.getMonth());\n            pickedDate.setDate(this.minDate_.getDate());\n        }\n        this.pickedDate_.setFullYear(pickedDate.getFullYear());\n        this.pickedDate_.setMonth(pickedDate.getMonth());\n        this.pickedDate_.setDate(pickedDate.getDate());\n    }\n    this.currentMonth_.setFullYear(currentYearInt);\n    this.currentMonth_.setMonth(this.pickedDate_.getMonth());\n    this.currentMonth_.setDate(this.pickedDate_.getDate());\n    this.updateHeader_();\n    this.updateMonthTitle_();\n    this.changeCurrentMonth_(this.currentMonth_);\n};\n/**\n   * Select date action click handler\n   * @param {Event} e Click event object\n   * @private\n   * @return {void}\n   */\nMaterialDatePicker.prototype.pickDateHandler_ = function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n    var previousDate = this.calendarElement_.querySelector('.' + this.CssClasses_.DATE + '.' + this.CssClasses_.DATE_SELECTED);\n    if (previousDate) {\n        previousDate.classList.remove(this.CssClasses_.DATE_SELECTED);\n    }\n    // Select current date\n    var pickedDate = e.target;\n    var pickedDateInt = pickedDate.getAttribute('data-date');\n    pickedDate.classList.add(this.CssClasses_.DATE_SELECTED);\n    var nextPickedDate = new Date(this.pickedDate_.getTime());\n    nextPickedDate.setFullYear(this.currentMonth_.getFullYear());\n    nextPickedDate.setMonth(this.currentMonth_.getMonth());\n    nextPickedDate.setDate(pickedDateInt);\n    if (this.isInRange_(nextPickedDate)) {\n        this.pickedDate_.setFullYear(this.currentMonth_.getFullYear());\n        this.pickedDate_.setMonth(this.currentMonth_.getMonth());\n        this.pickedDate_.setDate(pickedDateInt);\n        this.updateHeader_();\n        this.updateYearPicker_();\n    }\n};\n/**\n   * Previous date picker month handler\n   * @param {Event} e Click event object\n   * @private\n   * @return {void}\n   */\nMaterialDatePicker.prototype.previousMonthHandler_ = function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n    var previousMonth = new Date(this.currentMonth_.getTime());\n    previousMonth.setDate(1);\n    previousMonth.setMonth(this.currentMonth_.getMonth() - 1);\n    this.changeCurrentMonth_(previousMonth);\n};\n/**\n   * Next date picker month handler\n   * @param {Event} e Click event object\n   * @private\n   * @return {void}\n   */\nMaterialDatePicker.prototype.nextMonthHandler_ = function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n    var nextMonth = new Date(this.currentMonth_.getTime());\n    nextMonth.setDate(1);\n    nextMonth.setMonth(nextMonth.getMonth() + 1);\n    this.changeCurrentMonth_(nextMonth);\n};\n/**\n   * Format given date for input value\n   * @param  {Date} dateObject Date object to format\n   * @private\n   * @return {string} Formatted date string\n   */\nMaterialDatePicker.prototype.formatInputDate_ = function (dateObject) {\n    var dateFormatted;\n    // If given format is actually function,\n    // execute in global scope with selected date as parameter\n    if (typeof this.locales.format === 'function') {\n        var formatFunction = this.locales.format;\n        var selectedDate = this.selectedDate_;\n        return formatFunction.call(window, selectedDate);\n    }\n    /**\n     * Append leading zero if necessary\n     * @param {number} number Number to append leading zero\n     * @return {string} String containing leading zero if needed\n     */\n    var addLeadingZero = function (number) {\n        return ('0' + number).substr(-2, 2);\n    };\n    switch (this.locales.format) {\n    case 'dd.mm.yyyy':\n        dateFormatted = [\n            addLeadingZero(dateObject.getDate()),\n            addLeadingZero(dateObject.getMonth() + 1),\n            dateObject.getFullYear()\n        ].join('.');\n        break;\n    case 'yyyy-mm-dd':\n        dateFormatted = [\n            dateObject.getFullYear(),\n            addLeadingZero(dateObject.getMonth() + 1),\n            addLeadingZero(dateObject.getDate())\n        ].join('-');\n        break;\n    case 'mm/dd/yyyy':\n        dateFormatted = [\n            addLeadingZero(dateObject.getMonth() + 1),\n            addLeadingZero(dateObject.getDate()),\n            dateObject.getFullYear()\n        ].join('/');\n        break;\n    default:\n        dateFormatted = [\n            addLeadingZero(dateObject.getMonth() + 1),\n            addLeadingZero(dateObject.getDate()),\n            dateObject.getFullYear()\n        ].join('/');\n        break;\n    }\n    return dateFormatted;\n};\n/**\n   * Format given date for header display\n   * @param  {Date} date Current picked date object\n   * @return {string} Formatted date\n   */\nMaterialDatePicker.prototype.formatHeaderDate_ = function (date) {\n    return this.locales.weekDaysShort[date.getDay()] + ', ' + this.locales.monthsShort[date.getMonth()] + ' ' + date.getDate();\n};\n/**\n   * Check if given date is today\n   * @param  {Date} currentDate Date object to check \"is today\" state\n   * @return {boolean} Date \"is today\" status\n   */\nMaterialDatePicker.prototype.isToday_ = function (currentDate) {\n    var today = new Date();\n    if (today.getFullYear() !== currentDate.getFullYear()) {\n        return false;\n    }\n    if (today.getMonth() !== currentDate.getMonth()) {\n        return false;\n    }\n    if (today.getDate() !== currentDate.getDate()) {\n        return false;\n    }\n    return true;\n};\n/**\n   * Check if given date is selected date\n   * @param  {Date} currentDate Date object to check \"is picked\" state\n   * @return {boolean} Date \"is picked\" state\n   */\nMaterialDatePicker.prototype.isPickedDate_ = function (currentDate) {\n    if (!this.pickedDate_) {\n        return false;\n    }\n    if (this.pickedDate_.getFullYear() !== currentDate.getFullYear()) {\n        return false;\n    }\n    if (this.pickedDate_.getMonth() !== currentDate.getMonth()) {\n        return false;\n    }\n    if (this.pickedDate_.getDate() !== currentDate.getDate()) {\n        return false;\n    }\n    return true;\n};\n/**\n   * Check if given date is in range, if range is set.\n   * @private\n   * @param  {Date} dateObject Date to check if it is in defined date range\n   * @return {boolean} Date \"in range\" state\n   */\nMaterialDatePicker.prototype.isInRange_ = function (dateObject) {\n    var isInRange = true;\n    if (this.minDate_ && !this.maxDate_) {\n        if (this.minDate_.getTime() > dateObject.getTime()) {\n            isInRange = false;\n        }\n    } else if (!this.minDate_ && this.maxDate_) {\n        if (this.maxDate_.getTime() < dateObject.getTime()) {\n            isInRange = false;\n        }\n    } else if (this.minDate_ && this.maxDate_) {\n        if (this.minDate_.getTime() <= dateObject.getTime() && dateObject.getTime() <= this.maxDate_.getTime()) {\n        } else {\n            isInRange = false;\n        }\n    }\n    return isInRange;\n};\n/**\n   * Check if given year is in range, if range is set\n   * @param  {number} year Year to check \"in range\" state\n   * @return {boolean} Year \"in range\" state\n   */\nMaterialDatePicker.prototype.isYearInRange_ = function (year) {\n    var isInRange = true;\n    if (this.minDate_ && !this.maxDate_) {\n        if (this.minDate_.getFullYear() > year) {\n            isInRange = false;\n        }\n    } else if (!this.minDate_ && this.maxDate_) {\n        if (this.maxDate_.getFullYear() < year) {\n            isInRange = false;\n        }\n    } else if (this.minDate_ && this.maxDate_) {\n        if (this.minDate_.getFullYear() <= year && year <= this.maxDate_.getFullYear()) {\n        } else {\n            isInRange = false;\n        }\n    }\n    return isInRange;\n};\n/**\n   * Change current month and rerender calendar\n   * @private\n   * @param  {Date} nextMonth Next month object\n   * @return {void}\n   */\nMaterialDatePicker.prototype.changeCurrentMonth_ = function (nextMonth) {\n    if (!nextMonth) {\n        return undefined;\n    }\n    var currentMonthElement = this.renderMonth_(nextMonth);\n    if (this.currentMonthElement_) {\n        this.calendarElement_.insertBefore(currentMonthElement, this.currentMonthElement_);\n    } else {\n        this.calendarElement_.appendChild(currentMonthElement);\n    }\n    var dateButtons = this.currentMonthElement_.querySelectorAll('.' + this.CssClasses_.DATE);\n    for (var i = 0; i < dateButtons.length; i++) {\n        var dateButton = dateButtons[i];\n        dateButton.removeEventListener('click', this.boundPickDateHandler);\n    }\n    if (this.currentMonthElement_.remove) {\n        this.currentMonthElement_.remove();\n    } else {\n        this.currentMonthElement_.parentNode.removeChild(this.currentMonthElement_);\n    }\n    this.currentMonthElement_ = currentMonthElement;\n    this.currentMonth_ = nextMonth;\n    this.updateMonthTitle_();\n};\n/**\n   * Render datepicker dialog\n   *\n   * @private\n   * @return {void}\n   */\nMaterialDatePicker.prototype.render_ = function () {\n    if (!this.widgetElement_) {\n        this.widgetElement_ = document.createElement('div');\n        this.widgetElement_.classList.add(this.CssClasses_.WIDGET);\n        // Append header element\n        this.widgetElement_.appendChild(this.renderHeader_());\n        this.widgetElement_.appendChild(this.renderCalendar_());\n        if (this.element_.classList.contains(this.CssClasses_.FIXED)) {\n            this.widgetElement_.classList.add(this.CssClasses_.IS_FIXED);\n            document.body.appendChild(this.widgetElement_);\n        } else {\n            this.element_.appendChild(this.widgetElement_);\n        }\n    }\n};\n/**\n   * Render date picker header element\n   * @private\n   * @return {Element} Date picker header element\n   */\nMaterialDatePicker.prototype.renderHeader_ = function () {\n    if (!this.headerElement_) {\n        this.headerElement_ = document.createElement('div');\n        this.headerYearElement_ = document.createElement('div');\n        this.headerDateElement_ = document.createElement('div');\n        // Add appropriate classes\n        this.headerElement_.classList.add(this.CssClasses_.HEADER);\n        this.headerYearElement_.classList.add(this.CssClasses_.HEADER_YEAR);\n        this.headerDateElement_.classList.add(this.CssClasses_.HEADER_DATE);\n        // Bind click events\n        this.boundHeaderYearClickHandler = this.headerYearClickHandler_.bind(this);\n        this.boundHeaderDateClickHandler = this.headerDateClickHandler_.bind(this);\n        this.headerYearElement_.addEventListener('click', this.boundHeaderYearClickHandler);\n        this.headerDateElement_.addEventListener('click', this.boundHeaderDateClickHandler);\n        // Assemble header element\n        this.headerElement_.appendChild(this.headerYearElement_);\n        this.headerElement_.appendChild(this.headerDateElement_);\n        // Setup initial header values\n        this.updateHeader_();\n    }\n    return this.headerElement_;\n};\n/**\n   * Update header date and year\n   *\n   * @private\n   * @return {void}\n   */\nMaterialDatePicker.prototype.updateHeader_ = function () {\n    if (this.headerYearElement_) {\n        this.headerYearElement_.innerHTML = this.pickedDate_.getFullYear();\n    }\n    if (this.headerDateElement_) {\n        this.headerDateElement_.innerHTML = this.formatHeaderDate_(this.pickedDate_);\n    }\n};\n/**\n   * Update current month title\n   * @private\n   * @return {void}\n   */\nMaterialDatePicker.prototype.updateMonthTitle_ = function () {\n    this.currentMonthTitleElement_.innerHTML = this.locales.months[this.currentMonth_.getMonth()] + ', ' + this.currentMonth_.getFullYear();\n};\n/**\n   * Update year picker current year\n   * @private\n   * @return {void}\n   */\nMaterialDatePicker.prototype.updateYearPicker_ = function () {\n    var pickedYear = this.yearPickerElement_.querySelector('.' + this.CssClasses_.YEAR_SELECTED);\n    if (pickedYear) {\n        pickedYear.classList.remove(this.CssClasses_.YEAR_SELECTED);\n    }\n    pickedYear = this.yearPickerElement_.querySelector('.' + this.CssClasses_.YEAR + '[data-year=\"' + this.pickedDate_.getFullYear() + '\"]');\n    pickedYear.classList.add(this.CssClasses_.YEAR_SELECTED);\n    var focusYear = pickedYear;\n    for (var i = 0; i < 3; i++) {\n        if (focusYear.previousElementSibling) {\n            focusYear = focusYear.previousElementSibling;\n        }\n    }\n    focusYear.parentNode.scrollTop = focusYear.offsetTop;\n};\n/**\n   * Render entire date picker content\n   * @private\n   * @return {Element} Date picker calendar element\n   */\nMaterialDatePicker.prototype.renderCalendar_ = function () {\n    if (!this.calendarElement_) {\n        this.calendarElement_ = document.createElement('div');\n        this.calendarElement_.classList.add(this.CssClasses_.CALENDAR);\n        this.calendarElement_.appendChild(this.renderNavigation_());\n        this.calendarElement_.appendChild(this.renderWeekDays_());\n        this.currentMonthElement_ = this.renderMonth_(this.currentMonth_);\n        this.calendarElement_.appendChild(this.currentMonthElement_);\n        this.calendarElement_.appendChild(this.renderYearPicker_());\n        this.calendarElement_.appendChild(this.renderActions_());\n    }\n    return this.calendarElement_;\n};\n/**\n   * Render month navigation\n   * @private\n   * @return {Element} Date picker navigation element\n   */\nMaterialDatePicker.prototype.renderNavigation_ = function () {\n    if (!this.navigationElement_) {\n        this.navigationElement_ = document.createElement('div');\n        this.navigationElement_.classList.add(this.CssClasses_.NAVIGATION);\n        var previousMonth = document.createElement('button');\n        previousMonth.setAttribute('type', 'button');\n        previousMonth.classList.add('mdl-button');\n        previousMonth.classList.add('mdl-js-button');\n        previousMonth.classList.add('mdl-button--icon');\n        previousMonth.classList.add(this.CssClasses_.MONTH_PREVIOUS);\n        var previousIcon = document.createElement('i');\n        previousIcon.classList.add('material-icons');\n        previousIcon.innerHTML = 'keyboard_arrow_left';\n        previousMonth.appendChild(previousIcon);\n        var nextMonth = document.createElement('button');\n        nextMonth.setAttribute('type', 'button');\n        nextMonth.classList.add('mdl-button');\n        nextMonth.classList.add('mdl-js-button');\n        nextMonth.classList.add('mdl-button--icon');\n        nextMonth.classList.add(this.CssClasses_.MONTH_NEXT);\n        var nextIcon = document.createElement('i');\n        nextIcon.classList.add('material-icons');\n        nextIcon.innerHTML = 'keyboard_arrow_right';\n        nextMonth.appendChild(nextIcon);\n        // Bind month change event\n        this.boundPreviousMonthHandler = this.previousMonthHandler_.bind(this);\n        this.boundNextMonthHandler = this.nextMonthHandler_.bind(this);\n        previousMonth.addEventListener('click', this.boundPreviousMonthHandler, true);\n        nextMonth.addEventListener('click', this.boundNextMonthHandler, true);\n        this.currentMonthTitleElement_ = document.createElement('div');\n        this.currentMonthTitleElement_.classList.add(this.CssClasses_.MONTH_CURRENT);\n        if (this.currentMonth_) {\n            this.updateMonthTitle_();\n        }\n        this.navigationElement_.appendChild(previousMonth);\n        this.navigationElement_.appendChild(this.currentMonthTitleElement_);\n        this.navigationElement_.appendChild(nextMonth);\n        componentHandler.upgradeElement(previousMonth);\n        componentHandler.upgradeElement(nextMonth);\n    }\n    return this.navigationElement_;\n};\n/**\n   * Render date picker week days heading\n   *\n   * @private\n   * @return {Element} Date picker week days heading element\n   */\nMaterialDatePicker.prototype.renderWeekDays_ = function () {\n    if (!this.weekDaysElement_) {\n        this.weekDaysElement_ = document.createElement('div');\n        this.weekDaysElement_.classList.add(this.CssClasses_.WEEK_DAYS);\n        var weekStart = this.locales.weekStart;\n        for (var i = 0; i <= 6; i++) {\n            var weekDay = document.createElement('button');\n            weekDay.setAttribute('type', 'button');\n            weekDay.classList.add(this.CssClasses_.DATE);\n            weekDay.classList.add(this.CssClasses_.DATE_EMPTY);\n            weekDay.innerHTML = this.locales.weekDaysLetter[weekStart];\n            this.weekDaysElement_.appendChild(weekDay);\n            weekStart += 1;\n            if (weekStart > 6) {\n                weekStart = 0;\n            }\n        }\n    }\n    return this.weekDaysElement_;\n};\n/**\n   * Render date picker weeks\n   * @param {Date} monthObject Date object from which month element will be rendered\n   * @private\n   * @return {Element} Date picker month element\n   */\nMaterialDatePicker.prototype.renderMonth_ = function (monthObject) {\n    var month = document.createElement('div');\n    month.classList.add(this.CssClasses_.MONTH);\n    var firstDay = new Date(monthObject.getTime());\n    var lastDay = new Date(monthObject.getTime());\n    var currentDay = new Date(firstDay.getTime());\n    var currentDayInt = 1;\n    // Set first day of the month\n    firstDay.setDate(1);\n    // Set last day of the month\n    lastDay.setDate(1);\n    lastDay.setMonth(lastDay.getMonth() + 1);\n    lastDay.setDate(lastDay.getDate() - 1);\n    var renderDays = true;\n    var weekStart = this.locales.weekStart;\n    while (renderDays) {\n        var week = document.createElement('div');\n        week.classList.add(this.CssClasses_.WEEK);\n        for (var i = 0; i <= 6; i++) {\n            currentDay.setDate(currentDayInt);\n            if (currentDayInt > lastDay.getDate()) {\n                renderDays = false;\n                break;\n            }\n            var weekDay = document.createElement('button');\n            weekDay.classList.add(this.CssClasses_.DATE);\n            if (currentDay.getDay() === weekStart && currentDay.getDate() <= lastDay.getDate()) {\n                weekDay.innerHTML = currentDayInt;\n                weekDay.setAttribute('data-date', currentDayInt);\n                weekDay.setAttribute('type', 'button');\n                currentDayInt++;\n                if (!this.isInRange_(currentDay)) {\n                    weekDay.classList.add(this.CssClasses_.DATE_DISABLED);\n                }\n                // Bind select date event\n                if (!weekDay.classList.contains(this.CssClasses_.DATE_DISABLED)) {\n                    if (this.isToday_(currentDay)) {\n                        weekDay.classList.add(this.CssClasses_.DATE_TODAY);\n                    }\n                    // Check if current day is selected\n                    if (this.isPickedDate_(currentDay)) {\n                        weekDay.classList.add(this.CssClasses_.DATE_SELECTED);\n                    }\n                    this.boundPickDateHandler = this.pickDateHandler_.bind(this);\n                    weekDay.addEventListener('click', this.boundPickDateHandler, true);\n                }\n            } else {\n                // Render empty date\n                weekDay.classList.add(this.CssClasses_.DATE_EMPTY);\n            }\n            weekStart += 1;\n            if (weekStart > 6) {\n                weekStart = 0;\n            }\n            week.appendChild(weekDay);\n        }\n        month.appendChild(week);\n    }\n    return month;\n};\n/**\n   * Render year picker\n   * @private\n   * @return {Element} Date picker \"year picker\" element\n   */\nMaterialDatePicker.prototype.renderYearPicker_ = function () {\n    var year;\n    var yearButton;\n    if (this.yearPickerElement_) {\n        // Year picker already rendered, just need to update state\n        var yearButtons = this.yearPickerElement_.querySelectorAll('.' + this.CssClasses_.YEAR);\n        for (var i = 0; i < yearButtons.length; i++) {\n            yearButton = null;\n            yearButton = yearButtons[i];\n            var existingYear = parseInt(yearButton.getAttribute('data-year'), 10);\n            if (this.isYearInRange_(existingYear)) {\n                if (yearButton.classList.contains(this.CssClasses_.YEAR_DISABLED)) {\n                    yearButton.classList.remove(this.CssClasses_.YEAR_DISABLED);\n                }\n                // First try remove, then add event listener again to avoid duplication\n                yearButton.removeEventListener('click', this.boundPickYearHandler);\n                yearButton.addEventListener('click', this.boundPickYearHandler);\n            } else {\n                yearButton.removeEventListener('click', this.boundPickYearHandler);\n                yearButton.classList.add(this.CssClasses_.YEAR_DISABLED);\n            }\n        }\n    } else {\n        this.yearPickerElement_ = document.createElement('div');\n        this.yearPickerElement_.classList.add(this.CssClasses_.YEAR_PICKER_ELEMENT);\n        var today = new Date();\n        var startYear = today.getFullYear() - 100;\n        var endYear = today.getFullYear() + 100;\n        this.boundPickYearHandler = this.pickYearHandler_.bind(this);\n        for (year = startYear; year <= endYear; year++) {\n            yearButton = document.createElement('button');\n            yearButton.classList.add(this.CssClasses_.YEAR);\n            yearButton.setAttribute('data-year', year);\n            yearButton.setAttribute('type', 'button');\n            yearButton.innerHTML = year;\n            if (this.isYearInRange_(year)) {\n                yearButton.addEventListener('click', this.boundPickYearHandler);\n                if (this.pickedDate_) {\n                    if (this.pickedDate_.getFullYear() === year) {\n                        yearButton.classList.add(this.CssClasses_.YEAR_SELECTED);\n                    }\n                }\n            } else {\n                yearButton.classList.add(this.CssClasses_.YEAR_DISABLED);\n            }\n            this.yearPickerElement_.appendChild(yearButton);\n        }\n    }\n    return this.yearPickerElement_;\n};\n/**\n   * Render date picker actions\n   * @private\n   * @return {Element} Date picker actions element\n   */\nMaterialDatePicker.prototype.renderActions_ = function () {\n    if (!this.actionsElement_) {\n        this.actionsElement_ = document.createElement('div');\n        this.actionsElement_.classList.add(this.CssClasses_.ACTIONS);\n        // Cancel button\n        this.cancelElement_ = document.createElement('button');\n        this.cancelElement_.classList.add('mdl-button');\n        this.cancelElement_.classList.add('mdl-js-button');\n        this.cancelElement_.classList.add('mdl-button--accent');\n        this.cancelElement_.classList.add(this.CssClasses_.ACTION_CANCEL);\n        this.cancelElement_.setAttribute('type', 'button');\n        this.cancelElement_.innerHTML = this.locales.actions.cancel || 'Cancel';\n        // OK button\n        this.okElement_ = document.createElement('button');\n        this.okElement_.classList.add('mdl-button');\n        this.okElement_.classList.add('mdl-js-button');\n        this.okElement_.classList.add('mdl-button--accent');\n        this.okElement_.classList.add(this.CssClasses_.ACTION_OK);\n        this.okElement_.setAttribute('type', 'button');\n        this.okElement_.innerHTML = this.locales.actions.ok || 'OK';\n        // Bind events\n        this.boundCancelActionHandler = this.cancelHandler_.bind(this);\n        this.boundOkActionHandler = this.okHandler_.bind(this);\n        this.cancelElement_.addEventListener('click', this.boundCancelActionHandler, true);\n        this.okElement_.addEventListener('click', this.boundOkActionHandler, true);\n        this.actionsElement_.appendChild(this.cancelElement_);\n        this.actionsElement_.appendChild(this.okElement_);\n        componentHandler.upgradeElement(this.cancelElement_);\n        componentHandler.upgradeElement(this.okElement_);\n    }\n    return this.actionsElement_;\n};\n/**\n   * Destroy all properties and widget elements\n   * @private\n   * @return {void}\n   */\nMaterialDatePicker.prototype.destroy_ = function () {\n    var i = 0;\n    if (this.yearPickerElement_) {\n        var yearButtons = this.yearPickerElement_.querySelectorAll('.' + this.CssClasses_.YEAR);\n        for (i = 0; i < yearButtons.length; i++) {\n            var yearButton = yearButtons[i];\n            yearButton.removeEventListener('click', this.boundPickYearHandler);\n        }\n    }\n    if (this.currentMonthElement_) {\n        var dateButtons = this.currentMonthElement_.querySelectorAll('.' + this.CssClasses_.DATE);\n        for (i = 0; i < dateButtons.length; i++) {\n            var dateButton = dateButtons[i];\n            dateButton.removeEventListener('click', this.boundPickDateHandler);\n        }\n    }\n    if (this.cancelElement_) {\n        componentHandler.downgradeElements(this.cancelElement_);\n        this.cancelElement_.removeEventListener('click', this.boundCancelActionHandler);\n    }\n    if (this.okElement_) {\n        componentHandler.downgradeElements(this.okElement_);\n        this.okElement_.removeEventListener('click', this.boundOkActionHandler);\n    }\n    if (this.actionsElement_) {\n        this.actionsElement_ = null;\n    }\n    if (this.navigationElement_) {\n        var previousMonth = this.navigationElement_.querySelector('.' + this.CssClasses_.MONTH_PREVIOUS);\n        var nextMonth = this.navigationElement_.querySelector('.' + this.CssClasses_.MONTH_NEXT);\n        if (previousMonth) {\n            previousMonth.removeEventListener('click', this.boundPreviousMonthHandler);\n        }\n        if (nextMonth) {\n            nextMonth.removeEventListener('click', this.boundNextMonthHandler);\n        }\n        this.navigationElement_ = null;\n    }\n    if (this.headerDateElement_) {\n        this.headerDateElement_.removeEventListener('click', this.boundHeaderDateClickHandler);\n        this.headerDateElement_ = null;\n    }\n    if (this.headerYearElement_) {\n        this.headerYearElement_.removeEventListener('click', this.boundHeaderYearClickHandler);\n        this.headerYearElement_ = null;\n    }\n    if (this.headerElement_) {\n        this.headerElement_ = null;\n    }\n    if (this.weekDaysElement_) {\n        this.weekDaysElement_ = null;\n    }\n    if (this.calendarElement_) {\n        this.calendarElement_ = null;\n    }\n    if (this.widgetElement_) {\n        if (this.widgetElement_.remove) {\n            this.widgetElement_.remove();\n        } else {\n            this.widgetElement_.parentNode.removeChild(this.widgetElement_);\n        }\n        this.widgetElement_ = null;\n    }\n};\n/**\n   * Open date picker dialog\n   * @public\n   * @return {void}\n   */\nMaterialDatePicker.prototype.open = function () {\n    // Date picker widget already opened\n    if (this.widgetElement_ && this.widgetElement_.classList.contains(this.CssClasses_.IS_VISIBLE)) {\n        return;\n    }\n    if (!this.widgetElement_) {\n        this.render_();\n    }\n    if (!this.element_.classList.contains(this.CssClasses_.IS_FOCUSED)) {\n        this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n    }\n    // Slightly delay picker show to enable animation\n    setTimeout(function () {\n        if (this.backdrop_) {\n            this.backdrop_.style.display = 'block';\n        }\n        this.widgetElement_.classList.add(this.CssClasses_.IS_VISIBLE);\n        this.element_.classList.add(this.CssClasses_.IS_VISIBLE);\n        this.triggerEvent_('open');\n    }.bind(this), 0);\n};\nMaterialDatePicker.prototype['open'] = MaterialDatePicker.prototype.open;\n/**\n   * Close date picker dialog\n   *\n   * @public\n   * @return {void}\n   */\nMaterialDatePicker.prototype.close = function () {\n    // Inline styles can't be closed.\n    // @TODO: This should be reviewed with Google guys\n    if (this.element_.classList.contains(this.CssClasses_.INLINE)) {\n        return;\n    }\n    // Date picker widget already closed\n    if (!this.widgetElement_ || !this.widgetElement_.classList.contains(this.CssClasses_.IS_VISIBLE)) {\n        return;\n    }\n    if (this.element_.classList.contains(this.CssClasses_.IS_FOCUSED)) {\n        this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n    }\n    if (this.widgetElement_.classList.contains(this.CssClasses_.IS_VISIBLE)) {\n        if (this.backdrop_) {\n            this.backdrop_.style.display = 'none';\n        }\n        this.widgetElement_.classList.remove(this.CssClasses_.IS_VISIBLE);\n        this.element_.classList.remove(this.CssClasses_.IS_VISIBLE);\n        this.triggerEvent_('close');\n        setTimeout(function () {\n            // Destroy all properties and widget elements after close\n            this.destroy_();\n        }.bind(this), 200);\n    }\n};\nMaterialDatePicker.prototype['close'] = MaterialDatePicker.prototype.close;\n/**\n   * Get selected date to datepicker\n   * @public\n   * @return {Date} Current selected date\n   */\nMaterialDatePicker.prototype.getSelectedDate = function () {\n    return this.selectedDate_;\n};\nMaterialDatePicker.prototype['getSelectedDate'] = MaterialDatePicker.prototype.getSelectedDate;\n/**\n   * Set selected date to datepicker\n   *\n   * @param  {Date} selectedDate Date object to be set as selected in picker\n   * @public\n   * @return {Date} Current selected date\n   */\nMaterialDatePicker.prototype.setSelectedDate = function (selectedDate) {\n    if (selectedDate && this.isInRange_(selectedDate)) {\n        this.pickedDate_ = selectedDate;\n        this.currentMonth_ = selectedDate;\n        this.selectedDate_ = selectedDate;\n        this.render_();\n        if (this.input_) {\n            this.input_.value = this.formatInputDate_(this.selectedDate_);\n            if (this.element_.MaterialTextfield) {\n                this.element_.MaterialTextfield.checkValidity();\n            }\n        }\n        this.element_.classList.add(this.CssClasses_.IS_DIRTY);\n    }\n    return this.getSelectedDate();\n};\nMaterialDatePicker.prototype['setSelectedDate'] = MaterialDatePicker.prototype.setSelectedDate;\n/**\n   * Set allowed date picker range. Dates outside of the range can't be selected.\n   * @param {Date} minDate Minimum date\n   * @param {Date} maxDate Maximum date\n   */\nMaterialDatePicker.prototype.setRange = function (minDate, maxDate) {\n    if (minDate && minDate instanceof Date) {\n        // Set minimum lowest possible value of the date\n        minDate.setHours(0);\n        minDate.setMinutes(0);\n        minDate.setSeconds(0);\n        minDate.setMilliseconds(0);\n    }\n    this.minDate_ = minDate || null;\n    if (maxDate && maxDate instanceof Date) {\n        // Set maximum highest possible value of the date\n        maxDate.setHours(23);\n        maxDate.setMinutes(59);\n        maxDate.setSeconds(59);\n        maxDate.setMilliseconds(999);\n    }\n    this.maxDate_ = maxDate || null;\n    // Means that widget exists and is opened\n    if (this.widgetElement_) {\n        this.changeCurrentMonth_(this.currentMonth_);\n        this.renderYearPicker_();\n    }\n};\nMaterialDatePicker.prototype['setRange'] = MaterialDatePicker.prototype.setRange;\n/**\n   * Initialize element.\n   */\nMaterialDatePicker.prototype.init = function () {\n    if (this.element_) {\n        // Load default configuration\n        this.locales = Object.create(MaterialDatePicker.locales);\n        this.input_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);\n        if (this.input_) {\n            if (!this.element_.getAttribute('upgraded')) {\n                componentHandler.upgradeElement(this.element_, 'MaterialTextfield');\n            }\n            // Bind input events\n            this.boundInputFocusHandler = this.inputFocusHandler_.bind(this);\n            this.boundInputBlurHandler = this.inputBlurHandler_.bind(this);\n            this.input_.addEventListener('focus', this.boundInputFocusHandler, true);\n            this.input_.addEventListener('focusout', this.boundInputBlurHandler, true);\n        }\n        // Setup properties default values.\n        this.pickedDate_ = new Date();\n        this.currentMonth_ = new Date();\n        this.selectedDate_ = null;\n        if (this.element_.classList.contains(this.CssClasses_.FIXED)) {\n            this.backdrop_ = document.createElement('div');\n            this.backdrop_.classList.add(this.CssClasses_.BACKDROP);\n            this.backdrop_.style.display = 'none';\n            this.backdrop_.setAttribute('tabindex', -1);\n            document.body.appendChild(this.backdrop_);\n        }\n        if (this.element_.classList.contains(this.CssClasses_.IS_VISIBLE)) {\n            // Hide datepicker until it is fully rendered\n            this.element_.classList.remove(this.CssClasses_.IS_VISIBLE);\n            // Once rendered, show datepicker\n            this.open();\n        }\n        // Set private isInitialized_ property for internal tracking\n        this.isInitialized_ = true;\n        // Add \"is-updated\" class\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n    }\n};\n/**\n   * Downgrade datepicker component\n   * @return {void}\n   */\nMaterialDatePicker.prototype.mdlDowngrade_ = function () {\n    if (this.input_) {\n        this.input_.removeEventListener('focus', this.boundInputFocusHandler, true);\n        this.input_.removeEventListener('focusout', this.boundInputBlurHandler, true);\n    }\n    this.destroy_();\n    if (this.backdrop_) {\n        if (this.backdrop_.remove) {\n            this.backdrop_.remove();\n        } else {\n            this.backdrop_.parentNode.removeChild(this.backdrop_);\n        }\n    }\n    // Trigger \"destroy\" event for all those who are listening\n    // for other component events\n    this.triggerEvent_('destroy');\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialDatePicker,\n    classAsString: 'MaterialDatePicker',\n    cssClass: 'mdl-js-datepicker',\n    widget: true\n});","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Ripple MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialRipple = function MaterialRipple(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow['MaterialRipple'] = MaterialRipple;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\nMaterialRipple.prototype.Constant_ = {\n    INITIAL_SCALE: 'scale(0.0001, 0.0001)',\n    INITIAL_SIZE: '1px',\n    INITIAL_OPACITY: '0.4',\n    FINAL_OPACITY: '0',\n    FINAL_SCALE: ''\n};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\nMaterialRipple.prototype.CssClasses_ = {\n    RIPPLE_CENTER: 'mdl-ripple--center',\n    RIPPLE_EFFECT_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE: 'mdl-ripple',\n    IS_ANIMATING: 'is-animating',\n    IS_VISIBLE: 'is-visible'\n};\n/**\n   * Handle mouse / finger down on element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialRipple.prototype.downHandler_ = function (event) {\n    if (!this.rippleElement_.style.width && !this.rippleElement_.style.height) {\n        var rect = this.element_.getBoundingClientRect();\n        this.boundHeight = rect.height;\n        this.boundWidth = rect.width;\n        this.rippleSize_ = Math.sqrt(rect.width * rect.width + rect.height * rect.height) * 2 + 2;\n        this.rippleElement_.style.width = this.rippleSize_ + 'px';\n        this.rippleElement_.style.height = this.rippleSize_ + 'px';\n    }\n    this.rippleElement_.classList.add(this.CssClasses_.IS_VISIBLE);\n    if (event.type === 'mousedown' && this.ignoringMouseDown_) {\n        this.ignoringMouseDown_ = false;\n    } else {\n        if (event.type === 'touchstart') {\n            this.ignoringMouseDown_ = true;\n        }\n        var frameCount = this.getFrameCount();\n        if (frameCount > 0) {\n            return;\n        }\n        this.setFrameCount(1);\n        var bound = event.currentTarget.getBoundingClientRect();\n        var x;\n        var y;\n        // Check if we are handling a keyboard click.\n        if (event.clientX === 0 && event.clientY === 0) {\n            x = Math.round(bound.width / 2);\n            y = Math.round(bound.height / 2);\n        } else {\n            var clientX = event.clientX ? event.clientX : event.touches[0].clientX;\n            var clientY = event.clientY ? event.clientY : event.touches[0].clientY;\n            x = Math.round(clientX - bound.left);\n            y = Math.round(clientY - bound.top);\n        }\n        this.setRippleXY(x, y);\n        this.setRippleStyles(true);\n        requestAnimationFrame(this.animFrameHandler.bind(this));\n    }\n};\n/**\n   * Handle mouse / finger up on element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialRipple.prototype.upHandler_ = function (event) {\n    // Don't fire for the artificial \"mouseup\" generated by a double-click.\n    if (event && event.detail !== 2) {\n        // Allow a repaint to occur before removing this class, so the animation\n        // shows for tap events, which seem to trigger a mouseup too soon after\n        // mousedown.\n        window.setTimeout(function () {\n            this.rippleElement_.classList.remove(this.CssClasses_.IS_VISIBLE);\n        }.bind(this), 0);\n    }\n};\n/**\n   * Initialize element.\n   */\nMaterialRipple.prototype.init = function () {\n    if (this.element_) {\n        var recentering = this.element_.classList.contains(this.CssClasses_.RIPPLE_CENTER);\n        if (!this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT_IGNORE_EVENTS)) {\n            this.rippleElement_ = this.element_.querySelector('.' + this.CssClasses_.RIPPLE);\n            this.frameCount_ = 0;\n            this.rippleSize_ = 0;\n            this.x_ = 0;\n            this.y_ = 0;\n            // Touch start produces a compat mouse down event, which would cause a\n            // second ripples. To avoid that, we use this property to ignore the first\n            // mouse down after a touch start.\n            this.ignoringMouseDown_ = false;\n            this.boundDownHandler = this.downHandler_.bind(this);\n            this.element_.addEventListener('mousedown', this.boundDownHandler);\n            this.element_.addEventListener('touchstart', this.boundDownHandler);\n            this.boundUpHandler = this.upHandler_.bind(this);\n            this.element_.addEventListener('mouseup', this.boundUpHandler);\n            this.element_.addEventListener('mouseleave', this.boundUpHandler);\n            this.element_.addEventListener('touchend', this.boundUpHandler);\n            this.element_.addEventListener('blur', this.boundUpHandler);\n            /**\n         * Getter for frameCount_.\n         * @return {number} the frame count.\n         */\n            this.getFrameCount = function () {\n                return this.frameCount_;\n            };\n            /**\n         * Setter for frameCount_.\n         * @param {number} fC the frame count.\n         */\n            this.setFrameCount = function (fC) {\n                this.frameCount_ = fC;\n            };\n            /**\n         * Getter for rippleElement_.\n         * @return {Element} the ripple element.\n         */\n            this.getRippleElement = function () {\n                return this.rippleElement_;\n            };\n            /**\n         * Sets the ripple X and Y coordinates.\n         * @param  {number} newX the new X coordinate\n         * @param  {number} newY the new Y coordinate\n         */\n            this.setRippleXY = function (newX, newY) {\n                this.x_ = newX;\n                this.y_ = newY;\n            };\n            /**\n         * Sets the ripple styles.\n         * @param  {boolean} start whether or not this is the start frame.\n         */\n            this.setRippleStyles = function (start) {\n                if (this.rippleElement_ !== null) {\n                    var transformString;\n                    var scale;\n                    var offset = 'translate(' + this.x_ + 'px, ' + this.y_ + 'px)';\n                    if (start) {\n                        scale = this.Constant_.INITIAL_SCALE;\n                    } else {\n                        scale = this.Constant_.FINAL_SCALE;\n                        if (recentering) {\n                            offset = 'translate(' + this.boundWidth / 2 + 'px, ' + this.boundHeight / 2 + 'px)';\n                        }\n                    }\n                    transformString = 'translate(-50%, -50%) ' + offset + scale;\n                    this.rippleElement_.style.webkitTransform = transformString;\n                    this.rippleElement_.style.msTransform = transformString;\n                    this.rippleElement_.style.transform = transformString;\n                    if (start) {\n                        this.rippleElement_.classList.remove(this.CssClasses_.IS_ANIMATING);\n                    } else {\n                        this.rippleElement_.classList.add(this.CssClasses_.IS_ANIMATING);\n                    }\n                }\n            };\n            /**\n         * Handles an animation frame.\n         */\n            this.animFrameHandler = function () {\n                if (this.frameCount_-- > 0) {\n                    requestAnimationFrame(this.animFrameHandler.bind(this));\n                } else {\n                    this.setRippleStyles(false);\n                }\n            };\n        }\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialRipple,\n    classAsString: 'MaterialRipple',\n    cssClass: 'mdl-js-ripple-effect',\n    widget: false\n});"],"sourceRoot":"/source/"}